{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"tags/","text":"Centos Centos\u78c1\u76d8\u6302\u8f7d Centos\u5185\u6838\u5347\u7ea7 Cilium Cilium \u5b89\u88c5 Dick Centos\u78c1\u76d8\u6302\u8f7d ES IK\u5206\u8bcd\u70ed\u66f4\u65b0 Envoy \u57fa\u7840\u77e5\u8bc6 Git Git\u5e38\u7528\u64cd\u4f5c Golang Goquery\u5b9e\u7528\u59ff\u52bf Goquery Goquery\u5b9e\u7528\u59ff\u52bf HashTable HashTable IK IK\u5206\u8bcd\u70ed\u66f4\u65b0 Istio Istio Mesh K8S Cilium \u5b89\u88c5 \u5b89\u88c5 \u8d44\u6e90\u7c7b\u578b \u670d\u52a1\u4e0e\u8d1f\u8f7d Kernel Centos\u5185\u6838\u5347\u7ea7 Kubernetes Cilium \u5b89\u88c5 \u5b89\u88c5 \u8d44\u6e90\u7c7b\u578b \u670d\u52a1\u4e0e\u8d1f\u8f7d Linux \u6027\u80fd\u5206\u6790 Centos\u78c1\u76d8\u6302\u8f7d Centos\u5185\u6838\u5347\u7ea7 \u5e38\u7528\u547d\u4ee4 Redis HashTable \u7b80\u4ecb Resource \u8d44\u6e90\u7c7b\u578b Service \u670d\u52a1\u4e0e\u8d1f\u8f7d Service Mesh \u57fa\u7840\u77e5\u8bc6 Tools \u5e38\u7528\u5de5\u5177 Trace \u57fa\u7840\u77e5\u8bc6 \u670d\u52a1\u6cbb\u7406 \u57fa\u7840\u77e5\u8bc6 \u6ce8\u518c\u4e2d\u5fc3 \u57fa\u7840\u77e5\u8bc6 \u7f51\u5173 \u57fa\u7840\u77e5\u8bc6 \u8d1f\u8f7d\u5747\u8861 \u57fa\u7840\u77e5\u8bc6 \u914d\u7f6e\u4e2d\u5fc3 \u57fa\u7840\u77e5\u8bc6","title":"Tag"},{"location":"tags/#centos","text":"Centos\u78c1\u76d8\u6302\u8f7d Centos\u5185\u6838\u5347\u7ea7","title":"Centos"},{"location":"tags/#cilium","text":"Cilium \u5b89\u88c5","title":"Cilium"},{"location":"tags/#dick","text":"Centos\u78c1\u76d8\u6302\u8f7d","title":"Dick"},{"location":"tags/#es","text":"IK\u5206\u8bcd\u70ed\u66f4\u65b0","title":"ES"},{"location":"tags/#envoy","text":"\u57fa\u7840\u77e5\u8bc6","title":"Envoy"},{"location":"tags/#git","text":"Git\u5e38\u7528\u64cd\u4f5c","title":"Git"},{"location":"tags/#golang","text":"Goquery\u5b9e\u7528\u59ff\u52bf","title":"Golang"},{"location":"tags/#goquery","text":"Goquery\u5b9e\u7528\u59ff\u52bf","title":"Goquery"},{"location":"tags/#hashtable","text":"HashTable","title":"HashTable"},{"location":"tags/#ik","text":"IK\u5206\u8bcd\u70ed\u66f4\u65b0","title":"IK"},{"location":"tags/#istio","text":"Istio Mesh","title":"Istio"},{"location":"tags/#k8s","text":"Cilium \u5b89\u88c5 \u5b89\u88c5 \u8d44\u6e90\u7c7b\u578b \u670d\u52a1\u4e0e\u8d1f\u8f7d","title":"K8S"},{"location":"tags/#kernel","text":"Centos\u5185\u6838\u5347\u7ea7","title":"Kernel"},{"location":"tags/#kubernetes","text":"Cilium \u5b89\u88c5 \u5b89\u88c5 \u8d44\u6e90\u7c7b\u578b \u670d\u52a1\u4e0e\u8d1f\u8f7d","title":"Kubernetes"},{"location":"tags/#linux","text":"\u6027\u80fd\u5206\u6790 Centos\u78c1\u76d8\u6302\u8f7d Centos\u5185\u6838\u5347\u7ea7 \u5e38\u7528\u547d\u4ee4","title":"Linux"},{"location":"tags/#redis","text":"HashTable \u7b80\u4ecb","title":"Redis"},{"location":"tags/#resource","text":"\u8d44\u6e90\u7c7b\u578b","title":"Resource"},{"location":"tags/#service","text":"\u670d\u52a1\u4e0e\u8d1f\u8f7d","title":"Service"},{"location":"tags/#service-mesh","text":"\u57fa\u7840\u77e5\u8bc6","title":"Service Mesh"},{"location":"tags/#tools","text":"\u5e38\u7528\u5de5\u5177","title":"Tools"},{"location":"tags/#trace","text":"\u57fa\u7840\u77e5\u8bc6","title":"Trace"},{"location":"tags/#_1","text":"\u57fa\u7840\u77e5\u8bc6","title":"\u670d\u52a1\u6cbb\u7406"},{"location":"tags/#_2","text":"\u57fa\u7840\u77e5\u8bc6","title":"\u6ce8\u518c\u4e2d\u5fc3"},{"location":"tags/#_3","text":"\u57fa\u7840\u77e5\u8bc6","title":"\u7f51\u5173"},{"location":"tags/#_4","text":"\u57fa\u7840\u77e5\u8bc6","title":"\u8d1f\u8f7d\u5747\u8861"},{"location":"tags/#_5","text":"\u57fa\u7840\u77e5\u8bc6","title":"\u914d\u7f6e\u4e2d\u5fc3"},{"location":"ES/IK%E5%88%86%E8%AF%8D/","tags":["ES","IK"],"text":"IK \u5206\u8bcd\u63d2\u4ef6\u8bcd\u5e93\u70ed\u66f4\u65b0 \u80cc\u666f ES \u7248\u672c\uff1a 7.16.2 IK \u5206\u8bcd: 7.16.2 https://github.com/medcl/elasticsearch-analysis-ik \u8bcd\u5e93\u670d\u52a1 \u8bcd\u5e93\u670d\u52a1\u8981\u6c42\uff08\u81ea\u5b9a\u4e49\u8bcd\u5e93\u548c\u505c\u987f\u8bcd\u5e93\u901a\u8fc7 URL \u533a\u5206\u5373\u53ef\uff09 Head \u63a5\u53e3\uff0c\u8fd4\u56de\u81ea\u5b9a\u4e49\u8bcd\u5e93\u5927\u5c0f Get \u63a5\u53e3\uff0c\u8fd4\u56de\u8bcd\u5e93\u5185\u5bb9 \u5185\u5b58\u8bcd\u5178 demo type Dict struct { Words [] string `json:\"words\"` } func ( dict * Dict ) Content () string { return strings . Join ( dict . Words , \"\\n\" ) } func ( dict * Dict ) Size () int { return len ( dict . Words ) } server demo package main import ( \"net/http\" \"strconv\" \"github.com/labstack/echo/v4\" \"github.com/labstack/echo/v4/middleware\" ) func main () { e := echo . New () e . Use ( middleware . Logger ()) e . Use ( middleware . Recover ()) // Routes e . HEAD ( \"/custom\" , custom_head ) e . GET ( \"/custom\" , custom_words ) e . HEAD ( \"/stop\" , hstop_head ) e . GET ( \"/stop\" , stop_wrods ) e . Logger . Fatal ( e . Start ( \":8080\" )) } func custom_head ( c echo . Context ) error { custom_dict := Dict {} dict_size := strconv . Itoa ( custom_dict . Size ()) c . Response (). Header (). Add ( \"Last-Modified\" , dict_size ) c . Response (). Header (). Add ( \"ETag\" , dict_size ) return c . String ( http . StatusOK , \"\" ) } func custom_words ( c echo . Context ) error { custom_dict := Dict {} body := custom_dict . Content () dict_size := strconv . Itoa ( custom_dict . Size ()) buffer := [] byte ( custom_dict . Content ()) c . Response (). Header (). Add ( \"Last-Modified\" , dict_size ) c . Response (). Header (). Add ( \"ETag\" , dict_size ) c . Response (). Header (). Add ( \"Content-Length\" , strconv . Itoa ( len ( buffer ))) return c . String ( http . StatusOK , body ) } func hstop_head ( c echo . Context ) error { stop_dict := Dict {} dict_size := strconv . Itoa ( stop_dict . Size ()) c . Response (). Header (). Add ( \"Last-Modified\" , dict_size ) c . Response (). Header (). Add ( \"ETag\" , dict_size ) return c . String ( http . StatusOK , \"\" ) } func stop_wrods ( c echo . Context ) error { stop_dict := Dict {} body := stop_dict . Content () dict_size := strconv . Itoa ( stop_dict . Size ()) buffer := [] byte ( stop_dict . Content ()) c . Response (). Header (). Add ( \"Last-Modified\" , dict_size ) c . Response (). Header (). Add ( \"ETag\" , dict_size ) c . Response (). Header (). Add ( \"Content-Length\" , strconv . Itoa ( len ( buffer ))) return c . String ( http . StatusOK , body ) } \u4e0b\u8f7d IK \u5206\u8bcd\u63d2\u4ef6\uff0c\u66f4\u6539\u8bcd\u5e93\u914d\u7f6e \u4e0b\u8f7d\u8bcd\u5e93\uff0c\u89e3\u538b wget https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.16.2/elasticsearch-analysis-ik-7.16.2.zip # \u89e3\u538b unzip elasticsearch-analysis-ik-7.16.2.zip \u4fee\u6539 ik \u914d\u7f6e: vim IKAnalyzer.cfg.xml, ( \u53ef\u4e0d\u5728\u8fd9\u91cc\u4fee\u6539\uff0c\u642d\u914d\u4e0d\u540c\u7684\u542f\u52a8\u65b9\u5f0f\uff0c\u914d\u7f6e\u6587\u4ef6\u7684\u914d\u7f6e\u65b9\u5f0f\u4e5f\u4e0d\u540c ) <properties> <comment> IK Analyzer \u6269\u5c55\u914d\u7f6e </comment> <entry key= \"remote_ext_dict\" > http:// <IP> : <PORT> /custom </entry> <entry key= \"remote_ext_stopwords\" > http:// <IP> : <PORT> /stop </entry> </properties> \u955c\u50cf\u6253\u5305 FROM elasticsearch:7.16.2 ADD ik /usr/share/elasticsearch/plugins/ik # \u6253\u5305 docker built . -t elasticsearch_ik:7.16.2 # \u53ef\u63a8\u9001\u5230\u79c1\u6709\u4ed3\u5e93 docker push <> \u670d\u52a1\u542f\u52a8\u65b9\u5f0f 1.\u4f7f\u7528 docker \u8fd0\u884c\u9a8c\u8bc1\uff0c\u5c06 IKAnalyzer.cfg.xml \u6587\u4ef6\u6620\u5c04\u5230\u5bbf\u4e3b\u673a 2.\u4f7f\u7528 k8s \u90e8\u7f72\uff0c\u53ef\u4ee5\u901a\u8fc7 ConfigMap \u7b49\u65b9\u5f0f\u7ba1\u7406 IKAnalyzer.cfg.xml \uff0c\u6216\u8005\u5b58\u653e\u5728\u914d\u7f6e\u670d\u52a1\u5668\u4e5f\u53ef\u4ee5\uff0c\u8fd9\u6837\u5728\u4e0d\u540c\u7684\u73af\u5883\u90e8\u7f72\uff0c\u53d8\u66f4\u8bcd\u5e93\u670d\u52a1\u5730\u5740\u66f4\u65b9\u4fbf \u670d\u52a1\u9a8c\u8bc1 curl --request GET \\ --url http://<ES_IP_PORT>/_analyze \\ --data '{ \"tokenizer\": \"ik_smart\", \"text\": \"\u7aef\u5348\u8282\uff0c\u53c8\u79f0\u7aef\u9633\u8282\u3001\u9f99\u821f\u8282\u3001\u91cd\u4e94\u8282\u3001\u5929\u4e2d\u8282\u7b49\uff0c\u662f\u96c6\u62dc\u795e\u796d\u7956\u3001\u7948\u798f\u8f9f\u90aa\u3001\u6b22\u5e86\u5a31\u4e50\u548c\u996e\u98df\u4e3a\u4e00\u4f53\u7684\u6c11\u4fd7\u5927\u8282\" }'","title":"IK\u5206\u8bcd\u70ed\u66f4\u65b0"},{"location":"ES/IK%E5%88%86%E8%AF%8D/#ik","text":"","title":"IK \u5206\u8bcd\u63d2\u4ef6\u8bcd\u5e93\u70ed\u66f4\u65b0"},{"location":"ES/IK%E5%88%86%E8%AF%8D/#_1","text":"ES \u7248\u672c\uff1a 7.16.2 IK \u5206\u8bcd: 7.16.2 https://github.com/medcl/elasticsearch-analysis-ik","title":"\u80cc\u666f"},{"location":"ES/IK%E5%88%86%E8%AF%8D/#_2","text":"\u8bcd\u5e93\u670d\u52a1\u8981\u6c42\uff08\u81ea\u5b9a\u4e49\u8bcd\u5e93\u548c\u505c\u987f\u8bcd\u5e93\u901a\u8fc7 URL \u533a\u5206\u5373\u53ef\uff09 Head \u63a5\u53e3\uff0c\u8fd4\u56de\u81ea\u5b9a\u4e49\u8bcd\u5e93\u5927\u5c0f Get \u63a5\u53e3\uff0c\u8fd4\u56de\u8bcd\u5e93\u5185\u5bb9 \u5185\u5b58\u8bcd\u5178 demo type Dict struct { Words [] string `json:\"words\"` } func ( dict * Dict ) Content () string { return strings . Join ( dict . Words , \"\\n\" ) } func ( dict * Dict ) Size () int { return len ( dict . Words ) } server demo package main import ( \"net/http\" \"strconv\" \"github.com/labstack/echo/v4\" \"github.com/labstack/echo/v4/middleware\" ) func main () { e := echo . New () e . Use ( middleware . Logger ()) e . Use ( middleware . Recover ()) // Routes e . HEAD ( \"/custom\" , custom_head ) e . GET ( \"/custom\" , custom_words ) e . HEAD ( \"/stop\" , hstop_head ) e . GET ( \"/stop\" , stop_wrods ) e . Logger . Fatal ( e . Start ( \":8080\" )) } func custom_head ( c echo . Context ) error { custom_dict := Dict {} dict_size := strconv . Itoa ( custom_dict . Size ()) c . Response (). Header (). Add ( \"Last-Modified\" , dict_size ) c . Response (). Header (). Add ( \"ETag\" , dict_size ) return c . String ( http . StatusOK , \"\" ) } func custom_words ( c echo . Context ) error { custom_dict := Dict {} body := custom_dict . Content () dict_size := strconv . Itoa ( custom_dict . Size ()) buffer := [] byte ( custom_dict . Content ()) c . Response (). Header (). Add ( \"Last-Modified\" , dict_size ) c . Response (). Header (). Add ( \"ETag\" , dict_size ) c . Response (). Header (). Add ( \"Content-Length\" , strconv . Itoa ( len ( buffer ))) return c . String ( http . StatusOK , body ) } func hstop_head ( c echo . Context ) error { stop_dict := Dict {} dict_size := strconv . Itoa ( stop_dict . Size ()) c . Response (). Header (). Add ( \"Last-Modified\" , dict_size ) c . Response (). Header (). Add ( \"ETag\" , dict_size ) return c . String ( http . StatusOK , \"\" ) } func stop_wrods ( c echo . Context ) error { stop_dict := Dict {} body := stop_dict . Content () dict_size := strconv . Itoa ( stop_dict . Size ()) buffer := [] byte ( stop_dict . Content ()) c . Response (). Header (). Add ( \"Last-Modified\" , dict_size ) c . Response (). Header (). Add ( \"ETag\" , dict_size ) c . Response (). Header (). Add ( \"Content-Length\" , strconv . Itoa ( len ( buffer ))) return c . String ( http . StatusOK , body ) }","title":"\u8bcd\u5e93\u670d\u52a1"},{"location":"ES/IK%E5%88%86%E8%AF%8D/#ik_1","text":"\u4e0b\u8f7d\u8bcd\u5e93\uff0c\u89e3\u538b wget https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.16.2/elasticsearch-analysis-ik-7.16.2.zip # \u89e3\u538b unzip elasticsearch-analysis-ik-7.16.2.zip \u4fee\u6539 ik \u914d\u7f6e: vim IKAnalyzer.cfg.xml, ( \u53ef\u4e0d\u5728\u8fd9\u91cc\u4fee\u6539\uff0c\u642d\u914d\u4e0d\u540c\u7684\u542f\u52a8\u65b9\u5f0f\uff0c\u914d\u7f6e\u6587\u4ef6\u7684\u914d\u7f6e\u65b9\u5f0f\u4e5f\u4e0d\u540c ) <properties> <comment> IK Analyzer \u6269\u5c55\u914d\u7f6e </comment> <entry key= \"remote_ext_dict\" > http:// <IP> : <PORT> /custom </entry> <entry key= \"remote_ext_stopwords\" > http:// <IP> : <PORT> /stop </entry> </properties>","title":"\u4e0b\u8f7d IK \u5206\u8bcd\u63d2\u4ef6\uff0c\u66f4\u6539\u8bcd\u5e93\u914d\u7f6e"},{"location":"ES/IK%E5%88%86%E8%AF%8D/#_3","text":"FROM elasticsearch:7.16.2 ADD ik /usr/share/elasticsearch/plugins/ik # \u6253\u5305 docker built . -t elasticsearch_ik:7.16.2 # \u53ef\u63a8\u9001\u5230\u79c1\u6709\u4ed3\u5e93 docker push <>","title":"\u955c\u50cf\u6253\u5305"},{"location":"ES/IK%E5%88%86%E8%AF%8D/#_4","text":"1.\u4f7f\u7528 docker \u8fd0\u884c\u9a8c\u8bc1\uff0c\u5c06 IKAnalyzer.cfg.xml \u6587\u4ef6\u6620\u5c04\u5230\u5bbf\u4e3b\u673a 2.\u4f7f\u7528 k8s \u90e8\u7f72\uff0c\u53ef\u4ee5\u901a\u8fc7 ConfigMap \u7b49\u65b9\u5f0f\u7ba1\u7406 IKAnalyzer.cfg.xml \uff0c\u6216\u8005\u5b58\u653e\u5728\u914d\u7f6e\u670d\u52a1\u5668\u4e5f\u53ef\u4ee5\uff0c\u8fd9\u6837\u5728\u4e0d\u540c\u7684\u73af\u5883\u90e8\u7f72\uff0c\u53d8\u66f4\u8bcd\u5e93\u670d\u52a1\u5730\u5740\u66f4\u65b9\u4fbf","title":"\u670d\u52a1\u542f\u52a8\u65b9\u5f0f"},{"location":"ES/IK%E5%88%86%E8%AF%8D/#_5","text":"curl --request GET \\ --url http://<ES_IP_PORT>/_analyze \\ --data '{ \"tokenizer\": \"ik_smart\", \"text\": \"\u7aef\u5348\u8282\uff0c\u53c8\u79f0\u7aef\u9633\u8282\u3001\u9f99\u821f\u8282\u3001\u91cd\u4e94\u8282\u3001\u5929\u4e2d\u8282\u7b49\uff0c\u662f\u96c6\u62dc\u795e\u796d\u7956\u3001\u7948\u798f\u8f9f\u90aa\u3001\u6b22\u5e86\u5a31\u4e50\u548c\u996e\u98df\u4e3a\u4e00\u4f53\u7684\u6c11\u4fd7\u5927\u8282\" }'","title":"\u670d\u52a1\u9a8c\u8bc1"},{"location":"Golang/goquery/","tags":["Golang","Goquery"],"text":"Goquery \u5e38\u7528\u4f7f\u7528\u59ff\u52bf \u9009\u62e9\u5668 \u793a\u4f8b \u6ce8\u91ca \u6807\u7b7e\u9009\u62e9\u5668 (\"#myelement\") \u9009\u62e9 id \u6807\u7b7e\u9009\u62e9\u5668 (\"div\") \u9009\u62e9\\ \u6807\u7b7e \u6807\u7b7e\u9009\u62e9\u5668 (\".MyClass\") \u9009\u62e9 class \u6807\u7b7e\u9009\u62e9\u5668 (\"*\") \u9009\u62e9\u6240\u6709\u6807\u7b7e \u6807\u7b7e\u9009\u62e9\u5668 (\"#myelement, div,. MyClass\") \u9009\u62e9\u591a\u4e2a\u6807\u7b7e \u7ea7\u8054\u9009\u62e9\u5668 (\"#main > *\") \u9009\u62e9 id \u7684\u6240\u6709\u5b50\u6807\u7b7e \u7ea7\u8054\u9009\u62e9\u5668 (\"#prev ~ div\") \u5144\u5f1f\u9009\u62e9\u5668\uff0c\u9009\u62e9 div \u7684\u540c\u7ea7\u6807\u7b7e\uff0c\u5171\u6709\u4e00\u4e2a\u7236\u6807\u7b7e id \u57fa\u672c\u8fc7\u6ee4\u9009\u62e9\u5668 (\"tr: first\") \u9009\u62e9\u6240\u6709 tr \u6807\u7b7e\u7684\u9996\u5143\u7d20 \u57fa\u672c\u8fc7\u6ee4\u9009\u62e9\u5668 (\"tr: last\") \u9009\u62e9\u6240\u6709 tr \u6807\u7b7e\u7684\u5c3e\u5143\u7d20 \u57fa\u672c\u8fc7\u6ee4\u9009\u62e9\u5668 (\"tr: even\") \u9009\u62e9 tr \u6807\u7b7e\u4e2d 0, 2, 4...\u5143\u7d20 \u57fa\u672c\u8fc7\u6ee4\u9009\u62e9\u5668 (\"tr: odd\") \u9009\u62e9 tr \u6807\u7b7e\u4e2d 1, 2, 5...\u5143\u7d20 \u57fa\u672c\u8fc7\u6ee4\u9009\u62e9\u5668 (\"Td: EQ (2)\") \u9009\u62e9 TD \u6807\u7b7e\u4e2d\u5e8f\u53f7\u4e3a 2 \u7684\u5143\u7d20 \u57fa\u672c\u8fc7\u6ee4\u9009\u62e9\u5668 (\"Td: TQ (2)\") \u9009\u62e9 TD \u6807\u7b7e\u4e2d\u5e8f\u53f7\u5927\u4e8e 2 \u7684\u5143\u7d20 \u57fa\u672c\u8fc7\u6ee4\u9009\u62e9\u5668 (\"Td: LL (2)\") \u9009\u62e9 TD \u6807\u7b7e\u4e2d\u5e8f\u53f7\u5c0f\u4e8e 2 \u7684\u5143\u7d20 \u57fa\u672c\u8fc7\u6ee4\u9009\u62e9\u5668 (\":header\") \u9009\u62e9 header \u57fa\u672c\u8fc7\u6ee4\u9009\u62e9\u5668 (\"div:animated\") \u9009\u62e9`` \u5185\u5bb9\u8fc7\u6ee4\u9009\u62e9\u5668 (\"div: contains ('john')\") \u9009\u62e9\u5305\u542b\u6587\u672c'john'\u7684 div \u6807\u7b7e \u5185\u5bb9\u8fc7\u6ee4\u9009\u62e9\u5668 (\"Td: empty\") \u9009\u62e9\u6240\u6709\u7a7a\u7684 TD \u6807\u7b7e\uff0c\u6216\u8005\u4e0d\u5305\u542b text \u5185\u5bb9\u8fc7\u6ee4\u9009\u62e9\u5668 (\"div: has (P)\") \u9009\u62e9\u5305\u542b p \u6807\u7b7e\u7684 div \u6807\u7b7e \u5185\u5bb9\u8fc7\u6ee4\u9009\u62e9\u5668 (\"Td: parent\") \u9009\u62e9 TD \u6807\u7b7e\u7684\u5b50\u6807\u7b7e \u89c6\u89c9\u8fc7\u6ee4\u9009\u62e9\u5668 (\"div: hidden\") \u9009\u62e9\u6240\u6709\u9690\u85cf\u6807\u7b7e \u89c6\u89c9\u8fc7\u6ee4\u9009\u62e9\u5668 (\"div: visible\") \u9009\u62e9\u6240\u6709\u53ef\u89c6\u6807\u7b7e \u5b50\u5143\u7d20\u8fc7\u6ee4\u9009\u62e9\u5668 (\"ul li:nth-child(2)\") \u5b50\u5143\u7d20\u8fc7\u6ee4\u9009\u62e9\u5668 (\"ul li:nth-child(odd)\") \u5b50\u5143\u7d20\u8fc7\u6ee4\u9009\u62e9\u5668 (\"ul li:nth-child(3n + 1)\") \u5b50\u5143\u7d20\u8fc7\u6ee4\u9009\u62e9\u5668 (\"div span: first child\") \u9009\u62e9\u6240\u6709 div \u4e2d\uff0c span \u7684\u7b2c\u4e00\u4e2a\u5b50\u8282\u70b9 \u5b50\u5143\u7d20\u8fc7\u6ee4\u9009\u62e9\u5668 (\"div span: last child\") \u9009\u62e9\u6240\u6709 div \u4e2d\uff0c span \u7b2c\u4e00\u4e2a\u5c3e\u8282\u70b9 \u5b50\u5143\u7d20\u8fc7\u6ee4\u9009\u62e9\u5668 (\"div span: only child\") \u9009\u62e9\u6240\u6709 div \u4e2d\uff0c span \u4e2d\u552f\u4e00\u7684\u4e00\u4e2a\u8282\u70b9","title":"Goquery\u5b9e\u7528\u59ff\u52bf"},{"location":"Golang/goquery/#goquery","text":"\u9009\u62e9\u5668 \u793a\u4f8b \u6ce8\u91ca \u6807\u7b7e\u9009\u62e9\u5668 (\"#myelement\") \u9009\u62e9 id \u6807\u7b7e\u9009\u62e9\u5668 (\"div\") \u9009\u62e9\\ \u6807\u7b7e \u6807\u7b7e\u9009\u62e9\u5668 (\".MyClass\") \u9009\u62e9 class \u6807\u7b7e\u9009\u62e9\u5668 (\"*\") \u9009\u62e9\u6240\u6709\u6807\u7b7e \u6807\u7b7e\u9009\u62e9\u5668 (\"#myelement, div,. MyClass\") \u9009\u62e9\u591a\u4e2a\u6807\u7b7e \u7ea7\u8054\u9009\u62e9\u5668 (\"#main > *\") \u9009\u62e9 id \u7684\u6240\u6709\u5b50\u6807\u7b7e \u7ea7\u8054\u9009\u62e9\u5668 (\"#prev ~ div\") \u5144\u5f1f\u9009\u62e9\u5668\uff0c\u9009\u62e9 div \u7684\u540c\u7ea7\u6807\u7b7e\uff0c\u5171\u6709\u4e00\u4e2a\u7236\u6807\u7b7e id \u57fa\u672c\u8fc7\u6ee4\u9009\u62e9\u5668 (\"tr: first\") \u9009\u62e9\u6240\u6709 tr \u6807\u7b7e\u7684\u9996\u5143\u7d20 \u57fa\u672c\u8fc7\u6ee4\u9009\u62e9\u5668 (\"tr: last\") \u9009\u62e9\u6240\u6709 tr \u6807\u7b7e\u7684\u5c3e\u5143\u7d20 \u57fa\u672c\u8fc7\u6ee4\u9009\u62e9\u5668 (\"tr: even\") \u9009\u62e9 tr \u6807\u7b7e\u4e2d 0, 2, 4...\u5143\u7d20 \u57fa\u672c\u8fc7\u6ee4\u9009\u62e9\u5668 (\"tr: odd\") \u9009\u62e9 tr \u6807\u7b7e\u4e2d 1, 2, 5...\u5143\u7d20 \u57fa\u672c\u8fc7\u6ee4\u9009\u62e9\u5668 (\"Td: EQ (2)\") \u9009\u62e9 TD \u6807\u7b7e\u4e2d\u5e8f\u53f7\u4e3a 2 \u7684\u5143\u7d20 \u57fa\u672c\u8fc7\u6ee4\u9009\u62e9\u5668 (\"Td: TQ (2)\") \u9009\u62e9 TD \u6807\u7b7e\u4e2d\u5e8f\u53f7\u5927\u4e8e 2 \u7684\u5143\u7d20 \u57fa\u672c\u8fc7\u6ee4\u9009\u62e9\u5668 (\"Td: LL (2)\") \u9009\u62e9 TD \u6807\u7b7e\u4e2d\u5e8f\u53f7\u5c0f\u4e8e 2 \u7684\u5143\u7d20 \u57fa\u672c\u8fc7\u6ee4\u9009\u62e9\u5668 (\":header\") \u9009\u62e9 header \u57fa\u672c\u8fc7\u6ee4\u9009\u62e9\u5668 (\"div:animated\") \u9009\u62e9`` \u5185\u5bb9\u8fc7\u6ee4\u9009\u62e9\u5668 (\"div: contains ('john')\") \u9009\u62e9\u5305\u542b\u6587\u672c'john'\u7684 div \u6807\u7b7e \u5185\u5bb9\u8fc7\u6ee4\u9009\u62e9\u5668 (\"Td: empty\") \u9009\u62e9\u6240\u6709\u7a7a\u7684 TD \u6807\u7b7e\uff0c\u6216\u8005\u4e0d\u5305\u542b text \u5185\u5bb9\u8fc7\u6ee4\u9009\u62e9\u5668 (\"div: has (P)\") \u9009\u62e9\u5305\u542b p \u6807\u7b7e\u7684 div \u6807\u7b7e \u5185\u5bb9\u8fc7\u6ee4\u9009\u62e9\u5668 (\"Td: parent\") \u9009\u62e9 TD \u6807\u7b7e\u7684\u5b50\u6807\u7b7e \u89c6\u89c9\u8fc7\u6ee4\u9009\u62e9\u5668 (\"div: hidden\") \u9009\u62e9\u6240\u6709\u9690\u85cf\u6807\u7b7e \u89c6\u89c9\u8fc7\u6ee4\u9009\u62e9\u5668 (\"div: visible\") \u9009\u62e9\u6240\u6709\u53ef\u89c6\u6807\u7b7e \u5b50\u5143\u7d20\u8fc7\u6ee4\u9009\u62e9\u5668 (\"ul li:nth-child(2)\") \u5b50\u5143\u7d20\u8fc7\u6ee4\u9009\u62e9\u5668 (\"ul li:nth-child(odd)\") \u5b50\u5143\u7d20\u8fc7\u6ee4\u9009\u62e9\u5668 (\"ul li:nth-child(3n + 1)\") \u5b50\u5143\u7d20\u8fc7\u6ee4\u9009\u62e9\u5668 (\"div span: first child\") \u9009\u62e9\u6240\u6709 div \u4e2d\uff0c span \u7684\u7b2c\u4e00\u4e2a\u5b50\u8282\u70b9 \u5b50\u5143\u7d20\u8fc7\u6ee4\u9009\u62e9\u5668 (\"div span: last child\") \u9009\u62e9\u6240\u6709 div \u4e2d\uff0c span \u7b2c\u4e00\u4e2a\u5c3e\u8282\u70b9 \u5b50\u5143\u7d20\u8fc7\u6ee4\u9009\u62e9\u5668 (\"div span: only child\") \u9009\u62e9\u6240\u6709 div \u4e2d\uff0c span \u4e2d\u552f\u4e00\u7684\u4e00\u4e2a\u8282\u70b9","title":"Goquery \u5e38\u7528\u4f7f\u7528\u59ff\u52bf"},{"location":"K8S/cilium/","tags":["K8S","Kubernetes","Cilium"],"text":"Cilium \u5b89\u88c5 doc: https://docs.cilium.io/en/stable/gettingstarted/http/ \u542f\u52a8 Kubernetes \u96c6\u7fa4\uff0c\u8bbe\u7f6e cni \u4e3a cilium zsh \u279c minikube start --network-plugin = cni --cni = cilium Cilium CLI \u5b89\u88c5 zsh \u279c wget https://github.com/cilium/cilium-cli/releases/download/v0.11.11/cilium-darwin-arm64.tar.gz sudo mv cilium /usr/local/bin \u5b89\u88c5 Cilium zsh \u279c cilium install \ud83d\udd2e Auto-detected Kubernetes kind: minikube \u2728 Running \"minikube\" validation checks \u2705 Detected minikube version \"1.26.0\" \u2139\ufe0f Using Cilium version 1 .11.6 \ud83d\udd2e Auto-detected cluster name: minikube \ud83d\udd2e Auto-detected datapath mode: tunnel \u2139\ufe0f helm template --namespace kube-system cilium cilium/cilium --version 1 .11.6 --set cluster.id = 0 ,cluster.name = minikube,encryption.nodeEncryption = false,kubeProxyReplacement = disabled,operator.replicas = 1 ,serviceAccounts.cilium.name = cilium,serviceAccounts.operator.name = cilium-operator,tunnel = vxlan \u2139\ufe0f Storing helm values file in kube-system/cilium-cli-helm-values Secret \ud83d\udd11 Created CA in secret cilium-ca \ud83d\udd11 Generating certificates for Hubble... \ud83d\ude80 Creating Service accounts... \ud83d\ude80 Creating Cluster roles... \ud83d\ude80 Creating ConfigMap for Cilium version 1 .11.6... \ud83d\ude80 Creating Agent DaemonSet... level = warning msg = \"spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[1].matchExpressions[0].key: beta.kubernetes.io/os is deprecated since v1.14; use \\\"kubernetes.io/os\\\" instead\" subsys = klog \ud83d\ude80 Creating Operator Deployment... \u231b Waiting for Cilium to be installed and ready... \u2705 Cilium was successfully installed! Run 'cilium status' to view installation health zsh \u279c cilium status /\u00af\u00af \\ /\u00af\u00af \\_ _/\u00af\u00af \\ Cilium: OK \\_ _/\u00af\u00af \\_ _/ Operator: OK /\u00af\u00af \\_ _/\u00af\u00af \\ Hubble: disabled \\_ _/\u00af\u00af \\_ _/ ClusterMesh: disabled \\_ _/ Deployment cilium-operator Desired: 1 , Ready: 1 /1, Available: 1 /1 DaemonSet cilium Desired: 1 , Ready: 1 /1, Available: 1 /1 Containers: cilium Running: 1 cilium-operator Running: 1 Cluster Pods: 1 /1 managed by Cilium Image versions cilium quay.io/cilium/cilium:v1.11.6@sha256:f7f93c26739b6641a3fa3d76b1e1605b15989f25d06625260099e01c8243f54c: 1 cilium-operator quay.io/cilium/operator-generic:v1.11.6@sha256:9f6063c7bcaede801a39315ec7c166309f6a6783e98665f6693939cf1701bc17: 1 hubble \u5b89\u88c5 zsh \u279c cilium hubble enable --ui zsh \u279c wget https://github.com/cilium/hubble/releases/download/v0.10.0/hubble-darwin-arm64.tar.gz zsh \u279c tar xvf hubble-darwin-arm64.tar.gz zsh \u279c sudo mv hubble /usr/local/bin zsh \u279c cilium hubble port-forward & zsh \u279c hubble status zsh \u279c hubble observe # open web UI zsh \u279c cilium hubble ui","title":"Cilium \u5b89\u88c5"},{"location":"K8S/cilium/#cilium","text":"doc: https://docs.cilium.io/en/stable/gettingstarted/http/","title":"Cilium \u5b89\u88c5"},{"location":"K8S/cilium/#kubernetes-cni-cilium","text":"zsh \u279c minikube start --network-plugin = cni --cni = cilium","title":"\u542f\u52a8 Kubernetes \u96c6\u7fa4\uff0c\u8bbe\u7f6e cni \u4e3a cilium"},{"location":"K8S/cilium/#cilium-cli","text":"zsh \u279c wget https://github.com/cilium/cilium-cli/releases/download/v0.11.11/cilium-darwin-arm64.tar.gz sudo mv cilium /usr/local/bin","title":"Cilium CLI \u5b89\u88c5"},{"location":"K8S/cilium/#cilium_1","text":"zsh \u279c cilium install \ud83d\udd2e Auto-detected Kubernetes kind: minikube \u2728 Running \"minikube\" validation checks \u2705 Detected minikube version \"1.26.0\" \u2139\ufe0f Using Cilium version 1 .11.6 \ud83d\udd2e Auto-detected cluster name: minikube \ud83d\udd2e Auto-detected datapath mode: tunnel \u2139\ufe0f helm template --namespace kube-system cilium cilium/cilium --version 1 .11.6 --set cluster.id = 0 ,cluster.name = minikube,encryption.nodeEncryption = false,kubeProxyReplacement = disabled,operator.replicas = 1 ,serviceAccounts.cilium.name = cilium,serviceAccounts.operator.name = cilium-operator,tunnel = vxlan \u2139\ufe0f Storing helm values file in kube-system/cilium-cli-helm-values Secret \ud83d\udd11 Created CA in secret cilium-ca \ud83d\udd11 Generating certificates for Hubble... \ud83d\ude80 Creating Service accounts... \ud83d\ude80 Creating Cluster roles... \ud83d\ude80 Creating ConfigMap for Cilium version 1 .11.6... \ud83d\ude80 Creating Agent DaemonSet... level = warning msg = \"spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[1].matchExpressions[0].key: beta.kubernetes.io/os is deprecated since v1.14; use \\\"kubernetes.io/os\\\" instead\" subsys = klog \ud83d\ude80 Creating Operator Deployment... \u231b Waiting for Cilium to be installed and ready... \u2705 Cilium was successfully installed! Run 'cilium status' to view installation health zsh \u279c cilium status /\u00af\u00af \\ /\u00af\u00af \\_ _/\u00af\u00af \\ Cilium: OK \\_ _/\u00af\u00af \\_ _/ Operator: OK /\u00af\u00af \\_ _/\u00af\u00af \\ Hubble: disabled \\_ _/\u00af\u00af \\_ _/ ClusterMesh: disabled \\_ _/ Deployment cilium-operator Desired: 1 , Ready: 1 /1, Available: 1 /1 DaemonSet cilium Desired: 1 , Ready: 1 /1, Available: 1 /1 Containers: cilium Running: 1 cilium-operator Running: 1 Cluster Pods: 1 /1 managed by Cilium Image versions cilium quay.io/cilium/cilium:v1.11.6@sha256:f7f93c26739b6641a3fa3d76b1e1605b15989f25d06625260099e01c8243f54c: 1 cilium-operator quay.io/cilium/operator-generic:v1.11.6@sha256:9f6063c7bcaede801a39315ec7c166309f6a6783e98665f6693939cf1701bc17: 1","title":"\u5b89\u88c5 Cilium"},{"location":"K8S/cilium/#hubble","text":"zsh \u279c cilium hubble enable --ui zsh \u279c wget https://github.com/cilium/hubble/releases/download/v0.10.0/hubble-darwin-arm64.tar.gz zsh \u279c tar xvf hubble-darwin-arm64.tar.gz zsh \u279c sudo mv hubble /usr/local/bin zsh \u279c cilium hubble port-forward & zsh \u279c hubble status zsh \u279c hubble observe # open web UI zsh \u279c cilium hubble ui","title":"hubble \u5b89\u88c5"},{"location":"K8S/install/","tags":["K8S","Kubernetes"],"text":"Kubernetes \u5b89\u88c5\uff08On Apple M1\uff09 doc: https://kubernetes.io/zh-cn/docs/home/ minikube \u5b89\u88c5 zsh \u279c curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-darwin-arm64 zsh \u279c sudo install minikube-darwin-arm64 /usr/local/bin/minikube kubectl \u5b89\u88c5 zsh \u279c brew install kubectl Kubernetes \u96c6\u7fa4\u542f\u52a8 # \u96c6\u7fa4\u542f\u52a8 zsh \u279c minikube start # \u96c6\u7fa4\u505c\u6b62 zsh \u279c minikube stop # Kubernetes dashboard zsh \u279c minikube dashboard # Upgrade your cluster zsh \u279c minikube start --kubernetes-version = latest # \u96c6\u7fa4\u6682\u505c zsh \u279c minikube pause # \u96c6\u7fa4\u6062\u590d zsh \u279c minikube unpause # delete cluster zsh \u279c minikube delete # Delete all local clusters and profiles zsh \u279c minikube delete --all prod deployment\uff08centos 7 & kubeadm\uff09 \u7cfb\u7edf\u521d\u59cb\u5316 \u505c\u6b62\u9632\u706b\u5899\uff0cIptables \u8bbe\u7f6e\u4e3a\u7a7a zsh \u279c systemctl stop firewalld && systemctl disable firewalld zsh \u279c yum -y install iptables-services && systemctl start iptables && systemctl enable iptables && iptables -F && service iptables save \u5173\u95ed\u4e0d\u5fc5\u8981\u7684\u670d\u52a1 zsh \u279c swapoff -a && sed -i '/ swap / s/^\\(.*\\)$/#\\1/g' /etc/fstab zsh \u279c setenforce 0 && sed -i 's/^SELINUX=.*/SELINUX=disabled/' /etc/selinux/config zsh \u279c systemctl stop postfix && systemctl disable postfix \u5173\u95ed NUMA zsh \u279c cp /etc/default/grub { ,.bak } zsh \u279c vim /etc/default/grub # \u5728 GRUB_CMDLINE_LINUX \u4e00\u884c\u6dfb\u52a0 `numa=off` \u53c2\u6570\uff0c\u5982\u4e0b\u6240\u793a: diff /etc/default/grub.bak /etc/default/grub 6c6 < GRUB_CMDLINE_LINUX = \"crashkernel=auto rd.lvm.lv=centos/root rhgb quiet\" --- > GRUB_CMDLINE_LINUX = \"crashkernel=auto rd.lvm.lv=centos/root rhgb quiet numa=off\" cp /boot/grub2/grub.cfg { ,.bak } grub2-mkconfig -o /boot/grub2/grub.cfg /etc/sysctl.d/kubernetes.conf net.bridge.bridge-nf-call-iptables=1 net.bridge.bridge-nf-call-ip6tables=1 net.ipv4.ip_forward=1 net.ipv4.tcp_tw_recycle=0 vm.swappiness=0 # \u7981\u6b62\u4f7f\u7528 swap \u7a7a\u95f4\uff0c\u53ea\u6709\u5f53\u7cfb\u7edf OOM \u65f6\u624d\u5141\u8bb8\u4f7f\u7528\u5b83 vm.overcommit_memory=1 # \u4e0d\u68c0\u67e5\u7269\u7406\u5185\u5b58\u662f\u5426\u591f\u7528 vm.panic_on_oom=0 # \u5f00\u542f OOM fs.inotify.max_user_instances=8192 fs.inotify.max_user_watches=1048576 fs.file-max=52706963 fs.nr_open=52706963 net.ipv6.conf.all.disable_ipv6=1 net.netfilter.nf_conntrack_max=2310720 zsh \u279c sysctl -p /etc/sysctl.d/kubernetes.conf \u65f6\u533a\u8bbe\u7f6e zsh \u279c timedatectl set-timezone Asia/Shanghai zsh \u279c timedatectl set-local-rtc 0 zsh \u279c systemctl restart rsyslog zsh \u279c systemctl restart crond \u8bbe\u7f6e rsyslogd \u548c systemd journald zsh \u279c mkdir /var/log/journal # \u6301\u4e45\u5316\u4fdd\u5b58\u65e5\u5fd7\u7684\u76ee\u5f55 zsh \u279c mkdir /etc/systemd/journald.conf.d zsh \u279c cat > /etc/systemd/journald.conf.d/99-prophet.conf <<EOF [Journal] # \u6301\u4e45\u5316\u4fdd\u5b58\u5230\u78c1\u76d8 Storage=persistent # \u538b\u7f29\u5386\u53f2\u65e5\u5fd7 Compress=yes SyncIntervalSec=5m RateLimitInterval=30s RateLimitBurst=1000 # \u6700\u5927\u5360\u7528\u7a7a\u95f4 10G SystemMaxUse=10G # \u5355\u65e5\u5fd7\u6587\u4ef6\u6700\u5927 200M SystemMaxFileSize=200M # \u65e5\u5fd7\u4fdd\u5b58\u65f6\u95f4 2 \u5468 MaxRetentionSec=2week # \u4e0d\u5c06\u65e5\u5fd7\u8f6c\u53d1\u5230 syslog ForwardToSyslog=no EOF zsh \u279c systemctl restart systemd-journald \u5185\u6838\u5347\u7ea7 4.44+ https://lrtz-v.github.io/linux/centos_kernal_upgrade/ \u4f7f\u7528 Kubeadm \u90e8\u7f72 ipvs \u8bbe\u7f6e zsh \u279c modprobe br_netfilter zsh \u279c cat > /etc/sysconfig/modules/ipvs.modules <<EOF #!/bin/bash modprobe -- ip_vs modprobe -- ip_vs_rr modprobe -- ip_vs_wrr modprobe -- ip_vs_sh modprobe -- nf_conntrack_ipv4 EOF zsh \u279c chmod 755 /etc/sysconfig/modules/ipvs.modules && bash /etc/sysconfig/modules/ipvs.modules && lsmod | grep -e ip_vs -e nf_conntrack_ipv4 docker zsh \u279c yum install -y yum-utils device-mapper-persistent-data lvm2 zsh \u279c yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo zsh \u279c yum update -y && yum install -y docker-ce ## \u521b\u5efa /etc/docker \u76ee\u5f55 zsh \u279c mkdir /etc/docker zsh \u279c cat > /etc/docker/daemon.json <<EOF { \"exec-opts\": [\"native.cgroupdriver=systemd\"], \"log-driver\": \"json-file\", \"log-opts\": { \"max-size\": \"100m\" } } EOF zsh \u279c mkdir -p /etc/systemd/system/docker.service.d zsh \u279c systemctl daemon-reload && systemctl restart docker && systemctl enable docker Kubeadm zsh \u279c cat <<EOF > /etc/yum.repos.d/kubernetes.repo [kubernetes] name=Kubernetes baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64 enabled=1 gpgcheck=0 repo_gpgcheck=0 gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg EOF zsh \u279c yum -y install kubeadm-1.22 kubectl-1.22 kubelet-1.22 zsh \u279c systemctl enable kubelet.service master \u8282\u70b9\u521d\u59cb\u5316 zsh \u279c kubeadm config print init-defaults > kubeadm-config.yaml localAPIEndpoint: advertiseAddress: 192 .168.66.10 kubernetesVersion: v1.15.1 networking: podSubnet: \"10.244.0.0/16\" serviceSubnet: 10 .96.0.0/12 --- apiVersion: kubeproxy.config.k8s.io/v1alpha1 kind: KubeProxyConfiguration featureGates: SupportIPVSProxyMode: true mode: ipvs zsh \u279c kubeadm init --config = kubeadm-config.yaml --experimental-upload-certs | tee kubeadm-init.log \u8282\u70b9\u52a0\u5165 zsh \u279c kubeadm join <control-plane-host>:<control-plane-port> --token <token> --discovery-token-ca-cert-hash sha256:<hash> \u7f51\u7edc\u901a\u4fe1 zsh \u279c kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml","title":"\u5b89\u88c5"},{"location":"K8S/install/#kubernetes-on-apple-m1","text":"doc: https://kubernetes.io/zh-cn/docs/home/","title":"Kubernetes \u5b89\u88c5\uff08On Apple M1\uff09"},{"location":"K8S/install/#minikube","text":"zsh \u279c curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-darwin-arm64 zsh \u279c sudo install minikube-darwin-arm64 /usr/local/bin/minikube","title":"minikube \u5b89\u88c5"},{"location":"K8S/install/#kubectl","text":"zsh \u279c brew install kubectl","title":"kubectl \u5b89\u88c5"},{"location":"K8S/install/#kubernetes","text":"# \u96c6\u7fa4\u542f\u52a8 zsh \u279c minikube start # \u96c6\u7fa4\u505c\u6b62 zsh \u279c minikube stop # Kubernetes dashboard zsh \u279c minikube dashboard # Upgrade your cluster zsh \u279c minikube start --kubernetes-version = latest # \u96c6\u7fa4\u6682\u505c zsh \u279c minikube pause # \u96c6\u7fa4\u6062\u590d zsh \u279c minikube unpause # delete cluster zsh \u279c minikube delete # Delete all local clusters and profiles zsh \u279c minikube delete --all","title":"Kubernetes \u96c6\u7fa4\u542f\u52a8"},{"location":"K8S/install/#prod-deploymentcentos-7-kubeadm","text":"","title":"prod deployment\uff08centos 7 &amp; kubeadm\uff09"},{"location":"K8S/install/#_1","text":"\u505c\u6b62\u9632\u706b\u5899\uff0cIptables \u8bbe\u7f6e\u4e3a\u7a7a zsh \u279c systemctl stop firewalld && systemctl disable firewalld zsh \u279c yum -y install iptables-services && systemctl start iptables && systemctl enable iptables && iptables -F && service iptables save \u5173\u95ed\u4e0d\u5fc5\u8981\u7684\u670d\u52a1 zsh \u279c swapoff -a && sed -i '/ swap / s/^\\(.*\\)$/#\\1/g' /etc/fstab zsh \u279c setenforce 0 && sed -i 's/^SELINUX=.*/SELINUX=disabled/' /etc/selinux/config zsh \u279c systemctl stop postfix && systemctl disable postfix \u5173\u95ed NUMA zsh \u279c cp /etc/default/grub { ,.bak } zsh \u279c vim /etc/default/grub # \u5728 GRUB_CMDLINE_LINUX \u4e00\u884c\u6dfb\u52a0 `numa=off` \u53c2\u6570\uff0c\u5982\u4e0b\u6240\u793a: diff /etc/default/grub.bak /etc/default/grub 6c6 < GRUB_CMDLINE_LINUX = \"crashkernel=auto rd.lvm.lv=centos/root rhgb quiet\" --- > GRUB_CMDLINE_LINUX = \"crashkernel=auto rd.lvm.lv=centos/root rhgb quiet numa=off\" cp /boot/grub2/grub.cfg { ,.bak } grub2-mkconfig -o /boot/grub2/grub.cfg /etc/sysctl.d/kubernetes.conf net.bridge.bridge-nf-call-iptables=1 net.bridge.bridge-nf-call-ip6tables=1 net.ipv4.ip_forward=1 net.ipv4.tcp_tw_recycle=0 vm.swappiness=0 # \u7981\u6b62\u4f7f\u7528 swap \u7a7a\u95f4\uff0c\u53ea\u6709\u5f53\u7cfb\u7edf OOM \u65f6\u624d\u5141\u8bb8\u4f7f\u7528\u5b83 vm.overcommit_memory=1 # \u4e0d\u68c0\u67e5\u7269\u7406\u5185\u5b58\u662f\u5426\u591f\u7528 vm.panic_on_oom=0 # \u5f00\u542f OOM fs.inotify.max_user_instances=8192 fs.inotify.max_user_watches=1048576 fs.file-max=52706963 fs.nr_open=52706963 net.ipv6.conf.all.disable_ipv6=1 net.netfilter.nf_conntrack_max=2310720 zsh \u279c sysctl -p /etc/sysctl.d/kubernetes.conf \u65f6\u533a\u8bbe\u7f6e zsh \u279c timedatectl set-timezone Asia/Shanghai zsh \u279c timedatectl set-local-rtc 0 zsh \u279c systemctl restart rsyslog zsh \u279c systemctl restart crond \u8bbe\u7f6e rsyslogd \u548c systemd journald zsh \u279c mkdir /var/log/journal # \u6301\u4e45\u5316\u4fdd\u5b58\u65e5\u5fd7\u7684\u76ee\u5f55 zsh \u279c mkdir /etc/systemd/journald.conf.d zsh \u279c cat > /etc/systemd/journald.conf.d/99-prophet.conf <<EOF [Journal] # \u6301\u4e45\u5316\u4fdd\u5b58\u5230\u78c1\u76d8 Storage=persistent # \u538b\u7f29\u5386\u53f2\u65e5\u5fd7 Compress=yes SyncIntervalSec=5m RateLimitInterval=30s RateLimitBurst=1000 # \u6700\u5927\u5360\u7528\u7a7a\u95f4 10G SystemMaxUse=10G # \u5355\u65e5\u5fd7\u6587\u4ef6\u6700\u5927 200M SystemMaxFileSize=200M # \u65e5\u5fd7\u4fdd\u5b58\u65f6\u95f4 2 \u5468 MaxRetentionSec=2week # \u4e0d\u5c06\u65e5\u5fd7\u8f6c\u53d1\u5230 syslog ForwardToSyslog=no EOF zsh \u279c systemctl restart systemd-journald \u5185\u6838\u5347\u7ea7 4.44+ https://lrtz-v.github.io/linux/centos_kernal_upgrade/","title":"\u7cfb\u7edf\u521d\u59cb\u5316"},{"location":"K8S/install/#kubeadm","text":"ipvs \u8bbe\u7f6e zsh \u279c modprobe br_netfilter zsh \u279c cat > /etc/sysconfig/modules/ipvs.modules <<EOF #!/bin/bash modprobe -- ip_vs modprobe -- ip_vs_rr modprobe -- ip_vs_wrr modprobe -- ip_vs_sh modprobe -- nf_conntrack_ipv4 EOF zsh \u279c chmod 755 /etc/sysconfig/modules/ipvs.modules && bash /etc/sysconfig/modules/ipvs.modules && lsmod | grep -e ip_vs -e nf_conntrack_ipv4 docker zsh \u279c yum install -y yum-utils device-mapper-persistent-data lvm2 zsh \u279c yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo zsh \u279c yum update -y && yum install -y docker-ce ## \u521b\u5efa /etc/docker \u76ee\u5f55 zsh \u279c mkdir /etc/docker zsh \u279c cat > /etc/docker/daemon.json <<EOF { \"exec-opts\": [\"native.cgroupdriver=systemd\"], \"log-driver\": \"json-file\", \"log-opts\": { \"max-size\": \"100m\" } } EOF zsh \u279c mkdir -p /etc/systemd/system/docker.service.d zsh \u279c systemctl daemon-reload && systemctl restart docker && systemctl enable docker Kubeadm zsh \u279c cat <<EOF > /etc/yum.repos.d/kubernetes.repo [kubernetes] name=Kubernetes baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64 enabled=1 gpgcheck=0 repo_gpgcheck=0 gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg EOF zsh \u279c yum -y install kubeadm-1.22 kubectl-1.22 kubelet-1.22 zsh \u279c systemctl enable kubelet.service master \u8282\u70b9\u521d\u59cb\u5316 zsh \u279c kubeadm config print init-defaults > kubeadm-config.yaml localAPIEndpoint: advertiseAddress: 192 .168.66.10 kubernetesVersion: v1.15.1 networking: podSubnet: \"10.244.0.0/16\" serviceSubnet: 10 .96.0.0/12 --- apiVersion: kubeproxy.config.k8s.io/v1alpha1 kind: KubeProxyConfiguration featureGates: SupportIPVSProxyMode: true mode: ipvs zsh \u279c kubeadm init --config = kubeadm-config.yaml --experimental-upload-certs | tee kubeadm-init.log \u8282\u70b9\u52a0\u5165 zsh \u279c kubeadm join <control-plane-host>:<control-plane-port> --token <token> --discovery-token-ca-cert-hash sha256:<hash> \u7f51\u7edc\u901a\u4fe1 zsh \u279c kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml","title":"\u4f7f\u7528 Kubeadm \u90e8\u7f72"},{"location":"K8S/resource/","tags":["K8S","Kubernetes","Resource"],"text":"Deployment \u4e3a Pod \u548c ReplicaSet \u63d0\u4f9b\u58f0\u660e\u5f0f\u7684\u66f4\u65b0\u80fd\u529b \u521b\u5efa zsh \u279c kubectl apply -f https://k8s.io/examples/controllers/nginx-deployment.yaml \u67e5\u8be2 # \u68c0\u67e5 Deployment \u662f\u5426\u5df2\u521b\u5efa zsh \u279c kubectl get deployments # \u67e5\u770b Deployment \u4e0a\u7ebf\u72b6\u6001 zsh \u279c kubectl rollout status deployment/nginx-deployment # \u67e5\u770b Deployment \u521b\u5efa\u7684 ReplicaSet zsh \u279c kubectl get rs # \u67e5\u770b Deployment \u521b\u5efa\u7684 pod zsh \u279c kubectl get pods --show-labels \u66f4\u65b0 # \u66f4\u65b0\u955c\u50cf zsh \u279c kubectl set image deployment.v1.apps/nginx-deployment nginx = nginx:1.16.1 # OR: kubectl set image deployment/nginx-deployment nginx=nginx:1.16.1 # OR: kubectl edit deployment/nginx-deployment # \u67e5\u770b Deployment \u66f4\u65b0\u8fc7\u7a0b zsh \u279c kubectl describe deployments \u66f4\u65b0\u7b56\u7565 .spec.strategy.type RollingUpdate \uff08default\uff09 \u6307\u5b9a maxUnavailable \u548c maxSurge \u6765\u63a7\u5236\u6eda\u52a8\u66f4\u65b0 \u8fc7\u7a0b .spec.strategy.rollingUpdate.maxUnavailable \u66f4\u65b0\u8fc7\u7a0b\u4e2d\u4e0d\u53ef\u7528\u7684 Pod \u7684\u4e2a\u6570\u4e0a\u9650 .spec.strategy.rollingUpdate.maxSurge \u53ef\u4ee5\u521b\u5efa\u7684\u8d85\u51fa\u671f\u671b Pod \u4e2a\u6570\u7684 Pod \u6570\u91cf Recreate \u5728\u521b\u5efa\u65b0 Pods \u4e4b\u524d\uff0c\u6240\u6709\u73b0\u6709\u7684 Pods \u4f1a\u88ab\u6740\u6b7b \u56de\u6eda # \u66f4\u65b0\u64cd\u4f5c&\u7248\u672c\u8bb0\u5f55 zsh \u279c kubectl set image deployment/nginx-deployment nginx = nginx:1.161 --record = true # \u68c0\u67e5\u64cd\u4f5c\u7248\u672c zsh \u279c kubectl rollout history deployment/nginx-deployment # \u68c0\u67e5\u7248\u672c\u8be6\u7ec6\u4fe1\u606f zsh \u279c kubectl rollout history deployment/nginx-deployment --revision = 2 # \u56de\u6eda\u5230\u4e4b\u524d\u7684\u4fee\u8ba2\u7248\u672c zsh \u279c kubectl rollout undo deployment/nginx-deployment zsh \u279c OR: kubectl rollout undo deployment/nginx-deployment --to-revision = 2 \u7f29/\u6269\u5bb9 # \u6307\u5b9areplica\u6570\u91cf zsh \u279c kubectl scale deployment/nginx-deployment --replicas = 5 # \u81ea\u52a8\u7f29/\u6269\u5bb9 zsh \u279c kubectl autoscale deployment/nginx-deployment --min = 10 --max = 15 --cpu-percent = 80 # \u6bd4\u4f8b\u7f29\u653e # RollingUpdate \u7684 Deployment \u652f\u6301\u540c\u65f6\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u7684\u591a\u4e2a\u7248\u672c\u3002 \u5f53\u81ea\u52a8\u7f29\u653e\u5668\u7f29\u653e\u5904\u4e8e\u4e0a\u7ebf\u8fdb\u7a0b\uff08\u4ecd\u5728\u8fdb\u884c\u4e2d\u6216\u6682\u505c\uff09\u4e2d\u7684 RollingUpdate Deployment \u65f6\uff0c # Deployment \u63a7\u5236\u5668\u4f1a\u5e73\u8861\u73b0\u6709\u7684\u6d3b\u8dc3\u72b6\u6001\u7684 ReplicaSets\uff08\u542b Pods \u7684 ReplicaSets\uff09\u4e2d\u7684\u989d\u5916\u526f\u672c\uff0c \u4ee5\u964d\u4f4e\u98ce\u9669 zsh \u279c kubectl set image deployment/nginx-deployment nginx = nginx:sometag zsh \u279c kubectl get rs \u6682\u505c\u3001\u6062\u590d Deployment \u7684\u4e0a\u7ebf\u8fc7\u7a0b # \u6682\u505c Deployment \u7684\u4e0a\u7ebf\u8fc7\u7a0b\uff0c\u80fd\u591f\u5728\u6682\u505c\u548c\u6062\u590d\u6267\u884c\u4e4b\u95f4\u5e94\u7528\u591a\u4e2a\u4fee\u8865\u7a0b\u5e8f\uff0c\u800c\u4e0d\u4f1a\u89e6\u53d1\u4e0d\u5fc5\u8981\u7684\u4e0a\u7ebf\u64cd\u4f5c zsh \u279c kubectl rollout pause deployment/nginx-deployment zsh \u279c kubectl rollout resume deployment/nginx-deployment ReplicaSet \u7ef4\u62a4\u4e00\u7ec4 Pod \u526f\u672c\u7684\u7a33\u5b9a\u96c6\u5408 StatefulSet \u7ba1\u7406\u6709\u72b6\u6001\u5e94\u7528\u7684\u5de5\u4f5c\u8d1f\u8f7d API \u5bf9\u8c61\u3001\u7ba1\u7406\u67d0 Pod \u96c6\u5408\u7684\u90e8\u7f72\u548c\u6269\u7f29\uff0c \u5e76\u4e3a\u8fd9\u4e9b Pod \u63d0\u4f9b\u6301\u4e45\u5b58\u50a8\u548c\u6301\u4e45\u6807\u8bc6\u7b26 \u5e38\u89c1\u4f7f\u7528\u573a\u666f \u7a33\u5b9a\u7684\u3001\u552f\u4e00\u7684\u7f51\u7edc\u6807\u8bc6\u7b26 \u7a33\u5b9a\u7684\u3001\u6301\u4e45\u7684\u5b58\u50a8 \u6709\u5e8f\u7684\u3001\u4f18\u96c5\u7684\u90e8\u7f72\u548c\u6269\u7f29 \u6709\u5e8f\u7684\u3001\u81ea\u52a8\u7684\u6eda\u52a8\u66f4\u65b0 DaemonSet \u786e\u4fdd\u5168\u90e8\uff08\u6216\u8005\u67d0\u4e9b\uff09\u8282\u70b9\u4e0a\u8fd0\u884c\u4e00\u4e2a Pod \u7684\u526f\u672c \u5e38\u89c1\u4f7f\u7528\u573a\u666f \u5728\u6bcf\u4e2a\u8282\u70b9\u4e0a\u8fd0\u884c\u96c6\u7fa4\u5b88\u62a4\u8fdb\u7a0b \u5728\u6bcf\u4e2a\u8282\u70b9\u4e0a\u8fd0\u884c\u65e5\u5fd7\u6536\u96c6\u5b88\u62a4\u8fdb\u7a0b \u5728\u6bcf\u4e2a\u8282\u70b9\u4e0a\u8fd0\u884c\u76d1\u63a7\u5b88\u62a4\u8fdb\u7a0b \u521b\u5efa zsh \u279c kubectl apply -f https://k8s.io/examples/controllers/daemonset.yaml Job Job \u4f1a\u521b\u5efa\u4e00\u4e2a\u6216\u8005\u591a\u4e2a Pod\uff0c\u5e76\u5c06\u7ee7\u7eed\u91cd\u8bd5 Pod \u7684\u6267\u884c\uff0c\u76f4\u5230\u6307\u5b9a\u6570\u91cf\u7684 Pod \u6210\u529f\u7ec8\u6b62\u3002 \u968f\u7740 Pod \u6210\u529f\u7ed3\u675f\uff0cJob \u8ddf\u8e2a\u8bb0\u5f55\u6210\u529f\u5b8c\u6210\u7684 Pod \u4e2a\u6570\u3002 \u5f53\u6570\u91cf\u8fbe\u5230\u6307\u5b9a\u7684\u6210\u529f\u4e2a\u6570\u9608\u503c\u65f6\uff0c\u4efb\u52a1\uff08\u5373 Job\uff09\u7ed3\u675f \u5220\u9664 Job \u7684\u64cd\u4f5c\u4f1a\u6e05\u9664\u6240\u521b\u5efa\u7684\u5168\u90e8 Pod \u521b\u5efa job zsh \u279c kubectl apply -f https://kubernetes.io/examples/controllers/job.yaml Job \u7684\u5e76\u884c\u6267\u884c \u975e\u5e76\u884c Job \u901a\u5e38\u53ea\u542f\u52a8\u4e00\u4e2a Pod\uff0c\u9664\u975e\u8be5 Pod \u5931\u8d25, \u5f53 Pod \u6210\u529f\u7ec8\u6b62\u65f6\uff0c\u7acb\u5373\u89c6 Job \u4e3a\u5b8c\u6210\u72b6\u6001 \u5177\u6709\u786e\u5b9a\u5b8c\u6210\u8ba1\u6570\u7684\u5e76\u884c Job .spec.completions \u5b57\u6bb5\u8bbe\u7f6e\u4e3a\u975e 0 \u7684\u6b63\u6570\u503c NoIndexed \u5f53\u6210\u529f\u7684 Pod \u4e2a\u6570\u8fbe\u5230 .spec.completions \u65f6\uff0cJob \u88ab\u89c6\u4e3a\u5b8c\u6210 Indexed \u5f53\u6bcf\u4e2a\u7d22\u5f15\u90fd\u5bf9\u5e94\u4e00\u4e2a\u5b8c\u6210\u5b8c\u6210\u7684 Pod \u65f6\uff0cJob \u88ab\u8ba4\u4e3a\u662f\u5df2\u5b8c\u6210\u7684\u3002 \u5e26\u5de5\u4f5c\u961f\u5217\u7684\u5e76\u884c Job .spec.parallelism(\u5728\u4efb\u610f\u65f6\u523b\u8fd0\u884c\u72b6\u6001\u7684 Pod \u4e2a\u6570) \u63a7\u5236\u5e76\u884c\u6027 \u591a\u4e2a Pod \u4e4b\u95f4\u5fc5\u987b\u76f8\u4e92\u534f\u8c03\uff0c\u6216\u8005\u501f\u52a9\u5916\u90e8\u670d\u52a1\u786e\u5b9a\u6bcf\u4e2a Pod \u8981\u5904\u7406\u54ea\u4e2a\u5de5\u4f5c\u6761\u76ee \u6bcf\u4e2a Pod \u90fd\u53ef\u4ee5\u72ec\u7acb\u786e\u5b9a\u662f\u5426\u5176\u5b83 Pod \u90fd\u5df2\u5b8c\u6210\uff0c\u8fdb\u800c\u786e\u5b9a Job \u662f\u5426\u5b8c\u6210 \u5f53 Job \u4e2d\u4efb\u4f55 Pod \u6210\u529f\u7ec8\u6b62\uff0c\u4e0d\u518d\u521b\u5efa\u65b0 Pod\uff0c\u5269\u4e0b\u7684 Pod \u5141\u8bb8\u6267\u884c\u5b8c\u6bd5 \u4e00\u65e6\u81f3\u5c11 1 \u4e2a Pod \u6210\u529f\u5b8c\u6210\uff0c\u5e76\u4e14\u6240\u6709 Pod \u90fd\u5df2\u7ec8\u6b62\uff0c\u5373\u53ef\u5ba3\u544a Job \u6210\u529f\u5b8c\u6210 \u4e00\u65e6\u4efb\u4f55 Pod \u6210\u529f\u9000\u51fa\uff0c\u4efb\u4f55\u5176\u5b83 Pod \u90fd\u4e0d\u5e94\u518d\u5bf9\u6b64\u4efb\u52a1\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u6216\u751f\u6210\u4efb\u4f55\u8f93\u51fa\u3002\u6240\u6709 Pod \u90fd\u5e94\u542f\u52a8\u9000\u51fa\u8fc7\u7a0b \u5bb9\u9519 \u901a\u8fc7 .spec.template.spec.restartPolicy \u8bbe\u7f6e\u91cd\u542f\u7b56\u7565 \u5e94\u7528\u9700\u8981\u5904\u7406\u5728\u4e00\u4e2a\u65b0 Pod \u4e2d\u88ab\u91cd\u542f\u7684\u60c5\u51b5 \u5373\u4f7f\u5c06 .spec.parallelism \u8bbe\u7f6e\u4e3a 1\uff0c\u4e14\u5c06 .spec.completions \u8bbe\u7f6e\u4e3a 1\uff0c\u5e76\u4e14 .spec.template.spec.restartPolicy \u8bbe\u7f6e\u4e3a \"Never\"\uff0c\u540c\u4e00\u7a0b\u5e8f\u4ecd\u7136\u6709\u53ef\u80fd\u88ab\u542f\u52a8\u4e24\u6b21 Job \u7ec8\u6b62\u4e0e\u6e05\u7406 Job \u5b8c\u6210\u65f6\u4e0d\u4f1a\u518d\u521b\u5efa\u65b0\u7684 Pod\uff0c\u4e0d\u8fc7\u5df2\u6709\u7684 Pod \u901a\u5e38\u4e5f\u4e0d\u4f1a\u88ab\u5220\u9664\uff1b\u53ef\u4ee5\u4f7f\u7528 kubectl \u6765\u5220\u9664 Job \u7ec8\u6b62 Job \u4e3a Job \u7684 .spec.activeDeadlineSeconds \u8bbe\u7f6e\u4e00\u4e2a\u79d2\u6570\u503c\u3002\u4e00\u65e6 Job \u8fd0\u884c\u65f6\u95f4\u8fbe\u5230 activeDeadlineSeconds \u79d2\uff0c\u5176\u6240\u6709\u8fd0\u884c\u4e2d\u7684 Pod \u90fd\u4f1a\u88ab\u7ec8\u6b62\u3002 \u81ea\u52a8\u6e05\u7406 Job \u8bbe\u7f6e Job \u7684 .spec.ttlSecondsAfterFinished \u5b57\u6bb5\uff0c\u53ef\u4ee5\u8ba9\u8be5\u63a7\u5236\u5668\u6e05\u7406\u6389\u5df2\u7ed3\u675f\u7684\u8d44\u6e90\u3002 \u6302\u8d77 Job \u66f4\u65b0 .spec.suspend \u5b57\u6bb5\u4e3a true \u6302\u8d77 Job\uff0c\u6062\u590d\u5176\u6267\u884c\u65f6\uff0c\u5c06\u5176\u66f4\u65b0\u4e3a false\uff1b\u6302\u8d77 Job \u4f1a\u5220\u9664\u5176\u6240\u6709\u6d3b\u8dc3\u7684 Pod CronJob \u521b\u5efa\u57fa\u4e8e\u65f6\u9694\u91cd\u590d\u8c03\u5ea6\u7684 Jobs \u9650\u5236 Job \u5e94\u8be5\u662f\u5e42\u7b49\u7684 ReplicationController \u786e\u4fdd\u5728\u4efb\u4f55\u65f6\u5019\u90fd\u6709\u7279\u5b9a\u6570\u91cf\u7684 Pod \u526f\u672c\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\u3002\u6362\u53e5\u8bdd\u8bf4\uff0cReplicationController \u786e\u4fdd\u4e00\u4e2a Pod \u6216\u4e00\u7ec4\u540c\u7c7b\u7684 Pod \u603b\u662f\u53ef\u7528\u7684\u3002 \u521b\u5efa zsh \u279c kubectl apply -f https://k8s.io/examples/controllers/replication.yaml","title":"\u8d44\u6e90\u7c7b\u578b"},{"location":"K8S/resource/#deployment","text":"\u4e3a Pod \u548c ReplicaSet \u63d0\u4f9b\u58f0\u660e\u5f0f\u7684\u66f4\u65b0\u80fd\u529b","title":"Deployment"},{"location":"K8S/resource/#_1","text":"zsh \u279c kubectl apply -f https://k8s.io/examples/controllers/nginx-deployment.yaml","title":"\u521b\u5efa"},{"location":"K8S/resource/#_2","text":"# \u68c0\u67e5 Deployment \u662f\u5426\u5df2\u521b\u5efa zsh \u279c kubectl get deployments # \u67e5\u770b Deployment \u4e0a\u7ebf\u72b6\u6001 zsh \u279c kubectl rollout status deployment/nginx-deployment # \u67e5\u770b Deployment \u521b\u5efa\u7684 ReplicaSet zsh \u279c kubectl get rs # \u67e5\u770b Deployment \u521b\u5efa\u7684 pod zsh \u279c kubectl get pods --show-labels","title":"\u67e5\u8be2"},{"location":"K8S/resource/#_3","text":"# \u66f4\u65b0\u955c\u50cf zsh \u279c kubectl set image deployment.v1.apps/nginx-deployment nginx = nginx:1.16.1 # OR: kubectl set image deployment/nginx-deployment nginx=nginx:1.16.1 # OR: kubectl edit deployment/nginx-deployment # \u67e5\u770b Deployment \u66f4\u65b0\u8fc7\u7a0b zsh \u279c kubectl describe deployments","title":"\u66f4\u65b0"},{"location":"K8S/resource/#_4","text":".spec.strategy.type RollingUpdate \uff08default\uff09 \u6307\u5b9a maxUnavailable \u548c maxSurge \u6765\u63a7\u5236\u6eda\u52a8\u66f4\u65b0 \u8fc7\u7a0b .spec.strategy.rollingUpdate.maxUnavailable \u66f4\u65b0\u8fc7\u7a0b\u4e2d\u4e0d\u53ef\u7528\u7684 Pod \u7684\u4e2a\u6570\u4e0a\u9650 .spec.strategy.rollingUpdate.maxSurge \u53ef\u4ee5\u521b\u5efa\u7684\u8d85\u51fa\u671f\u671b Pod \u4e2a\u6570\u7684 Pod \u6570\u91cf Recreate \u5728\u521b\u5efa\u65b0 Pods \u4e4b\u524d\uff0c\u6240\u6709\u73b0\u6709\u7684 Pods \u4f1a\u88ab\u6740\u6b7b","title":"\u66f4\u65b0\u7b56\u7565"},{"location":"K8S/resource/#_5","text":"# \u66f4\u65b0\u64cd\u4f5c&\u7248\u672c\u8bb0\u5f55 zsh \u279c kubectl set image deployment/nginx-deployment nginx = nginx:1.161 --record = true # \u68c0\u67e5\u64cd\u4f5c\u7248\u672c zsh \u279c kubectl rollout history deployment/nginx-deployment # \u68c0\u67e5\u7248\u672c\u8be6\u7ec6\u4fe1\u606f zsh \u279c kubectl rollout history deployment/nginx-deployment --revision = 2 # \u56de\u6eda\u5230\u4e4b\u524d\u7684\u4fee\u8ba2\u7248\u672c zsh \u279c kubectl rollout undo deployment/nginx-deployment zsh \u279c OR: kubectl rollout undo deployment/nginx-deployment --to-revision = 2","title":"\u56de\u6eda"},{"location":"K8S/resource/#_6","text":"# \u6307\u5b9areplica\u6570\u91cf zsh \u279c kubectl scale deployment/nginx-deployment --replicas = 5 # \u81ea\u52a8\u7f29/\u6269\u5bb9 zsh \u279c kubectl autoscale deployment/nginx-deployment --min = 10 --max = 15 --cpu-percent = 80 # \u6bd4\u4f8b\u7f29\u653e # RollingUpdate \u7684 Deployment \u652f\u6301\u540c\u65f6\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u7684\u591a\u4e2a\u7248\u672c\u3002 \u5f53\u81ea\u52a8\u7f29\u653e\u5668\u7f29\u653e\u5904\u4e8e\u4e0a\u7ebf\u8fdb\u7a0b\uff08\u4ecd\u5728\u8fdb\u884c\u4e2d\u6216\u6682\u505c\uff09\u4e2d\u7684 RollingUpdate Deployment \u65f6\uff0c # Deployment \u63a7\u5236\u5668\u4f1a\u5e73\u8861\u73b0\u6709\u7684\u6d3b\u8dc3\u72b6\u6001\u7684 ReplicaSets\uff08\u542b Pods \u7684 ReplicaSets\uff09\u4e2d\u7684\u989d\u5916\u526f\u672c\uff0c \u4ee5\u964d\u4f4e\u98ce\u9669 zsh \u279c kubectl set image deployment/nginx-deployment nginx = nginx:sometag zsh \u279c kubectl get rs","title":"\u7f29/\u6269\u5bb9"},{"location":"K8S/resource/#deployment_1","text":"# \u6682\u505c Deployment \u7684\u4e0a\u7ebf\u8fc7\u7a0b\uff0c\u80fd\u591f\u5728\u6682\u505c\u548c\u6062\u590d\u6267\u884c\u4e4b\u95f4\u5e94\u7528\u591a\u4e2a\u4fee\u8865\u7a0b\u5e8f\uff0c\u800c\u4e0d\u4f1a\u89e6\u53d1\u4e0d\u5fc5\u8981\u7684\u4e0a\u7ebf\u64cd\u4f5c zsh \u279c kubectl rollout pause deployment/nginx-deployment zsh \u279c kubectl rollout resume deployment/nginx-deployment","title":"\u6682\u505c\u3001\u6062\u590d Deployment \u7684\u4e0a\u7ebf\u8fc7\u7a0b"},{"location":"K8S/resource/#replicaset","text":"\u7ef4\u62a4\u4e00\u7ec4 Pod \u526f\u672c\u7684\u7a33\u5b9a\u96c6\u5408","title":"ReplicaSet"},{"location":"K8S/resource/#statefulset","text":"\u7ba1\u7406\u6709\u72b6\u6001\u5e94\u7528\u7684\u5de5\u4f5c\u8d1f\u8f7d API \u5bf9\u8c61\u3001\u7ba1\u7406\u67d0 Pod \u96c6\u5408\u7684\u90e8\u7f72\u548c\u6269\u7f29\uff0c \u5e76\u4e3a\u8fd9\u4e9b Pod \u63d0\u4f9b\u6301\u4e45\u5b58\u50a8\u548c\u6301\u4e45\u6807\u8bc6\u7b26","title":"StatefulSet"},{"location":"K8S/resource/#_7","text":"\u7a33\u5b9a\u7684\u3001\u552f\u4e00\u7684\u7f51\u7edc\u6807\u8bc6\u7b26 \u7a33\u5b9a\u7684\u3001\u6301\u4e45\u7684\u5b58\u50a8 \u6709\u5e8f\u7684\u3001\u4f18\u96c5\u7684\u90e8\u7f72\u548c\u6269\u7f29 \u6709\u5e8f\u7684\u3001\u81ea\u52a8\u7684\u6eda\u52a8\u66f4\u65b0","title":"\u5e38\u89c1\u4f7f\u7528\u573a\u666f"},{"location":"K8S/resource/#daemonset","text":"\u786e\u4fdd\u5168\u90e8\uff08\u6216\u8005\u67d0\u4e9b\uff09\u8282\u70b9\u4e0a\u8fd0\u884c\u4e00\u4e2a Pod \u7684\u526f\u672c","title":"DaemonSet"},{"location":"K8S/resource/#_8","text":"\u5728\u6bcf\u4e2a\u8282\u70b9\u4e0a\u8fd0\u884c\u96c6\u7fa4\u5b88\u62a4\u8fdb\u7a0b \u5728\u6bcf\u4e2a\u8282\u70b9\u4e0a\u8fd0\u884c\u65e5\u5fd7\u6536\u96c6\u5b88\u62a4\u8fdb\u7a0b \u5728\u6bcf\u4e2a\u8282\u70b9\u4e0a\u8fd0\u884c\u76d1\u63a7\u5b88\u62a4\u8fdb\u7a0b","title":"\u5e38\u89c1\u4f7f\u7528\u573a\u666f"},{"location":"K8S/resource/#_9","text":"zsh \u279c kubectl apply -f https://k8s.io/examples/controllers/daemonset.yaml","title":"\u521b\u5efa"},{"location":"K8S/resource/#job","text":"Job \u4f1a\u521b\u5efa\u4e00\u4e2a\u6216\u8005\u591a\u4e2a Pod\uff0c\u5e76\u5c06\u7ee7\u7eed\u91cd\u8bd5 Pod \u7684\u6267\u884c\uff0c\u76f4\u5230\u6307\u5b9a\u6570\u91cf\u7684 Pod \u6210\u529f\u7ec8\u6b62\u3002 \u968f\u7740 Pod \u6210\u529f\u7ed3\u675f\uff0cJob \u8ddf\u8e2a\u8bb0\u5f55\u6210\u529f\u5b8c\u6210\u7684 Pod \u4e2a\u6570\u3002 \u5f53\u6570\u91cf\u8fbe\u5230\u6307\u5b9a\u7684\u6210\u529f\u4e2a\u6570\u9608\u503c\u65f6\uff0c\u4efb\u52a1\uff08\u5373 Job\uff09\u7ed3\u675f \u5220\u9664 Job \u7684\u64cd\u4f5c\u4f1a\u6e05\u9664\u6240\u521b\u5efa\u7684\u5168\u90e8 Pod","title":"Job"},{"location":"K8S/resource/#job_1","text":"zsh \u279c kubectl apply -f https://kubernetes.io/examples/controllers/job.yaml","title":"\u521b\u5efa job"},{"location":"K8S/resource/#job_2","text":"\u975e\u5e76\u884c Job \u901a\u5e38\u53ea\u542f\u52a8\u4e00\u4e2a Pod\uff0c\u9664\u975e\u8be5 Pod \u5931\u8d25, \u5f53 Pod \u6210\u529f\u7ec8\u6b62\u65f6\uff0c\u7acb\u5373\u89c6 Job \u4e3a\u5b8c\u6210\u72b6\u6001 \u5177\u6709\u786e\u5b9a\u5b8c\u6210\u8ba1\u6570\u7684\u5e76\u884c Job .spec.completions \u5b57\u6bb5\u8bbe\u7f6e\u4e3a\u975e 0 \u7684\u6b63\u6570\u503c NoIndexed \u5f53\u6210\u529f\u7684 Pod \u4e2a\u6570\u8fbe\u5230 .spec.completions \u65f6\uff0cJob \u88ab\u89c6\u4e3a\u5b8c\u6210 Indexed \u5f53\u6bcf\u4e2a\u7d22\u5f15\u90fd\u5bf9\u5e94\u4e00\u4e2a\u5b8c\u6210\u5b8c\u6210\u7684 Pod \u65f6\uff0cJob \u88ab\u8ba4\u4e3a\u662f\u5df2\u5b8c\u6210\u7684\u3002 \u5e26\u5de5\u4f5c\u961f\u5217\u7684\u5e76\u884c Job .spec.parallelism(\u5728\u4efb\u610f\u65f6\u523b\u8fd0\u884c\u72b6\u6001\u7684 Pod \u4e2a\u6570) \u63a7\u5236\u5e76\u884c\u6027 \u591a\u4e2a Pod \u4e4b\u95f4\u5fc5\u987b\u76f8\u4e92\u534f\u8c03\uff0c\u6216\u8005\u501f\u52a9\u5916\u90e8\u670d\u52a1\u786e\u5b9a\u6bcf\u4e2a Pod \u8981\u5904\u7406\u54ea\u4e2a\u5de5\u4f5c\u6761\u76ee \u6bcf\u4e2a Pod \u90fd\u53ef\u4ee5\u72ec\u7acb\u786e\u5b9a\u662f\u5426\u5176\u5b83 Pod \u90fd\u5df2\u5b8c\u6210\uff0c\u8fdb\u800c\u786e\u5b9a Job \u662f\u5426\u5b8c\u6210 \u5f53 Job \u4e2d\u4efb\u4f55 Pod \u6210\u529f\u7ec8\u6b62\uff0c\u4e0d\u518d\u521b\u5efa\u65b0 Pod\uff0c\u5269\u4e0b\u7684 Pod \u5141\u8bb8\u6267\u884c\u5b8c\u6bd5 \u4e00\u65e6\u81f3\u5c11 1 \u4e2a Pod \u6210\u529f\u5b8c\u6210\uff0c\u5e76\u4e14\u6240\u6709 Pod \u90fd\u5df2\u7ec8\u6b62\uff0c\u5373\u53ef\u5ba3\u544a Job \u6210\u529f\u5b8c\u6210 \u4e00\u65e6\u4efb\u4f55 Pod \u6210\u529f\u9000\u51fa\uff0c\u4efb\u4f55\u5176\u5b83 Pod \u90fd\u4e0d\u5e94\u518d\u5bf9\u6b64\u4efb\u52a1\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u6216\u751f\u6210\u4efb\u4f55\u8f93\u51fa\u3002\u6240\u6709 Pod \u90fd\u5e94\u542f\u52a8\u9000\u51fa\u8fc7\u7a0b","title":"Job \u7684\u5e76\u884c\u6267\u884c"},{"location":"K8S/resource/#_10","text":"\u901a\u8fc7 .spec.template.spec.restartPolicy \u8bbe\u7f6e\u91cd\u542f\u7b56\u7565 \u5e94\u7528\u9700\u8981\u5904\u7406\u5728\u4e00\u4e2a\u65b0 Pod \u4e2d\u88ab\u91cd\u542f\u7684\u60c5\u51b5 \u5373\u4f7f\u5c06 .spec.parallelism \u8bbe\u7f6e\u4e3a 1\uff0c\u4e14\u5c06 .spec.completions \u8bbe\u7f6e\u4e3a 1\uff0c\u5e76\u4e14 .spec.template.spec.restartPolicy \u8bbe\u7f6e\u4e3a \"Never\"\uff0c\u540c\u4e00\u7a0b\u5e8f\u4ecd\u7136\u6709\u53ef\u80fd\u88ab\u542f\u52a8\u4e24\u6b21","title":"\u5bb9\u9519"},{"location":"K8S/resource/#job_3","text":"Job \u5b8c\u6210\u65f6\u4e0d\u4f1a\u518d\u521b\u5efa\u65b0\u7684 Pod\uff0c\u4e0d\u8fc7\u5df2\u6709\u7684 Pod \u901a\u5e38\u4e5f\u4e0d\u4f1a\u88ab\u5220\u9664\uff1b\u53ef\u4ee5\u4f7f\u7528 kubectl \u6765\u5220\u9664 Job \u7ec8\u6b62 Job \u4e3a Job \u7684 .spec.activeDeadlineSeconds \u8bbe\u7f6e\u4e00\u4e2a\u79d2\u6570\u503c\u3002\u4e00\u65e6 Job \u8fd0\u884c\u65f6\u95f4\u8fbe\u5230 activeDeadlineSeconds \u79d2\uff0c\u5176\u6240\u6709\u8fd0\u884c\u4e2d\u7684 Pod \u90fd\u4f1a\u88ab\u7ec8\u6b62\u3002 \u81ea\u52a8\u6e05\u7406 Job \u8bbe\u7f6e Job \u7684 .spec.ttlSecondsAfterFinished \u5b57\u6bb5\uff0c\u53ef\u4ee5\u8ba9\u8be5\u63a7\u5236\u5668\u6e05\u7406\u6389\u5df2\u7ed3\u675f\u7684\u8d44\u6e90\u3002","title":"Job \u7ec8\u6b62\u4e0e\u6e05\u7406"},{"location":"K8S/resource/#job_4","text":"\u66f4\u65b0 .spec.suspend \u5b57\u6bb5\u4e3a true \u6302\u8d77 Job\uff0c\u6062\u590d\u5176\u6267\u884c\u65f6\uff0c\u5c06\u5176\u66f4\u65b0\u4e3a false\uff1b\u6302\u8d77 Job \u4f1a\u5220\u9664\u5176\u6240\u6709\u6d3b\u8dc3\u7684 Pod","title":"\u6302\u8d77 Job"},{"location":"K8S/resource/#cronjob","text":"\u521b\u5efa\u57fa\u4e8e\u65f6\u9694\u91cd\u590d\u8c03\u5ea6\u7684 Jobs","title":"CronJob"},{"location":"K8S/resource/#_11","text":"Job \u5e94\u8be5\u662f\u5e42\u7b49\u7684","title":"\u9650\u5236"},{"location":"K8S/resource/#replicationcontroller","text":"\u786e\u4fdd\u5728\u4efb\u4f55\u65f6\u5019\u90fd\u6709\u7279\u5b9a\u6570\u91cf\u7684 Pod \u526f\u672c\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\u3002\u6362\u53e5\u8bdd\u8bf4\uff0cReplicationController \u786e\u4fdd\u4e00\u4e2a Pod \u6216\u4e00\u7ec4\u540c\u7c7b\u7684 Pod \u603b\u662f\u53ef\u7528\u7684\u3002","title":"ReplicationController"},{"location":"K8S/resource/#_12","text":"zsh \u279c kubectl apply -f https://k8s.io/examples/controllers/replication.yaml","title":"\u521b\u5efa"},{"location":"K8S/service_%26_network/","tags":["K8S","Kubernetes","Service"],"text":"Service \u5c06\u8fd0\u884c\u5728\u4e00\u7ec4 Pods \u4e0a\u7684\u5e94\u7528\u7a0b\u5e8f\u516c\u5f00\u4e3a\u7f51\u7edc\u670d\u52a1\u7684\u62bd\u8c61\u65b9\u6cd5 \u865a\u62df IP \u548c Service \u4ee3\u7406 userspace \u4ee3\u7406\u6a21\u5f0f iptables \u4ee3\u7406\u6a21\u5f0f IPVS \u4ee3\u7406\u6a21\u5f0f \u670d\u52a1\u53d1\u73b0 \u73af\u5883\u53d8\u91cf DNS Headless Services \u4e0d\u9700\u8981\u6216\u4e0d\u60f3\u8981\u8d1f\u8f7d\u5747\u8861 \u53d1\u5e03\u670d\u52a1\uff08\u670d\u52a1\u7c7b\u578b) Type ClusterIP\uff0c\u901a\u8fc7\u96c6\u7fa4\u7684\u5185\u90e8 IP \u66b4\u9732\u670d\u52a1\uff0c\u9009\u62e9\u8be5\u503c\u65f6\u670d\u52a1\u53ea\u80fd\u591f\u5728\u96c6\u7fa4\u5185\u90e8\u8bbf\u95ee NodePort\uff0c\u901a\u8fc7\u6bcf\u4e2a\u8282\u70b9\u4e0a\u7684 IP \u548c\u9759\u6001\u7aef\u53e3\uff08NodePort\uff09\u66b4\u9732\u670d\u52a1\uff0c\u901a\u8fc7\u8bf7\u6c42 <\u8282\u70b9 IP>:<\u8282\u70b9 PORT>\uff0c\u4f60\u53ef\u4ee5\u4ece\u96c6\u7fa4\u7684\u5916\u90e8\u8bbf\u95ee\u4e00\u4e2a NodePort \u670d\u52a1\u3002NodePort \u670d\u52a1\u4f1a\u8def\u7531\u5230\u81ea\u52a8\u521b\u5efa\u7684 ClusterIP \u670d\u52a1 LoadBalancer\uff0c\u4f7f\u7528\u4e91\u63d0\u4f9b\u5546\u7684\u8d1f\u8f7d\u5747\u8861\u5668\u5411\u5916\u90e8\u66b4\u9732\u670d\u52a1\u3002\u5916\u90e8\u8d1f\u8f7d\u5747\u8861\u5668\u53ef\u4ee5\u5c06\u6d41\u91cf\u8def\u7531\u5230\u81ea\u52a8\u521b\u5efa\u7684 NodePort \u670d\u52a1\u548c ClusterIP \u670d\u52a1\u4e0a\u3002 ExternalName\uff0c\u901a\u8fc7\u8fd4\u56de CNAME \u548c\u5bf9\u5e94\u503c\uff0c\u53ef\u4ee5\u5c06\u670d\u52a1\u6620\u5c04\u5230 externalName \u5b57\u6bb5\u7684\u5185\u5bb9\uff08\u4f8b\u5982\uff0cfoo.bar.example.com\uff09\u3002 \u65e0\u9700\u521b\u5efa\u4efb\u4f55\u7c7b\u578b\u4ee3\u7406 \u670d\u52a1\u51c6\u5907 \u4ee3\u7801 package main import ( \"fmt\" \"net/http\" ) func indexHandler ( w http . ResponseWriter , r * http . Request ) { fmt . Fprintf ( w , \"<h1>Test Homepage</h1>\" ) } func main () { http . HandleFunc ( \"/\" , indexHandler ) err := http . ListenAndServe ( \":80\" , nil ) if err != nil { panic ( err ) } } FROM golang:latest AS build WORKDIR /app ENV CGO_ENABLED = 0 ENV GO111MODULE = on ENV GOOS = linux COPY . . RUN go mod tidy RUN go build -o app . FROM alpine:latest WORKDIR /root/ COPY --from = build /app . COPY start.sh . CMD [ \"sh\" , \"start.sh\" ] build zsh \u279cdocker build -t app:1.0.0 . ClusterIP service_cluster.yaml apiVersion : apps/v1 kind : Deployment metadata : name : my-app spec : selector : matchLabels : run : my-app replicas : 2 template : metadata : labels : run : my-app spec : containers : - name : my-app image : app:1.0.0 imagePullPolicy : Never ports : - containerPort : 80 --- apiVersion : v1 kind : Service metadata : name : my-app labels : run : my-app spec : type : ClusterIP ports : - port : 80 protocol : TCP targetPort : 80 selector : run : my-app zsh \u279c kubectl apply -f service_cluster.yaml get resources status zsh \u279c kubectl get pods -o wide NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES my-app-64db968db4-pldzs 1 /1 Running 0 8m11s 172 .17.0.5 minikube <none> <none> my-app-64db968db4-xf2xj 1 /1 Running 0 8m11s 172 .17.0.6 minikube <none> <none> zsh \u279c kubectl get svc -o wide NAME TYPE CLUSTER-IP EXTERNAL-IP PORT ( S ) AGE SELECTOR my-app ClusterIP 10 .105.122.196 <none> 80 /TCP 9m53s run = my-app request cluster service \u9700\u8981\u4ece\u540c\u4e00\u96c6\u7fa4\u4e2d\u7684 Pod \u4e2d\u8bbf\u95ee ClusterIP zsh \u279c kubectl run busybox -it --image = busybox:1.28 --restart = Never --rm / # wget -qO - 10.105.122.196 <h1>Test Homepage</h1> / # wget -qO - 172.17.0.3 <h1>Test Homepage</h1> NodePort service_node.yaml apiVersion : apps/v1 kind : Deployment metadata : name : my-app spec : selector : matchLabels : run : my-app replicas : 2 template : metadata : labels : run : my-app spec : containers : - name : my-app image : app:1.0.0 imagePullPolicy : Never ports : - containerPort : 80 --- apiVersion : v1 kind : Service metadata : name : my-app labels : run : my-app spec : type : NodePort ports : - port : 80 protocol : TCP targetPort : 80 selector : run : my-app zsh \u279c kubectl apply -f service_node.yaml get resources status zsh \u279c kubectl get svc -o wide NAME TYPE CLUSTER-IP EXTERNAL-IP PORT ( S ) AGE SELECTOR my-app NodePort 10 .106.216.118 <none> 80 :31646/TCP 5m14s run = my-app request zsh \u279c NODEPORT = $( kubectl get -o jsonpath = \"{.spec.ports[0].nodePort}\" services my-app ) zsh \u279c NODES = $( kubectl get nodes -o jsonpath = '{ $.items[*].status.addresses[?(@.type==\"InternalIP\")].address }' ) zsh \u279c for node in $NODES ; do curl -s $node : $NODEPORT | grep -i client_address ; done request if minikube zsh \u279c minikube service my-app --url http://127.0.0.1:50883 \u2757 Because you are using a Docker driver on darwin, the terminal needs to be open to run it. zsh \u279c curl http://127.0.0.1:50883 <h1>Test Homepage</h1> LoadBalancer service_loadbalabcer.yaml apiVersion : apps/v1 kind : Deployment metadata : name : my-app spec : selector : matchLabels : run : my-app replicas : 2 template : metadata : labels : run : my-app spec : containers : - name : my-app image : app:1.0.0 imagePullPolicy : Never ports : - containerPort : 80 --- apiVersion : v1 kind : Service metadata : name : my-app labels : run : my-app spec : type : LoadBalancer ports : - port : 80 protocol : TCP targetPort : 80 selector : run : my-app zsh \u279c kubectl apply -f service_loadbalancer.yaml get resources status zsh \u279c kubectl get svc -o wide NAME TYPE CLUSTER-IP EXTERNAL-IP PORT ( S ) AGE SELECTOR my-app LoadBalancer 10 .108.70.232 127 .0.0.1 80 :31047/TCP 4m6s run = my-app request zsh \u279c curl 127 .0.0.1:80 <h1>Test Homepage</h1> request if minikube without minikube tunnel, Kubernetes will show the external IP as \u201cpending\u201d zsh \u279c minikube tunnel \u2705 Tunnel successfully started \ud83d\udccc NOTE: Please do not close this terminal as this process must stay alive for the tunnel to be accessible ... \u2757 The service/ingress my-app requires privileged ports to be exposed: [ 80 ] \ud83d\udd11 sudo permission will be asked for it. \ud83c\udfc3 Starting tunnel for service my-app. zsh \u279c curl 127 .0.0.1:80 <h1>Test Homepage</h1> TODO \u7f51\u7edc\u901a\u4fe1 pod \u4e0e Service iptables lvs \u7edf\u4e00\u8282\u70b9\u5185\u7684 pod \u95f4\u901a\u4fe1 docker \u7f51\u6865 \u4e0d\u540c\u8282\u70b9\u7684 pod \u901a\u4fe1 flannel TODO nginx-ingress","title":"\u670d\u52a1\u4e0e\u8d1f\u8f7d"},{"location":"K8S/service_%26_network/#service","text":"\u5c06\u8fd0\u884c\u5728\u4e00\u7ec4 Pods \u4e0a\u7684\u5e94\u7528\u7a0b\u5e8f\u516c\u5f00\u4e3a\u7f51\u7edc\u670d\u52a1\u7684\u62bd\u8c61\u65b9\u6cd5","title":"Service"},{"location":"K8S/service_%26_network/#ip-service","text":"userspace \u4ee3\u7406\u6a21\u5f0f iptables \u4ee3\u7406\u6a21\u5f0f IPVS \u4ee3\u7406\u6a21\u5f0f","title":"\u865a\u62df IP \u548c Service \u4ee3\u7406"},{"location":"K8S/service_%26_network/#_1","text":"\u73af\u5883\u53d8\u91cf DNS","title":"\u670d\u52a1\u53d1\u73b0"},{"location":"K8S/service_%26_network/#headless-services","text":"\u4e0d\u9700\u8981\u6216\u4e0d\u60f3\u8981\u8d1f\u8f7d\u5747\u8861","title":"Headless Services"},{"location":"K8S/service_%26_network/#_2","text":"Type ClusterIP\uff0c\u901a\u8fc7\u96c6\u7fa4\u7684\u5185\u90e8 IP \u66b4\u9732\u670d\u52a1\uff0c\u9009\u62e9\u8be5\u503c\u65f6\u670d\u52a1\u53ea\u80fd\u591f\u5728\u96c6\u7fa4\u5185\u90e8\u8bbf\u95ee NodePort\uff0c\u901a\u8fc7\u6bcf\u4e2a\u8282\u70b9\u4e0a\u7684 IP \u548c\u9759\u6001\u7aef\u53e3\uff08NodePort\uff09\u66b4\u9732\u670d\u52a1\uff0c\u901a\u8fc7\u8bf7\u6c42 <\u8282\u70b9 IP>:<\u8282\u70b9 PORT>\uff0c\u4f60\u53ef\u4ee5\u4ece\u96c6\u7fa4\u7684\u5916\u90e8\u8bbf\u95ee\u4e00\u4e2a NodePort \u670d\u52a1\u3002NodePort \u670d\u52a1\u4f1a\u8def\u7531\u5230\u81ea\u52a8\u521b\u5efa\u7684 ClusterIP \u670d\u52a1 LoadBalancer\uff0c\u4f7f\u7528\u4e91\u63d0\u4f9b\u5546\u7684\u8d1f\u8f7d\u5747\u8861\u5668\u5411\u5916\u90e8\u66b4\u9732\u670d\u52a1\u3002\u5916\u90e8\u8d1f\u8f7d\u5747\u8861\u5668\u53ef\u4ee5\u5c06\u6d41\u91cf\u8def\u7531\u5230\u81ea\u52a8\u521b\u5efa\u7684 NodePort \u670d\u52a1\u548c ClusterIP \u670d\u52a1\u4e0a\u3002 ExternalName\uff0c\u901a\u8fc7\u8fd4\u56de CNAME \u548c\u5bf9\u5e94\u503c\uff0c\u53ef\u4ee5\u5c06\u670d\u52a1\u6620\u5c04\u5230 externalName \u5b57\u6bb5\u7684\u5185\u5bb9\uff08\u4f8b\u5982\uff0cfoo.bar.example.com\uff09\u3002 \u65e0\u9700\u521b\u5efa\u4efb\u4f55\u7c7b\u578b\u4ee3\u7406","title":"\u53d1\u5e03\u670d\u52a1\uff08\u670d\u52a1\u7c7b\u578b)"},{"location":"K8S/service_%26_network/#_3","text":"\u4ee3\u7801 package main import ( \"fmt\" \"net/http\" ) func indexHandler ( w http . ResponseWriter , r * http . Request ) { fmt . Fprintf ( w , \"<h1>Test Homepage</h1>\" ) } func main () { http . HandleFunc ( \"/\" , indexHandler ) err := http . ListenAndServe ( \":80\" , nil ) if err != nil { panic ( err ) } } FROM golang:latest AS build WORKDIR /app ENV CGO_ENABLED = 0 ENV GO111MODULE = on ENV GOOS = linux COPY . . RUN go mod tidy RUN go build -o app . FROM alpine:latest WORKDIR /root/ COPY --from = build /app . COPY start.sh . CMD [ \"sh\" , \"start.sh\" ] build zsh \u279cdocker build -t app:1.0.0 .","title":"\u670d\u52a1\u51c6\u5907"},{"location":"K8S/service_%26_network/#clusterip","text":"service_cluster.yaml apiVersion : apps/v1 kind : Deployment metadata : name : my-app spec : selector : matchLabels : run : my-app replicas : 2 template : metadata : labels : run : my-app spec : containers : - name : my-app image : app:1.0.0 imagePullPolicy : Never ports : - containerPort : 80 --- apiVersion : v1 kind : Service metadata : name : my-app labels : run : my-app spec : type : ClusterIP ports : - port : 80 protocol : TCP targetPort : 80 selector : run : my-app zsh \u279c kubectl apply -f service_cluster.yaml get resources status zsh \u279c kubectl get pods -o wide NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES my-app-64db968db4-pldzs 1 /1 Running 0 8m11s 172 .17.0.5 minikube <none> <none> my-app-64db968db4-xf2xj 1 /1 Running 0 8m11s 172 .17.0.6 minikube <none> <none> zsh \u279c kubectl get svc -o wide NAME TYPE CLUSTER-IP EXTERNAL-IP PORT ( S ) AGE SELECTOR my-app ClusterIP 10 .105.122.196 <none> 80 /TCP 9m53s run = my-app request cluster service \u9700\u8981\u4ece\u540c\u4e00\u96c6\u7fa4\u4e2d\u7684 Pod \u4e2d\u8bbf\u95ee ClusterIP zsh \u279c kubectl run busybox -it --image = busybox:1.28 --restart = Never --rm / # wget -qO - 10.105.122.196 <h1>Test Homepage</h1> / # wget -qO - 172.17.0.3 <h1>Test Homepage</h1>","title":"ClusterIP"},{"location":"K8S/service_%26_network/#nodeport","text":"service_node.yaml apiVersion : apps/v1 kind : Deployment metadata : name : my-app spec : selector : matchLabels : run : my-app replicas : 2 template : metadata : labels : run : my-app spec : containers : - name : my-app image : app:1.0.0 imagePullPolicy : Never ports : - containerPort : 80 --- apiVersion : v1 kind : Service metadata : name : my-app labels : run : my-app spec : type : NodePort ports : - port : 80 protocol : TCP targetPort : 80 selector : run : my-app zsh \u279c kubectl apply -f service_node.yaml get resources status zsh \u279c kubectl get svc -o wide NAME TYPE CLUSTER-IP EXTERNAL-IP PORT ( S ) AGE SELECTOR my-app NodePort 10 .106.216.118 <none> 80 :31646/TCP 5m14s run = my-app request zsh \u279c NODEPORT = $( kubectl get -o jsonpath = \"{.spec.ports[0].nodePort}\" services my-app ) zsh \u279c NODES = $( kubectl get nodes -o jsonpath = '{ $.items[*].status.addresses[?(@.type==\"InternalIP\")].address }' ) zsh \u279c for node in $NODES ; do curl -s $node : $NODEPORT | grep -i client_address ; done request if minikube zsh \u279c minikube service my-app --url http://127.0.0.1:50883 \u2757 Because you are using a Docker driver on darwin, the terminal needs to be open to run it. zsh \u279c curl http://127.0.0.1:50883 <h1>Test Homepage</h1>","title":"NodePort"},{"location":"K8S/service_%26_network/#loadbalancer","text":"service_loadbalabcer.yaml apiVersion : apps/v1 kind : Deployment metadata : name : my-app spec : selector : matchLabels : run : my-app replicas : 2 template : metadata : labels : run : my-app spec : containers : - name : my-app image : app:1.0.0 imagePullPolicy : Never ports : - containerPort : 80 --- apiVersion : v1 kind : Service metadata : name : my-app labels : run : my-app spec : type : LoadBalancer ports : - port : 80 protocol : TCP targetPort : 80 selector : run : my-app zsh \u279c kubectl apply -f service_loadbalancer.yaml get resources status zsh \u279c kubectl get svc -o wide NAME TYPE CLUSTER-IP EXTERNAL-IP PORT ( S ) AGE SELECTOR my-app LoadBalancer 10 .108.70.232 127 .0.0.1 80 :31047/TCP 4m6s run = my-app request zsh \u279c curl 127 .0.0.1:80 <h1>Test Homepage</h1> request if minikube without minikube tunnel, Kubernetes will show the external IP as \u201cpending\u201d zsh \u279c minikube tunnel \u2705 Tunnel successfully started \ud83d\udccc NOTE: Please do not close this terminal as this process must stay alive for the tunnel to be accessible ... \u2757 The service/ingress my-app requires privileged ports to be exposed: [ 80 ] \ud83d\udd11 sudo permission will be asked for it. \ud83c\udfc3 Starting tunnel for service my-app. zsh \u279c curl 127 .0.0.1:80 <h1>Test Homepage</h1>","title":"LoadBalancer"},{"location":"K8S/service_%26_network/#todo","text":"pod \u4e0e Service iptables lvs \u7edf\u4e00\u8282\u70b9\u5185\u7684 pod \u95f4\u901a\u4fe1 docker \u7f51\u6865 \u4e0d\u540c\u8282\u70b9\u7684 pod \u901a\u4fe1 flannel","title":"TODO \u7f51\u7edc\u901a\u4fe1"},{"location":"K8S/service_%26_network/#todo-nginx-ingress","text":"","title":"TODO nginx-ingress"},{"location":"Redis/HashTable/","tags":["Redis","HashTable"],"text":"HashTable \u76ee\u5f55 Redis-HashTable-\u63a5\u53e3 \u6e90\u7801 dict.h dict.c dictType \u5b9a\u4e49\u4e00\u7ec4 key-value \u7684\u64cd\u4f5c\u51fd\u6570\u6a21\u7248 typedef struct dictType { // \u8ba1\u7b97hash\u7684\u51fd\u6570 uint64_t ( * hashFunction )( const void * key ); // key \u590d\u5236\u51fd\u6570\uff0c\u4e00\u822c\u4f7f\u7528NULL void * ( * keyDup )( void * privdata , const void * key ); // value \u590d\u5236\u51fd\u6570\uff0c\u4e00\u822c\u4f7f\u7528NULL void * ( * valDup )( void * privdata , const void * obj ); // key \u6bd4\u8f83\u51fd\u6570 int ( * keyCompare )( void * privdata , const void * key1 , const void * key2 ); // key \u91ca\u653e\u51fd\u6570 void ( * keyDestructor )( void * privdata , void * key ); // value \u91ca\u653e\u51fd\u6570 void ( * valDestructor )( void * privdata , void * obj ); } dictType ; dict - \u5b57\u5178\u7ed3\u6784 typedef struct dict { // key-value \u64cd\u4f5c\u51fd\u6570\u7ec4 dictType * type ; // \u79c1\u6709\u6570\u636e\uff0c\u7528\u5728\u7279\u5b9a hooks \u51fd\u6570\u4e2d void * privdata ; // hashTable, ht[1] \u6269\u5bb9\u4e2d\u7684hashTable, ht[0] \u65e7\u7684hashTable dictht ht [ 2 ]; // rehash \u6807\u5fd7\uff0c\u9ed8\u8ba4\u4e3a-1\uff08\u672a\u5728\u6269\u5bb9\u4e2d\uff09 long rehashidx ; // \u8fed\u4ee3\u5668\u6570\u91cf unsigned long iterators ; } dict ; dictht - hashTable \u7ed3\u6784 typedef struct dictht { // hash \u6570\u7ec4 dictEntry ** table ; // hash \u6570\u7ec4\u5927\u5c0f unsigned long size ; // \u54c8\u5e0c\u8868\u5927\u5c0f\u63a9\u7801\uff0c\u7b49\u4e8esize-1 unsigned long sizemask ; // hash \u6570\u7ec4\u5df2\u4f7f\u7528\u5927\u5c0f unsigned long used ; } dictht ; dictEntry - hash \u8282\u70b9 typedef struct dictEntry { // \u5143\u7d20 key void * key ; // \u5143\u7d20 value union { void * val ; uint64_t u64 ; int64_t s64 ; double d ; } v ; // \u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u5730\u5740 struct dictEntry * next ; } dictEntry ; \u8fed\u4ee3\u5668 typedef struct dictIterator { // dict dict * d ; // long index ; // hashTable \u6807\u5fd7(0/1)\uff1b\u5b89\u5168\u6807\u5fd7 int table , safe ; // \u5f53\u524dentrey\u3001\u94fe\u8868\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9 dictEntry * entry , * nextEntry ; // dict \u6307\u7eb9 long long fingerprint ; } dictIterator ; Redis-HashTable-Interfaces dict \u521b\u5efa - dictCreate // \u521b\u5efa\u65b0\u7684dict dict * dictCreate ( dictType * type , void * privDataPtr ) { // \u5206\u914d\u521d\u59cb\u5185\u5b58\u7a7a\u95f4 dict * d = zmalloc ( sizeof ( * d )); // \u521d\u59cb\u5316 _dictInit ( d , type , privDataPtr ); // \u8fd4\u56dedict\u6307\u9488 return d ; } // dict \u521d\u59cb\u5316 int _dictInit ( dict * d , dictType * type , void * privDataPtr ) { // hashtable \u521d\u59cb\u5316 _dictReset ( & d -> ht [ 0 ]); _dictReset ( & d -> ht [ 1 ]); d -> type = type ; d -> privdata = privDataPtr ; d -> rehashidx = -1 ; d -> iterators = 0 ; return DICT_OK ; } static void _dictReset ( dictht * ht ) { ht -> table = NULL ; ht -> size = 0 ; ht -> sizemask = 0 ; ht -> used = 0 ; } key \u63d2\u5165 1\uff1adictAddRaw \u67e5\u8be2 key \u7684 bucket \u5e76\u63d2\u5165 dictEntry \u5f53 key \u5df2\u5b58\u5728\u65f6\uff0c\u629b\u51fa\u5f02\u5e38 dictEntry * dictAddRaw ( dict * d , void * key , dictEntry ** existing ) { long index ; dictEntry * entry ; dictht * ht ; // rehash\u68c0\u67e5\u53ca\u534f\u52a9 if ( dictIsRehashing ( d )) _dictRehashStep ( d ); // \u8ba1\u7b97key\u7684\u63d2\u5165\u7d22\u5f15\uff0c\u5982\u679ckey\u5df2\u5b58\u5728\uff0c\u5219\u8fd4\u56de-1 if (( index = _dictKeyIndex ( d , key , dictHashKey ( d , key ), existing )) == -1 ) return NULL ; // \u5224\u65ad\u64cd\u4f5c\u7684hashtable\uff0crehash\u4e2d\u7684\u63d2\u5165\u64cd\u4f5c\u76ee\u6807\u662fht[1] ht = dictIsRehashing ( d ) ? & d -> ht [ 1 ] : & d -> ht [ 0 ]; // \u65b0\u8282\u70b9\u5185\u5b58\u5206\u914d entry = zmalloc ( sizeof ( * entry )); // \u62c9\u94fe\u6cd5\u89e3\u51b3\u51b2\u7a81\uff0c\u9996\u8282\u70b9\u63d2\u5165 entry -> next = ht -> table [ index ]; ht -> table [ index ] = entry ; ht -> used ++ ; // \u8bbe\u7f6evalue dictSetKey ( d , entry , key ); return entry ; } // \u8282\u70b9 bucket \u5b9a\u4f4d static long _dictKeyIndex ( dict * d , const void * key , uint64_t hash , dictEntry ** existing ) { unsigned long idx , table ; dictEntry * he ; if ( existing ) * existing = NULL ; // \u6269\u5bb9\u68c0\u67e5 if ( _dictExpandIfNeeded ( d ) == DICT_ERR ) return -1 ; for ( table = 0 ; table <= 1 ; table ++ ) { // \u8ba1\u7b97index idx = hash & d -> ht [ table ]. sizemask ; he = d -> ht [ table ]. table [ idx ]; // key\u51b2\u7a81\u65f6\uff0c\u9700\u8981\u6bd4\u8f83\u94fe\u8868\u4e2d\u7684key\uff0c\u5224\u65adkey\u662f\u5426\u5df2\u5b58\u5728 while ( he ) { if ( key == he -> key || dictCompareKeys ( d , key , he -> key )) { if ( existing ) * existing = he ; return -1 ; } he = he -> next ; } // \u4e0d\u5728rehash\u8fc7\u7a0b\u4e2d\u65f6\uff0c\u53ea\u5728ht[0]\u4e2d\u5b9a\u4f4d bucket \u5373\u53ef if ( ! dictIsRehashing ( d )) break ; } return idx ; } // \u6269\u5bb9\u68c0\u67e5 static int _dictExpandIfNeeded ( dict * d ) { // rehash\u68c0\u67e5 if ( dictIsRehashing ( d )) return DICT_OK ; // \u672a\u521d\u59cb\u5316\u68c0\u67e5\uff0c\u5b8c\u6210\u521d\u59cb\u5316 if ( d -> ht [ 0 ]. size == 0 ) return dictExpand ( d , DICT_HT_INITIAL_SIZE ); // \u5f53\u5df2\u4f7f\u7528\u8282\u70b9\u5927\u4e8ehashtable\u5927\u5c0f\uff0c\u5e76\u4e14\u5141\u8bb8\u6269\u5bb9\u6216\u8005\u4f7f\u7528\u8282\u70b9\u5927\u4e8ehashtable\u5927\u5c0f\u76845\u500d\u65f6\uff0c\u5141\u8bb8\u6269\u5bb9 if ( d -> ht [ 0 ]. used >= d -> ht [ 0 ]. size && ( dict_can_resize || d -> ht [ 0 ]. used / d -> ht [ 0 ]. size > dict_force_resize_ratio )) { return dictExpand ( d , d -> ht [ 0 ]. used * 2 ); } return DICT_OK ; } key \u63d2\u5165 2\uff1adictAddOrFind dictEntry * dictAddOrFind ( dict * d , void * key ) { dictEntry * entry , * existing ; // key\u63d2\u5165 entry = dictAddRaw ( d , key , & existing ); // key\u4e0d\u5b58\u5728\uff0c\u8fd4\u56de\u65b0\u589e\u7684entry\uff1b\u5426\u5219\u8fd4\u56de\u5df2\u5b58\u5728entry return entry ? entry : existing ; } key-value \u63d2\u5165\uff1adictAdd int dictAdd ( dict * d , void * key , void * val ) { // key \u63d2\u5165 dictEntry * entry = dictAddRaw ( d , key , NULL ); // \u5224\u65adkey\u5df2\u5b58\u5728 if ( ! entry ) return DICT_ERR ; // set value dictSetVal ( d , entry , val ); return DICT_OK ; } \u63d2\u5165\u6216\u66ff\u6362\uff1adictReplace int dictReplace ( dict * d , void * key , void * val ) { dictEntry * entry , * existing , auxentry ; // \u5f53key\u4e0d\u5b58\u5728\u65f6\u63d2\u5165\u65b0\u8282\u70b9\uff0c\u5426\u5219\u8fd4\u56de\u5df2\u5b58\u5728\u8282\u70b9 entry = dictAddRaw ( d , key , & existing ); // key \u4e0d\u5b58\u5728\uff0cset value if ( entry ) { dictSetVal ( d , entry , val ); return 1 ; } // key \u5df2\u5b58\u5728\uff0c\u66ff\u6362value\uff0c\u91ca\u653e\u65e7\u503c auxentry = * existing ; dictSetVal ( d , existing , val ); dictFreeVal ( d , & auxentry ); return 0 ; } key \u5220\u9664 1\uff1adictDelete \u5220\u9664 key\uff0c\u5f53 key \u4e0d\u5b58\u5728\u65f6\uff0c\u8fd4\u56de DICT_ERR int dictDelete ( dict * ht , const void * key ) { return dictGenericDelete ( ht , key , 0 ) ? DICT_OK : DICT_ERR ; } key \u5220\u9664 2\uff1adictUnlink \u5220\u9664 key \u5bf9\u5e94\u8282\u70b9\uff0c\u5f53 key \u4e0d\u5b58\u5728\u65f6\uff0c\u8fd4\u56de DICT_ERR \u5f53 key \u5b58\u5728\u65f6\uff0c\u5220\u9664\u8282\u70b9\uff0c\u8fd4\u56de entry\uff1b\u4f46\u4e0d\u505a free \u64cd\u4f5c\uff0c\u9700\u8981 client \u63a7\u5236 free\uff1b\u914d\u5408 dictFreeUnlinkedEntry \u65b9\u6cd5\u4f7f\u7528 dictEntry * dictUnlink ( dict * ht , const void * key ) { return dictGenericDelete ( ht , key , 1 ); } // Search and remove an element static dictEntry * dictGenericDelete ( dict * d , const void * key , int nofree ) { uint64_t h , idx ; dictEntry * he , * prevHe ; int table ; // \u7a7ahashtable\u68c0\u67e5 if ( d -> ht [ 0 ]. used == 0 && d -> ht [ 1 ]. used == 0 ) return NULL ; // \u534f\u52a9rehash if ( dictIsRehashing ( d )) _dictRehashStep ( d ); // \u8ba1\u7b97hash h = dictHashKey ( d , key ); for ( table = 0 ; table <= 1 ; table ++ ) { idx = h & d -> ht [ table ]. sizemask ; he = d -> ht [ table ]. table [ idx ]; prevHe = NULL ; while ( he ) { if ( key == he -> key || dictCompareKeys ( d , key , he -> key )) { // \u94fe\u8868\u8282\u70b9\u5220\u9664 if ( prevHe ) prevHe -> next = he -> next ; else d -> ht [ table ]. table [ idx ] = he -> next ; // \u6839\u636e\u5165\u53c2\u505a free \u64cd\u4f5c if ( ! nofree ) { dictFreeKey ( d , he ); dictFreeVal ( d , he ); zfree ( he ); } d -> ht [ table ]. used -- ; return he ; } prevHe = he ; he = he -> next ; } // \u4e0d\u5728 rehash \u8fc7\u7a0b\u4e2d\uff0c\u53ea\u9700\u8981\u64cd\u4f5cht[0] if ( ! dictIsRehashing ( d )) break ; } // \u672a\u627e\u5230 return NULL ; } \u8282\u70b9 free \uff1adictFreeUnlinkedEntry void dictFreeUnlinkedEntry ( dict * d , dictEntry * he ) { if ( he == NULL ) return ; dictFreeKey ( d , he ); dictFreeVal ( d , he ); zfree ( he ); } dict clean\uff1adictRelease void dictRelease ( dict * d ) { // hashtable \u8282\u70b9\u53ca\u7a7a\u95f4\u91ca\u653e _dictClear ( d , & d -> ht [ 0 ], NULL ); _dictClear ( d , & d -> ht [ 1 ], NULL ); // dict \u7a7a\u95f4\u91ca\u653e zfree ( d ); } // hashtable clean int _dictClear ( dict * d , dictht * ht , void ( callback )( void * )) { unsigned long i ; // \u91ca\u653e\u6bcf\u4e00\u4e2a\u8282\u70b9 for ( i = 0 ; i < ht -> size && ht -> used > 0 ; i ++ ) { dictEntry * he , * nextHe ; // \u6267\u884c hook \u65b9\u6cd5 if ( callback && ( i & 65535 ) == 0 ) callback ( d -> privdata ); if (( he = ht -> table [ i ]) == NULL ) continue ; while ( he ) { nextHe = he -> next ; dictFreeKey ( d , he ); dictFreeVal ( d , he ); zfree ( he ); ht -> used -- ; he = nextHe ; } } // hashtable\u7a7a\u95f4\u91ca\u653e zfree ( ht -> table ); // hashtable \u5b57\u6bb5\u521d\u59cb\u5316 _dictReset ( ht ); return DICT_OK ; } key \u67e5\u8be2\uff1adictFind dictEntry * dictFind ( dict * d , const void * key ) { dictEntry * he ; uint64_t h , idx , table ; // empty check if ( dictSize ( d ) == 0 ) return NULL ; // help rehash if ( dictIsRehashing ( d )) _dictRehashStep ( d ); // calculate hash h = dictHashKey ( d , key ); // find dictEntry for ( table = 0 ; table <= 1 ; table ++ ) { idx = h & d -> ht [ table ]. sizemask ; he = d -> ht [ table ]. table [ idx ]; while ( he ) { if ( key == he -> key || dictCompareKeys ( d , key , he -> key )) return he ; he = he -> next ; } if ( ! dictIsRehashing ( d )) return NULL ; } return NULL ; } key \u67e5\u8be2 value\uff1adictFetchValue void * dictFetchValue ( dict * d , const void * key ) { dictEntry * he ; // find key entry he = dictFind ( d , key ); // return entry's value return he ? dictGetVal ( he ) : NULL ; } \u6700\u5c0f\u5316\u6269\u5bb9\uff1adictResize int dictResize ( dict * d ) { unsigned long minimal ; // \u5224\u65ad\u662f\u5426\u5141\u8bb8\u6269\u5bb9\u3001\u662f\u5426\u5728rehash\u4e2d if ( ! dict_can_resize || dictIsRehashing ( d )) return DICT_ERR ; // \u83b7\u53d6\u6700\u5c0f\u4f7f\u7528\u7a7a\u95f4 minimal = d -> ht [ 0 ]. used ; if ( minimal < DICT_HT_INITIAL_SIZE ) minimal = DICT_HT_INITIAL_SIZE ; // dictExpand \u6269\u5bb9 return dictExpand ( d , minimal ); } dict \u6269\u5bb9 - dictExpand int dictExpand ( dict * d , unsigned long size ) { // \u68c0\u67e5\u662f\u5426\u5728rehash\u4e2d\uff0c\u6216\u8005\u5df2\u5b58\u5728\u8282\u70b9\u5927\u4e8ehashtable\u5927\u5c0f if ( dictIsRehashing ( d ) || d -> ht [ 0 ]. used > size ) return DICT_ERR ; // \u521d\u59cb\u5316\u65b0\u7684hashtable dictht n ; // \u8ba1\u7b97\u65b0hashtable\u5927\u5c0f unsigned long realsize = _dictNextPower ( size ); // \u5927\u5c0f\u68c0\u67e5 if ( realsize == d -> ht [ 0 ]. size ) return DICT_ERR ; // \u5206\u914d\u7a7a\u95f4\u53ca\u521d\u59cb\u5316 n . size = realsize ; n . sizemask = realsize -1 ; n . table = zcalloc ( realsize * sizeof ( dictEntry * )); n . used = 0 ; // \u68c0\u67e5hashtable\u9996\u6b21\u5206\u914d\u7a7a\u95f4 if ( d -> ht [ 0 ]. table == NULL ) { d -> ht [ 0 ] = n ; return DICT_OK ; } // \u6269\u5bb9\u5b8c\u6210\uff0c\u51c6\u5907reHash d -> ht [ 1 ] = n ; d -> rehashidx = 0 ; return DICT_OK ; } \u83b7\u53d6\u8fed\u4ee3\u5668\uff1adictGetIterator dictIterator * dictGetIterator ( dict * d ) { // \u8fed\u4ee3\u5668\u521d\u59cb\u5316 dictIterator * iter = zmalloc ( sizeof ( * iter )); iter -> d = d ; iter -> table = 0 ; iter -> index = -1 ; iter -> safe = 0 ; iter -> entry = NULL ; iter -> nextEntry = NULL ; return iter ; } \u83b7\u53d6 safe \u8fed\u4ee3\u5668\uff1adictGetSafeIterator dictIterator * dictGetSafeIterator ( dict * d ) { // \u8fed\u4ee3\u5668\u521d\u59cb\u5316 dictIterator * i = dictGetIterator ( d ); // \u8bbe\u7f6e\u5b89\u5168\u6807\u5fd7 i -> safe = 1 ; return i ; } \u8fed\u4ee3\u5668\u904d\u5386\uff1adictNext \u5b8c\u6210\u4e24\u4e2a hashtable \u7684\u904d\u5386 \u5b8c\u6210\u51b2\u7a81\u8282\u70b9\u7684\u94fe\u8868\u904d\u5386 dictEntry * dictNext ( dictIterator * iter ) { while ( 1 ) { if ( iter -> entry == NULL ) { dictht * ht = & iter -> d -> ht [ iter -> table ]; // \u7b2c\u4e00\u6b21\u904d\u5386 if ( iter -> index == -1 && iter -> table == 0 ) { if ( iter -> safe ) // \u8fed\u4ee3\u5668\u6570\u91cf+1 iter -> d -> iterators ++ ; else // \u8bb0\u5f55dict\u6307\u7eb9 iter -> fingerprint = dictFingerprint ( iter -> d ); } iter -> index ++ ; // \u68c0\u67e5\u904d\u5386\u7d22\u5f15\u5927\u4e8e buckets \u6570\u91cf if ( iter -> index >= ( long ) ht -> size ) { // rehash \u4e2d\u68c0\u67e5\uff0c\u7ee7\u7eed\u904d\u5386ht[1] if ( dictIsRehashing ( iter -> d ) && iter -> table == 0 ) { iter -> table ++ ; iter -> index = 0 ; ht = & iter -> d -> ht [ 1 ]; } else { break ; } } iter -> entry = ht -> table [ iter -> index ]; } else { iter -> entry = iter -> nextEntry ; } if ( iter -> entry ) { // \u8bbe\u7f6e nextEntry iter -> nextEntry = iter -> entry -> next ; return iter -> entry ; } } return NULL ; } \u8fed\u4ee3\u5668\u5220\u9664\uff1adictReleaseIterator void dictReleaseIterator ( dictIterator * iter ) { // \u68c0\u67e5\u8fed\u4ee3\u5668\u662f\u5426\u4f7f\u7528 if ( ! ( iter -> index == -1 && iter -> table == 0 )) { if ( iter -> safe ) // \u8fed\u4ee3\u5668\u6570\u91cf-1 iter -> d -> iterators -- ; else // \u68c0\u67e5\u6307\u7eb9\u5bf9\u6bd4 assert ( iter -> fingerprint == dictFingerprint ( iter -> d )); } zfree ( iter ); } \u83b7\u53d6\u968f\u673a key\uff1adictGetRandomKey dictEntry * dictGetRandomKey ( dict * d ) { dictEntry * he , * orighe ; unsigned long h ; int listlen , listele ; // empty check if ( dictSize ( d ) == 0 ) return NULL ; // help rehash if ( dictIsRehashing ( d )) _dictRehashStep ( d ); if ( dictIsRehashing ( d )) { // \u5728 rehash \u8fc7\u7a0b\u4e2d\u65f6 do { // \u968f\u673a\u4e00\u4e2a\u5927\u4e8e rehashidx\uff0c\u5c0f\u4e8e ht[1] \u5927\u5c0f\u7684\u503c\uff0c\u627e\u5230\u975e\u7a7a bucket h = d -> rehashidx + ( random () % ( d -> ht [ 0 ]. size + d -> ht [ 1 ]. size - d -> rehashidx )); he = ( h >= d -> ht [ 0 ]. size ) ? d -> ht [ 1 ]. table [ h - d -> ht [ 0 ]. size ] : d -> ht [ 0 ]. table [ h ]; } while ( he == NULL ); } else { // \u4e0d\u5728 rehash \u8fc7\u7a0b\u4e2d\u65f6\uff0c\u5728 ht[0] buckets \u8303\u56f4\u5185\u968f\u673a\u627e\u5230\u4e00\u4e2a\u975e\u7a7a\u8282\u70b9 do { h = random () & d -> ht [ 0 ]. sizemask ; he = d -> ht [ 0 ]. table [ h ]; } while ( he == NULL ); } listlen = 0 ; orighe = he ; // \u7edf\u8ba1\u94fe\u8868\u957f\u5ea6 while ( he ) { he = he -> next ; listlen ++ ; } // \u968f\u673a\u4e00\u4e2a\u5c0f\u4e8e\u94fe\u8868\u957f\u5ea6\u7684\u503c listele = random () % listlen ; he = orighe ; // \u5b9a\u4f4d\u8fd9\u4e2a\u503c while ( listele -- ) he = he -> next ; return he ; } \u6279\u91cf\u83b7\u53d6\u968f\u673a key\uff1adictGetSomeKeys \u4e0d\u4fdd\u8bc1\u8fd4\u56de\u6307\u5b9a\u6570\u91cf\u7684\u968f\u673a\u8282\u70b9\uff0c\u4e5f\u4e0d\u4fdd\u8bc1\u4e0d\u8fd4\u56de\u91cd\u590d\u8282\u70b9 unsigned int dictGetSomeKeys ( dict * d , dictEntry ** des , unsigned int count ) { unsigned long j ; unsigned long tables ; unsigned long stored = 0 , maxsizemask ; unsigned long maxsteps ; // \u68c0\u67e5 count \u662f\u5426\u5927\u4e8e \u4e24\u4e2a hashtable \u957f\u5ea6\u4e4b\u548c if ( dictSize ( d ) < count ) count = dictSize ( d ); // \u521d\u59cb\u5316\u6700\u5927\u67e5\u627e\u6b21\u6570 maxsteps = count * 10 ; // \u534f\u52a9 rehash for ( j = 0 ; j < count ; j ++ ) { if ( dictIsRehashing ( d )) _dictRehashStep ( d ); else break ; } // \u786e\u5b9a hashtable \u67e5\u8be2\u6570\u91cf\u8303\u56f4 tables = dictIsRehashing ( d ) ? 2 : 1 ; // \u83b7\u53d6\u6700\u5927\u63a9\u7801 maxsizemask = d -> ht [ 0 ]. sizemask ; if ( tables > 1 && maxsizemask < d -> ht [ 1 ]. sizemask ) maxsizemask = d -> ht [ 1 ]. sizemask ; // \u8ba1\u7b97 bucket \u521d\u59cb\u4f4d\u7f6e unsigned long i = random () & maxsizemask ; // \u8fde\u7eed\u7a7a bucket \u7edf\u8ba1 unsigned long emptylen = 0 ; while ( stored < count && maxsteps -- ) { for ( j = 0 ; j < tables ; j ++ ) { // \u5982\u679c\u5728 rehash \u4e2d\uff0c\u5728 ht[0] \u4e2d 0 - rehashidx - 1 \u7684\u503c\u5df2\u7ecf\u5b8c\u6210\u8fc1\u79fb if ( tables == 2 && j == 0 && i < ( unsigned long ) d -> rehashidx ) { // \u68c0\u67e5\u521d\u59cb\u4f4d\u7f6e\u6709\u6548\u6027\uff0c\u5982\u679c\u8d8a\u754c\uff0c\u8d4b\u503c\u4e3a rehashidx if ( i >= d -> ht [ 1 ]. size ) i = d -> rehashidx ; else // \u5728ht[1] \u4e2d\u7ee7\u7eed continue ; } // index overflow \u68c0\u67e5 if ( i >= d -> ht [ j ]. size ) continue ; dictEntry * he = d -> ht [ j ]. table [ i ]; // \u68c0\u67e5 empty bucket if ( he == NULL ) { emptylen ++ ; // \u5982\u679c\u8fde\u7eed5\u4e2a\u7a7a bucket\uff0c\u5e76\u4e14\u5927\u4e8e\u76ee\u6807 entry \u6570\u91cf\uff0c\u91cd\u65b0\u8ba1\u7b97\u521d\u59cb bucket \u4f4d\u7f6e if ( emptylen >= 5 && emptylen > count ) { i = random () & maxsizemask ; emptylen = 0 ; } } else { emptylen = 0 ; // \u5c06\u94fe\u8868\u7684\u6240\u6709\u8282\u70b9\u653e\u5165\u7ed3\u679c\u96c6 while ( he ) { * des = he ; des ++ ; he = he -> next ; stored ++ ; if ( stored == count ) return stored ; } } } // \u8fde\u7eed\u9012\u589e\uff0c\u5e76\u4e14\u9632\u6b62\u8d8a\u754c i = ( i + 1 ) & maxsizemask ; } return stored ; } \u516c\u5e73\u83b7\u53d6\u968f\u673a key\uff1adictGetFairRandomKey dictEntry * dictGetFairRandomKey ( dict * d ) { // \u5b9a\u4e49\u7ed3\u679c\u96c6\uff0c\u9ed8\u8ba4\u957f\u5ea615 dictEntry * entries [ GETFAIR_NUM_ENTRIES ]; // \u83b7\u53d6\u968f\u673a\u8282\u70b9 unsigned int count = dictGetSomeKeys ( d , entries , GETFAIR_NUM_ENTRIES ); // \u7ed3\u679c\u96c6\u4e3a\u7a7a\uff0c\u5219\u8c03\u7528 dictGetRandomKey \u8fd4\u56de\u4e00\u4e2a\u968f\u673a\u8282\u70b9 if ( count == 0 ) return dictGetRandomKey ( d ); // \u6839\u636e\u7ed3\u679c\u96c6\u957f\u5ea6\uff0c\u968f\u673a\u8fd4\u56de\u4e00\u4e2a\u8282\u70b9 unsigned int idx = rand () % count ; return entries [ idx ]; } Debug \u63a5\u53e3\u83b7\u53d6 htstats\uff1a dictGetStats void dictGetStats ( char * buf , size_t bufsize , dict * d ) { size_t l ; char * orig_buf = buf ; size_t orig_bufsize = bufsize ; // \u83b7\u53d6 ht[0] \u72b6\u6001\u4fe1\u606f l = _dictGetStatsHt ( buf , bufsize , & d -> ht [ 0 ], 0 ); buf += l ; bufsize -= l ; // \u83b7\u53d6 ht[1] \u72b6\u6001\u4fe1\u606f if ( dictIsRehashing ( d ) && bufsize > 0 ) { _dictGetStatsHt ( buf , bufsize , & d -> ht [ 1 ], 1 ); } // set '\\0' \u4e3a buf \u5c3e\u5143\u7d20 if ( orig_bufsize ) orig_buf [ orig_bufsize -1 ] = '\\0' ; } // \u83b7\u53d6 hashtable \u72b6\u6001 size_t _dictGetStatsHt ( char * buf , size_t bufsize , dictht * ht , int tableid ) { unsigned long i , slots = 0 , chainlen , maxchainlen = 0 ; unsigned long totchainlen = 0 ; // \u94fe\u8868\u957f\u5ea6\u7edf\u8ba1 unsigned long clvector [ DICT_STATS_VECTLEN ]; size_t l = 0 ; // empty check if ( ht -> used == 0 ) { return snprintf ( buf , bufsize , \"No stats available for empty dictionaries \\n \" ); } // \u7ed3\u679c\u96c6\u521d\u59cb\u5316 for ( i = 0 ; i < DICT_STATS_VECTLEN ; i ++ ) clvector [ i ] = 0 ; for ( i = 0 ; i < ht -> size ; i ++ ) { dictEntry * he ; // \u7a7a bucket \u68c0\u67e5 if ( ht -> table [ i ] == NULL ) { clvector [ 0 ] ++ ; continue ; } // \u975e\u7a7a slot \u7edf\u8ba1 slots ++ ; // \u8ba1\u7b97\u94fe\u8868\u957f\u5ea6 chainlen = 0 ; he = ht -> table [ i ]; while ( he ) { chainlen ++ ; he = he -> next ; } // \u6839\u636e\u94fe\u8868\u957f\u5ea6\u7edf\u8ba1 key \u6570\u91cf clvector [( chainlen < DICT_STATS_VECTLEN ) ? chainlen : ( DICT_STATS_VECTLEN -1 )] ++ ; // \u8ba1\u7b97\u6700\u957f\u94fe\u8868 if ( chainlen > maxchainlen ) maxchainlen = chainlen ; // \u7edf\u8ba1\u94fe\u8868\u957f\u5ea6\u548c totchainlen += chainlen ; } // \u53ef\u8bfb\u4fe1\u606f\u751f\u6210\uff1ahashtable \u4fe1\u606f\u3001size\u3001\u4f7f\u7528\u6570\u91cf\u3001slots\u3001\u6700\u957f\u94fe\u8868\uff0c\u94fe\u8868\u8282\u70b9\u5360\u6bd4\u3001\u4f7f\u7528\u7387 l += snprintf ( buf + l , bufsize - l , \"Hash table %d stats (%s): \\n \" \" table size: %ld \\n \" \" number of elements: %ld \\n \" \" different slots: %ld \\n \" \" max chain length: %ld \\n \" \" avg chain length (counted): %.02f \\n \" \" avg chain length (computed): %.02f \\n \" \" Chain length distribution: \\n \" , tableid , ( tableid == 0 ) ? \"main hash table\" : \"rehashing target\" , ht -> size , ht -> used , slots , maxchainlen , ( float ) totchainlen / slots , ( float ) ht -> used / slots ); for ( i = 0 ; i < DICT_STATS_VECTLEN -1 ; i ++ ) { if ( clvector [ i ] == 0 ) continue ; if ( l >= bufsize ) break ; l += snprintf ( buf + l , bufsize - l , \" %s%ld: %ld (%.02f%%) \\n \" , ( i == DICT_STATS_VECTLEN -1 ) ? \">= \" : \"\" , i , clvector [ i ], (( float ) clvector [ i ] / ht -> size ) * 100 ); } /* Unlike snprintf(), teturn the number of characters actually written. */ if ( bufsize ) buf [ bufsize -1 ] = '\\0' ; return strlen ( buf ); } siphash hash \u751f\u6210\u51fd\u6570 dictGenHashFunction uint64_t dictGenHashFunction ( const void * key , int len ) { return siphash ( key , len , dict_hash_function_seed ); } siphash \u5927\u5c0f\u5199\u654f\u611f hash \u751f\u6210\u51fd\u6570 dictGenHashFunction uint64_t dictGenCaseHashFunction ( const unsigned char * buf , int len ) { return siphash_nocase ( buf , len , dict_hash_function_seed ); } \u6e05\u7a7a dict\uff1a dictEmpty void dictEmpty ( dict * d , void ( callback )( void * )) { // hashtable \u8282\u70b9\u53ca\u7a7a\u95f4\u91ca\u653e _dictClear ( d , & d -> ht [ 0 ], callback ); _dictClear ( d , & d -> ht [ 1 ], callback ); // \u91cd\u7f6e rehashidx \u53ca\u8fed\u4ee3\u5668\u8ba1\u6570 d -> rehashidx = -1 ; d -> iterators = 0 ; } \u542f\u7528 rehash\uff1adictEnableResize void dictEnableResize ( void ) { dict_can_resize = 1 ; } \u7981\u6b62 rehash\uff1adictEnableResize void dictDisableResize ( void ) { dict_can_resize = 0 ; } \u9650\u5236\u6b65\u6570 rehash\uff1adictRehash iterators \u8fed\u4ee3\u5668\u6570\u91cf\u5fc5\u987b\u4e3a 0 int dictRehash ( dict * d , int n ) { // \u6700\u5927\u7a7a bucket \u68c0\u6d4b\u6b21\u6570 int empty_visits = n * 10 ; // rehash \u4e2d\u68c0\u67e5 if ( ! dictIsRehashing ( d )) return 0 ; // step \u63a7\u5236 while ( n -- && d -> ht [ 0 ]. used != 0 ) { dictEntry * de , * nextde ; // rehashidx overflow check assert ( d -> ht [ 0 ]. size > ( unsigned long ) d -> rehashidx ); // \u67e5\u627e\u975e\u7a7a bucket while ( d -> ht [ 0 ]. table [ d -> rehashidx ] == NULL ) { d -> rehashidx ++ ; if ( -- empty_visits == 0 ) return 1 ; } // \u62ff\u5230 entry de = d -> ht [ 0 ]. table [ d -> rehashidx ]; // \u5904\u7406\u94fe\u8868\u4e2d\u7684\u6240\u6709entry while ( de ) { uint64_t h ; nextde = de -> next ; // \u8ba1\u7b97\u65b0\u7684 bucket \u4f4d\u7f6e h = dictHashKey ( d , de -> key ) & d -> ht [ 1 ]. sizemask ; // \u5934\u8282\u70b9\u63d2\u5165 de -> next = d -> ht [ 1 ]. table [ h ]; d -> ht [ 1 ]. table [ h ] = de ; d -> ht [ 0 ]. used -- ; d -> ht [ 1 ]. used ++ ; de = nextde ; } // \u65e7\u7684 bucket \u7f6e\u7a7a d -> ht [ 0 ]. table [ d -> rehashidx ] = NULL ; // rehash \u4f4d\u7f6e+1 d -> rehashidx ++ ; } // rehash \u5b8c\u6210\u68c0\u67e5 if ( d -> ht [ 0 ]. used == 0 ) { // \u91ca\u653e\u65e7\u7684 hashtable zfree ( d -> ht [ 0 ]. table ); // \u4f7f\u7528\u6269\u5bb9\u540e\u7684 hashtable \u66ff\u6362\u65e7\u7684 hashtable d -> ht [ 0 ] = d -> ht [ 1 ]; // ht[1] \u91cd\u7f6e _dictReset ( & d -> ht [ 1 ]); // rehash \u6807\u5fd7\u91cd\u7f6e d -> rehashidx = -1 ; return 0 ; } return 1 ; } \u9650\u65f6 rehash\uff1adictRehashMilliseconds int dictRehashMilliseconds ( dict * d , int ms ) { // \u8fed\u4ee3\u4e2d\uff0c if ( d -> iterators > 0 ) return 0 ; // \u83b7\u53d6 rehash \u5f00\u59cb\u65f6\u95f4 long long start = timeInMilliseconds (); int rehashes = 0 ; // \u6267\u884c100\u6b21 rehash while ( dictRehash ( d , 100 )) { rehashes += 100 ; // \u8d85\u65f6\u68c0\u67e5 if ( timeInMilliseconds () - start > ms ) break ; } // \u8fd4\u56de rehash \u6b21\u6570 return rehashes ; } long long timeInMilliseconds ( void ) { struct timeval tv ; gettimeofday ( & tv , NULL ); return ((( long long ) tv . tv_sec ) * 1000 ) + ( tv . tv_usec / 1000 ); } \u8bbe\u7f6e hash \u51fd\u6570\u79cd\u5b50\uff1adictSetHashFunctionSeed static uint8_t dict_hash_function_seed [ 16 ]; void dictSetHashFunctionSeed ( uint8_t * seed ) { memcpy ( dict_hash_function_seed , seed , sizeof ( dict_hash_function_seed )); } \u83b7\u53d6 hash \u51fd\u6570\u79cd\u5b50\uff1adictGetHashFunctionSeed uint8_t * dictGetHashFunctionSeed ( void ) { return dict_hash_function_seed ; } dict \u626b\u63cf\uff1adictScan dictScan() \u7528\u4e8e\u904d\u5386\u5b57\u5178\u7684\u6240\u6709\u5143\u7d20 \u5f00\u59cb\u904d\u5386\u90a3\u4e00\u523b\u7684\u6240\u6709\u5143\u7d20\uff0c\u53ea\u8981\u4e0d\u88ab\u5220\u9664\uff0c\u80af\u5b9a\u80fd\u88ab\u904d\u5386\u5230\uff0c\u4e0d\u7ba1\u5b57\u5178\u6269\u5c55\u8fd8\u662f\u7f29\u5c0f \u53ef\u80fd\u4f1a\u8fd4\u56de\u91cd\u590d\u5143\u7d20\uff0c\u4f46\u662f\u5df2\u7ecf\u628a\u8fd4\u56de\u91cd\u590d\u5143\u7d20\u7684\u53ef\u80fd\u6027\u964d\u5230\u4e86\u6700\u4f4e /* \u5bf9 v \u8fdb\u884c\u4e8c\u8fdb\u5236\u9006\u5e8f\u64cd\u4f5c http://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel */ static unsigned long rev ( unsigned long v ) { unsigned long s = CHAR_BIT * sizeof ( v ); // bit size; must be power of 2 unsigned long mask = ~ 0UL ; while (( s >>= 1 ) > 0 ) { mask ^= ( mask << s ); v = (( v >> s ) & mask ) | (( v << s ) & ~ mask ); } return v ; } /* \u5b57\u5178\u904d\u5386 v\uff1a \u8981\u904d\u5386\u7684 bucket \u7d22\u5f15 */ unsigned long dictScan ( dict * d , unsigned long v , dictScanFunction * fn , dictScanBucketFunction * bucketfn , void * privdata ) { dictht * t0 , * t1 ; const dictEntry * de , * next ; unsigned long m0 , m1 ; // empty check if ( dictSize ( d ) == 0 ) return 0 ; // \u8fed\u4ee3\u5668\u6570\u91cf+1\uff0c\u9632\u6b62 rehash d -> iterators ++ ; // \u5982\u679c\u4e0d\u5728 rehash \u4e2d if ( ! dictIsRehashing ( d )) { t0 = & ( d -> ht [ 0 ]); m0 = t0 -> sizemask ; // bucket callback if ( bucketfn ) bucketfn ( privdata , & t0 -> table [ v & m0 ]); de = t0 -> table [ v & m0 ]; // bucket \u94fe\u8868\u904d\u5386 while ( de ) { next = de -> next ; fn ( privdata , de ); // \u94fe\u8868\u8282\u70b9 callback de = next ; } v |= ~ m0 ; // \u4fdd\u7559 v \u7684\u4f4e n \u4f4d\u6570\uff0c\u5176\u4f59\u4f4d\u5168\u7f6e\u4e3a 1 // [\u4e8c\u8fdb\u5236\u53cd\u8f6c](http://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel) v = rev ( v ); // \u5c06 v \u7684\u4e8c\u8fdb\u5236\u4f4d\u8fdb\u884c\u7ffb\u8f6c\uff0c\u6240\u4ee5\uff0cv\u7684\u4f4e n \u4f4d\u6570\u6210\u4e86\u9ad8 n \u4f4d\u6570\uff0c\u5e76\u4e14\u8fdb\u884c\u4e86\u7ffb\u8f6c v ++ ; // \u81ea\u589e v = rev ( v ); // \u518d\u6b21\u4e8c\u8fdb\u5236\u7ffb\u8f6c } else { // \u5728 rehash \u8fc7\u7a0b\u4e2d t0 = & d -> ht [ 0 ]; t1 = & d -> ht [ 1 ]; // \u786e\u4fdd t0 \u957f\u5ea6\u5c0f\u4e8e t1 if ( t0 -> size > t1 -> size ) { t0 = & d -> ht [ 1 ]; t1 = & d -> ht [ 0 ]; } m0 = t0 -> sizemask ; m1 = t1 -> sizemask ; // bucket callback if ( bucketfn ) bucketfn ( privdata , & t0 -> table [ v & m0 ]); de = t0 -> table [ v & m0 ]; // bucket \u94fe\u8868\u904d\u5386 while ( de ) { next = de -> next ; fn ( privdata , de ); // \u94fe\u8868\u8282\u70b9 callback de = next ; } // \u5927\u7684 hashtable t1 \u904d\u5386 do { if ( bucketfn ) bucketfn ( privdata , & t1 -> table [ v & m1 ]); // bucket callback de = t1 -> table [ v & m1 ]; // bucket \u94fe\u8868\u904d\u5386 while ( de ) { next = de -> next ; fn ( privdata , de ); // \u94fe\u8868\u8282\u70b9 callback de = next ; } v |= ~ m1 ; // \u4fdd\u7559 v \u7684\u4f4e n \u4f4d\u6570\uff0c\u5176\u4f59\u4f4d\u5168\u7f6e\u4e3a 1 v = rev ( v ); // \u5c06 v \u7684\u4e8c\u8fdb\u5236\u4f4d\u8fdb\u884c\u7ffb\u8f6c\uff0c\u6240\u4ee5\uff0cv\u7684\u4f4e n \u4f4d\u6570\u6210\u4e86\u9ad8 n \u4f4d\u6570\uff0c\u5e76\u4e14\u8fdb\u884c\u4e86\u7ffb\u8f6c v ++ ; // \u81ea\u589e v = rev ( v ); // \u518d\u6b21\u4e8c\u8fdb\u5236\u7ffb\u8f6c // \u76f4\u5230 v \u7684\u4f4e m1-m0 \u4f4d\u5230\u4f4e m1 \u4f4d\u4e4b\u95f4\u5168\u90e8\u4e3a 0 \u4e3a\u6b62 } while ( v & ( m0 ^ m1 )); } // \u8fed\u4ee3\u5668\u6570\u91cf-1 d -> iterators -- ; return v ; } \u8ba1\u7b97 hash\uff1a dictGetHash \u4f7f\u7528\u7684 hash \u51fd\u6570\u4e3a\u521d\u59cb\u5316 dict \u65f6\u8bbe\u7f6e\u7684 hash \u51fd\u6570 uint64_t dictGetHash ( dict * d , const void * key ) { return dictHashKey ( d , key ); } \u6839\u636e\u6307\u9488\u548c hash \u67e5\u8be2 entry\uff1a dictFindEntryRefByPtrAndHash dictEntry ** dictFindEntryRefByPtrAndHash ( dict * d , const void * oldptr , uint64_t hash ) { dictEntry * he , ** heref ; unsigned long idx , table ; // empty check if ( dictSize ( d ) == 0 ) return NULL ; for ( table = 0 ; table <= 1 ; table ++ ) { // \u8ba1\u7b97 slot idx = hash & d -> ht [ table ]. sizemask ; heref = & d -> ht [ table ]. table [ idx ]; he = * heref ; // \u94fe\u8868\u8282\u70b9\u67e5\u8be2 while ( he ) { // \u901a\u8fc7\u6307\u9488\u5bf9\u6bd4\u4ee3\u66ff key \u5bf9\u6bd4 if ( oldptr == he -> key ) return heref ; heref = & he -> next ; he = * heref ; } // \u975e rehash \u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u9700\u8981\u67e5\u8be2 ht[1] if ( ! dictIsRehashing ( d )) return NULL ; } return NULL ; }","title":"HashTable"},{"location":"Redis/HashTable/#hashtable","text":"","title":"HashTable"},{"location":"Redis/HashTable/#_1","text":"Redis-HashTable-\u63a5\u53e3","title":"\u76ee\u5f55"},{"location":"Redis/HashTable/#_2","text":"dict.h dict.c","title":"\u6e90\u7801"},{"location":"Redis/HashTable/#dicttype","text":"\u5b9a\u4e49\u4e00\u7ec4 key-value \u7684\u64cd\u4f5c\u51fd\u6570\u6a21\u7248 typedef struct dictType { // \u8ba1\u7b97hash\u7684\u51fd\u6570 uint64_t ( * hashFunction )( const void * key ); // key \u590d\u5236\u51fd\u6570\uff0c\u4e00\u822c\u4f7f\u7528NULL void * ( * keyDup )( void * privdata , const void * key ); // value \u590d\u5236\u51fd\u6570\uff0c\u4e00\u822c\u4f7f\u7528NULL void * ( * valDup )( void * privdata , const void * obj ); // key \u6bd4\u8f83\u51fd\u6570 int ( * keyCompare )( void * privdata , const void * key1 , const void * key2 ); // key \u91ca\u653e\u51fd\u6570 void ( * keyDestructor )( void * privdata , void * key ); // value \u91ca\u653e\u51fd\u6570 void ( * valDestructor )( void * privdata , void * obj ); } dictType ;","title":"dictType"},{"location":"Redis/HashTable/#dict-","text":"typedef struct dict { // key-value \u64cd\u4f5c\u51fd\u6570\u7ec4 dictType * type ; // \u79c1\u6709\u6570\u636e\uff0c\u7528\u5728\u7279\u5b9a hooks \u51fd\u6570\u4e2d void * privdata ; // hashTable, ht[1] \u6269\u5bb9\u4e2d\u7684hashTable, ht[0] \u65e7\u7684hashTable dictht ht [ 2 ]; // rehash \u6807\u5fd7\uff0c\u9ed8\u8ba4\u4e3a-1\uff08\u672a\u5728\u6269\u5bb9\u4e2d\uff09 long rehashidx ; // \u8fed\u4ee3\u5668\u6570\u91cf unsigned long iterators ; } dict ;","title":"dict - \u5b57\u5178\u7ed3\u6784"},{"location":"Redis/HashTable/#dictht-hashtable","text":"typedef struct dictht { // hash \u6570\u7ec4 dictEntry ** table ; // hash \u6570\u7ec4\u5927\u5c0f unsigned long size ; // \u54c8\u5e0c\u8868\u5927\u5c0f\u63a9\u7801\uff0c\u7b49\u4e8esize-1 unsigned long sizemask ; // hash \u6570\u7ec4\u5df2\u4f7f\u7528\u5927\u5c0f unsigned long used ; } dictht ;","title":"dictht - hashTable \u7ed3\u6784"},{"location":"Redis/HashTable/#dictentry-hash","text":"typedef struct dictEntry { // \u5143\u7d20 key void * key ; // \u5143\u7d20 value union { void * val ; uint64_t u64 ; int64_t s64 ; double d ; } v ; // \u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u5730\u5740 struct dictEntry * next ; } dictEntry ;","title":"dictEntry - hash \u8282\u70b9"},{"location":"Redis/HashTable/#_3","text":"typedef struct dictIterator { // dict dict * d ; // long index ; // hashTable \u6807\u5fd7(0/1)\uff1b\u5b89\u5168\u6807\u5fd7 int table , safe ; // \u5f53\u524dentrey\u3001\u94fe\u8868\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9 dictEntry * entry , * nextEntry ; // dict \u6307\u7eb9 long long fingerprint ; } dictIterator ;","title":"\u8fed\u4ee3\u5668"},{"location":"Redis/HashTable/#redis-hashtable-interfaces","text":"","title":"Redis-HashTable-Interfaces"},{"location":"Redis/HashTable/#dict-dictcreate","text":"// \u521b\u5efa\u65b0\u7684dict dict * dictCreate ( dictType * type , void * privDataPtr ) { // \u5206\u914d\u521d\u59cb\u5185\u5b58\u7a7a\u95f4 dict * d = zmalloc ( sizeof ( * d )); // \u521d\u59cb\u5316 _dictInit ( d , type , privDataPtr ); // \u8fd4\u56dedict\u6307\u9488 return d ; } // dict \u521d\u59cb\u5316 int _dictInit ( dict * d , dictType * type , void * privDataPtr ) { // hashtable \u521d\u59cb\u5316 _dictReset ( & d -> ht [ 0 ]); _dictReset ( & d -> ht [ 1 ]); d -> type = type ; d -> privdata = privDataPtr ; d -> rehashidx = -1 ; d -> iterators = 0 ; return DICT_OK ; } static void _dictReset ( dictht * ht ) { ht -> table = NULL ; ht -> size = 0 ; ht -> sizemask = 0 ; ht -> used = 0 ; }","title":"dict \u521b\u5efa - dictCreate"},{"location":"Redis/HashTable/#key-1dictaddraw","text":"\u67e5\u8be2 key \u7684 bucket \u5e76\u63d2\u5165 dictEntry \u5f53 key \u5df2\u5b58\u5728\u65f6\uff0c\u629b\u51fa\u5f02\u5e38 dictEntry * dictAddRaw ( dict * d , void * key , dictEntry ** existing ) { long index ; dictEntry * entry ; dictht * ht ; // rehash\u68c0\u67e5\u53ca\u534f\u52a9 if ( dictIsRehashing ( d )) _dictRehashStep ( d ); // \u8ba1\u7b97key\u7684\u63d2\u5165\u7d22\u5f15\uff0c\u5982\u679ckey\u5df2\u5b58\u5728\uff0c\u5219\u8fd4\u56de-1 if (( index = _dictKeyIndex ( d , key , dictHashKey ( d , key ), existing )) == -1 ) return NULL ; // \u5224\u65ad\u64cd\u4f5c\u7684hashtable\uff0crehash\u4e2d\u7684\u63d2\u5165\u64cd\u4f5c\u76ee\u6807\u662fht[1] ht = dictIsRehashing ( d ) ? & d -> ht [ 1 ] : & d -> ht [ 0 ]; // \u65b0\u8282\u70b9\u5185\u5b58\u5206\u914d entry = zmalloc ( sizeof ( * entry )); // \u62c9\u94fe\u6cd5\u89e3\u51b3\u51b2\u7a81\uff0c\u9996\u8282\u70b9\u63d2\u5165 entry -> next = ht -> table [ index ]; ht -> table [ index ] = entry ; ht -> used ++ ; // \u8bbe\u7f6evalue dictSetKey ( d , entry , key ); return entry ; } // \u8282\u70b9 bucket \u5b9a\u4f4d static long _dictKeyIndex ( dict * d , const void * key , uint64_t hash , dictEntry ** existing ) { unsigned long idx , table ; dictEntry * he ; if ( existing ) * existing = NULL ; // \u6269\u5bb9\u68c0\u67e5 if ( _dictExpandIfNeeded ( d ) == DICT_ERR ) return -1 ; for ( table = 0 ; table <= 1 ; table ++ ) { // \u8ba1\u7b97index idx = hash & d -> ht [ table ]. sizemask ; he = d -> ht [ table ]. table [ idx ]; // key\u51b2\u7a81\u65f6\uff0c\u9700\u8981\u6bd4\u8f83\u94fe\u8868\u4e2d\u7684key\uff0c\u5224\u65adkey\u662f\u5426\u5df2\u5b58\u5728 while ( he ) { if ( key == he -> key || dictCompareKeys ( d , key , he -> key )) { if ( existing ) * existing = he ; return -1 ; } he = he -> next ; } // \u4e0d\u5728rehash\u8fc7\u7a0b\u4e2d\u65f6\uff0c\u53ea\u5728ht[0]\u4e2d\u5b9a\u4f4d bucket \u5373\u53ef if ( ! dictIsRehashing ( d )) break ; } return idx ; } // \u6269\u5bb9\u68c0\u67e5 static int _dictExpandIfNeeded ( dict * d ) { // rehash\u68c0\u67e5 if ( dictIsRehashing ( d )) return DICT_OK ; // \u672a\u521d\u59cb\u5316\u68c0\u67e5\uff0c\u5b8c\u6210\u521d\u59cb\u5316 if ( d -> ht [ 0 ]. size == 0 ) return dictExpand ( d , DICT_HT_INITIAL_SIZE ); // \u5f53\u5df2\u4f7f\u7528\u8282\u70b9\u5927\u4e8ehashtable\u5927\u5c0f\uff0c\u5e76\u4e14\u5141\u8bb8\u6269\u5bb9\u6216\u8005\u4f7f\u7528\u8282\u70b9\u5927\u4e8ehashtable\u5927\u5c0f\u76845\u500d\u65f6\uff0c\u5141\u8bb8\u6269\u5bb9 if ( d -> ht [ 0 ]. used >= d -> ht [ 0 ]. size && ( dict_can_resize || d -> ht [ 0 ]. used / d -> ht [ 0 ]. size > dict_force_resize_ratio )) { return dictExpand ( d , d -> ht [ 0 ]. used * 2 ); } return DICT_OK ; }","title":"key \u63d2\u5165 1\uff1adictAddRaw"},{"location":"Redis/HashTable/#key-2dictaddorfind","text":"dictEntry * dictAddOrFind ( dict * d , void * key ) { dictEntry * entry , * existing ; // key\u63d2\u5165 entry = dictAddRaw ( d , key , & existing ); // key\u4e0d\u5b58\u5728\uff0c\u8fd4\u56de\u65b0\u589e\u7684entry\uff1b\u5426\u5219\u8fd4\u56de\u5df2\u5b58\u5728entry return entry ? entry : existing ; }","title":"key \u63d2\u5165 2\uff1adictAddOrFind"},{"location":"Redis/HashTable/#key-value-dictadd","text":"int dictAdd ( dict * d , void * key , void * val ) { // key \u63d2\u5165 dictEntry * entry = dictAddRaw ( d , key , NULL ); // \u5224\u65adkey\u5df2\u5b58\u5728 if ( ! entry ) return DICT_ERR ; // set value dictSetVal ( d , entry , val ); return DICT_OK ; }","title":"key-value \u63d2\u5165\uff1adictAdd"},{"location":"Redis/HashTable/#dictreplace","text":"int dictReplace ( dict * d , void * key , void * val ) { dictEntry * entry , * existing , auxentry ; // \u5f53key\u4e0d\u5b58\u5728\u65f6\u63d2\u5165\u65b0\u8282\u70b9\uff0c\u5426\u5219\u8fd4\u56de\u5df2\u5b58\u5728\u8282\u70b9 entry = dictAddRaw ( d , key , & existing ); // key \u4e0d\u5b58\u5728\uff0cset value if ( entry ) { dictSetVal ( d , entry , val ); return 1 ; } // key \u5df2\u5b58\u5728\uff0c\u66ff\u6362value\uff0c\u91ca\u653e\u65e7\u503c auxentry = * existing ; dictSetVal ( d , existing , val ); dictFreeVal ( d , & auxentry ); return 0 ; }","title":"\u63d2\u5165\u6216\u66ff\u6362\uff1adictReplace"},{"location":"Redis/HashTable/#key-1dictdelete","text":"\u5220\u9664 key\uff0c\u5f53 key \u4e0d\u5b58\u5728\u65f6\uff0c\u8fd4\u56de DICT_ERR int dictDelete ( dict * ht , const void * key ) { return dictGenericDelete ( ht , key , 0 ) ? DICT_OK : DICT_ERR ; }","title":"key \u5220\u9664 1\uff1adictDelete"},{"location":"Redis/HashTable/#key-2dictunlink","text":"\u5220\u9664 key \u5bf9\u5e94\u8282\u70b9\uff0c\u5f53 key \u4e0d\u5b58\u5728\u65f6\uff0c\u8fd4\u56de DICT_ERR \u5f53 key \u5b58\u5728\u65f6\uff0c\u5220\u9664\u8282\u70b9\uff0c\u8fd4\u56de entry\uff1b\u4f46\u4e0d\u505a free \u64cd\u4f5c\uff0c\u9700\u8981 client \u63a7\u5236 free\uff1b\u914d\u5408 dictFreeUnlinkedEntry \u65b9\u6cd5\u4f7f\u7528 dictEntry * dictUnlink ( dict * ht , const void * key ) { return dictGenericDelete ( ht , key , 1 ); } // Search and remove an element static dictEntry * dictGenericDelete ( dict * d , const void * key , int nofree ) { uint64_t h , idx ; dictEntry * he , * prevHe ; int table ; // \u7a7ahashtable\u68c0\u67e5 if ( d -> ht [ 0 ]. used == 0 && d -> ht [ 1 ]. used == 0 ) return NULL ; // \u534f\u52a9rehash if ( dictIsRehashing ( d )) _dictRehashStep ( d ); // \u8ba1\u7b97hash h = dictHashKey ( d , key ); for ( table = 0 ; table <= 1 ; table ++ ) { idx = h & d -> ht [ table ]. sizemask ; he = d -> ht [ table ]. table [ idx ]; prevHe = NULL ; while ( he ) { if ( key == he -> key || dictCompareKeys ( d , key , he -> key )) { // \u94fe\u8868\u8282\u70b9\u5220\u9664 if ( prevHe ) prevHe -> next = he -> next ; else d -> ht [ table ]. table [ idx ] = he -> next ; // \u6839\u636e\u5165\u53c2\u505a free \u64cd\u4f5c if ( ! nofree ) { dictFreeKey ( d , he ); dictFreeVal ( d , he ); zfree ( he ); } d -> ht [ table ]. used -- ; return he ; } prevHe = he ; he = he -> next ; } // \u4e0d\u5728 rehash \u8fc7\u7a0b\u4e2d\uff0c\u53ea\u9700\u8981\u64cd\u4f5cht[0] if ( ! dictIsRehashing ( d )) break ; } // \u672a\u627e\u5230 return NULL ; }","title":"key \u5220\u9664 2\uff1adictUnlink"},{"location":"Redis/HashTable/#free-dictfreeunlinkedentry","text":"void dictFreeUnlinkedEntry ( dict * d , dictEntry * he ) { if ( he == NULL ) return ; dictFreeKey ( d , he ); dictFreeVal ( d , he ); zfree ( he ); }","title":"\u8282\u70b9 free \uff1adictFreeUnlinkedEntry"},{"location":"Redis/HashTable/#dict-cleandictrelease","text":"void dictRelease ( dict * d ) { // hashtable \u8282\u70b9\u53ca\u7a7a\u95f4\u91ca\u653e _dictClear ( d , & d -> ht [ 0 ], NULL ); _dictClear ( d , & d -> ht [ 1 ], NULL ); // dict \u7a7a\u95f4\u91ca\u653e zfree ( d ); } // hashtable clean int _dictClear ( dict * d , dictht * ht , void ( callback )( void * )) { unsigned long i ; // \u91ca\u653e\u6bcf\u4e00\u4e2a\u8282\u70b9 for ( i = 0 ; i < ht -> size && ht -> used > 0 ; i ++ ) { dictEntry * he , * nextHe ; // \u6267\u884c hook \u65b9\u6cd5 if ( callback && ( i & 65535 ) == 0 ) callback ( d -> privdata ); if (( he = ht -> table [ i ]) == NULL ) continue ; while ( he ) { nextHe = he -> next ; dictFreeKey ( d , he ); dictFreeVal ( d , he ); zfree ( he ); ht -> used -- ; he = nextHe ; } } // hashtable\u7a7a\u95f4\u91ca\u653e zfree ( ht -> table ); // hashtable \u5b57\u6bb5\u521d\u59cb\u5316 _dictReset ( ht ); return DICT_OK ; }","title":"dict clean\uff1adictRelease"},{"location":"Redis/HashTable/#key-dictfind","text":"dictEntry * dictFind ( dict * d , const void * key ) { dictEntry * he ; uint64_t h , idx , table ; // empty check if ( dictSize ( d ) == 0 ) return NULL ; // help rehash if ( dictIsRehashing ( d )) _dictRehashStep ( d ); // calculate hash h = dictHashKey ( d , key ); // find dictEntry for ( table = 0 ; table <= 1 ; table ++ ) { idx = h & d -> ht [ table ]. sizemask ; he = d -> ht [ table ]. table [ idx ]; while ( he ) { if ( key == he -> key || dictCompareKeys ( d , key , he -> key )) return he ; he = he -> next ; } if ( ! dictIsRehashing ( d )) return NULL ; } return NULL ; }","title":"key \u67e5\u8be2\uff1adictFind"},{"location":"Redis/HashTable/#key-valuedictfetchvalue","text":"void * dictFetchValue ( dict * d , const void * key ) { dictEntry * he ; // find key entry he = dictFind ( d , key ); // return entry's value return he ? dictGetVal ( he ) : NULL ; }","title":"key \u67e5\u8be2 value\uff1adictFetchValue"},{"location":"Redis/HashTable/#dictresize","text":"int dictResize ( dict * d ) { unsigned long minimal ; // \u5224\u65ad\u662f\u5426\u5141\u8bb8\u6269\u5bb9\u3001\u662f\u5426\u5728rehash\u4e2d if ( ! dict_can_resize || dictIsRehashing ( d )) return DICT_ERR ; // \u83b7\u53d6\u6700\u5c0f\u4f7f\u7528\u7a7a\u95f4 minimal = d -> ht [ 0 ]. used ; if ( minimal < DICT_HT_INITIAL_SIZE ) minimal = DICT_HT_INITIAL_SIZE ; // dictExpand \u6269\u5bb9 return dictExpand ( d , minimal ); }","title":"\u6700\u5c0f\u5316\u6269\u5bb9\uff1adictResize"},{"location":"Redis/HashTable/#dict-dictexpand","text":"int dictExpand ( dict * d , unsigned long size ) { // \u68c0\u67e5\u662f\u5426\u5728rehash\u4e2d\uff0c\u6216\u8005\u5df2\u5b58\u5728\u8282\u70b9\u5927\u4e8ehashtable\u5927\u5c0f if ( dictIsRehashing ( d ) || d -> ht [ 0 ]. used > size ) return DICT_ERR ; // \u521d\u59cb\u5316\u65b0\u7684hashtable dictht n ; // \u8ba1\u7b97\u65b0hashtable\u5927\u5c0f unsigned long realsize = _dictNextPower ( size ); // \u5927\u5c0f\u68c0\u67e5 if ( realsize == d -> ht [ 0 ]. size ) return DICT_ERR ; // \u5206\u914d\u7a7a\u95f4\u53ca\u521d\u59cb\u5316 n . size = realsize ; n . sizemask = realsize -1 ; n . table = zcalloc ( realsize * sizeof ( dictEntry * )); n . used = 0 ; // \u68c0\u67e5hashtable\u9996\u6b21\u5206\u914d\u7a7a\u95f4 if ( d -> ht [ 0 ]. table == NULL ) { d -> ht [ 0 ] = n ; return DICT_OK ; } // \u6269\u5bb9\u5b8c\u6210\uff0c\u51c6\u5907reHash d -> ht [ 1 ] = n ; d -> rehashidx = 0 ; return DICT_OK ; }","title":"dict \u6269\u5bb9 - dictExpand"},{"location":"Redis/HashTable/#dictgetiterator","text":"dictIterator * dictGetIterator ( dict * d ) { // \u8fed\u4ee3\u5668\u521d\u59cb\u5316 dictIterator * iter = zmalloc ( sizeof ( * iter )); iter -> d = d ; iter -> table = 0 ; iter -> index = -1 ; iter -> safe = 0 ; iter -> entry = NULL ; iter -> nextEntry = NULL ; return iter ; }","title":"\u83b7\u53d6\u8fed\u4ee3\u5668\uff1adictGetIterator"},{"location":"Redis/HashTable/#safe-dictgetsafeiterator","text":"dictIterator * dictGetSafeIterator ( dict * d ) { // \u8fed\u4ee3\u5668\u521d\u59cb\u5316 dictIterator * i = dictGetIterator ( d ); // \u8bbe\u7f6e\u5b89\u5168\u6807\u5fd7 i -> safe = 1 ; return i ; }","title":"\u83b7\u53d6 safe \u8fed\u4ee3\u5668\uff1adictGetSafeIterator"},{"location":"Redis/HashTable/#dictnext","text":"\u5b8c\u6210\u4e24\u4e2a hashtable \u7684\u904d\u5386 \u5b8c\u6210\u51b2\u7a81\u8282\u70b9\u7684\u94fe\u8868\u904d\u5386 dictEntry * dictNext ( dictIterator * iter ) { while ( 1 ) { if ( iter -> entry == NULL ) { dictht * ht = & iter -> d -> ht [ iter -> table ]; // \u7b2c\u4e00\u6b21\u904d\u5386 if ( iter -> index == -1 && iter -> table == 0 ) { if ( iter -> safe ) // \u8fed\u4ee3\u5668\u6570\u91cf+1 iter -> d -> iterators ++ ; else // \u8bb0\u5f55dict\u6307\u7eb9 iter -> fingerprint = dictFingerprint ( iter -> d ); } iter -> index ++ ; // \u68c0\u67e5\u904d\u5386\u7d22\u5f15\u5927\u4e8e buckets \u6570\u91cf if ( iter -> index >= ( long ) ht -> size ) { // rehash \u4e2d\u68c0\u67e5\uff0c\u7ee7\u7eed\u904d\u5386ht[1] if ( dictIsRehashing ( iter -> d ) && iter -> table == 0 ) { iter -> table ++ ; iter -> index = 0 ; ht = & iter -> d -> ht [ 1 ]; } else { break ; } } iter -> entry = ht -> table [ iter -> index ]; } else { iter -> entry = iter -> nextEntry ; } if ( iter -> entry ) { // \u8bbe\u7f6e nextEntry iter -> nextEntry = iter -> entry -> next ; return iter -> entry ; } } return NULL ; }","title":"\u8fed\u4ee3\u5668\u904d\u5386\uff1adictNext"},{"location":"Redis/HashTable/#dictreleaseiterator","text":"void dictReleaseIterator ( dictIterator * iter ) { // \u68c0\u67e5\u8fed\u4ee3\u5668\u662f\u5426\u4f7f\u7528 if ( ! ( iter -> index == -1 && iter -> table == 0 )) { if ( iter -> safe ) // \u8fed\u4ee3\u5668\u6570\u91cf-1 iter -> d -> iterators -- ; else // \u68c0\u67e5\u6307\u7eb9\u5bf9\u6bd4 assert ( iter -> fingerprint == dictFingerprint ( iter -> d )); } zfree ( iter ); }","title":"\u8fed\u4ee3\u5668\u5220\u9664\uff1adictReleaseIterator"},{"location":"Redis/HashTable/#keydictgetrandomkey","text":"dictEntry * dictGetRandomKey ( dict * d ) { dictEntry * he , * orighe ; unsigned long h ; int listlen , listele ; // empty check if ( dictSize ( d ) == 0 ) return NULL ; // help rehash if ( dictIsRehashing ( d )) _dictRehashStep ( d ); if ( dictIsRehashing ( d )) { // \u5728 rehash \u8fc7\u7a0b\u4e2d\u65f6 do { // \u968f\u673a\u4e00\u4e2a\u5927\u4e8e rehashidx\uff0c\u5c0f\u4e8e ht[1] \u5927\u5c0f\u7684\u503c\uff0c\u627e\u5230\u975e\u7a7a bucket h = d -> rehashidx + ( random () % ( d -> ht [ 0 ]. size + d -> ht [ 1 ]. size - d -> rehashidx )); he = ( h >= d -> ht [ 0 ]. size ) ? d -> ht [ 1 ]. table [ h - d -> ht [ 0 ]. size ] : d -> ht [ 0 ]. table [ h ]; } while ( he == NULL ); } else { // \u4e0d\u5728 rehash \u8fc7\u7a0b\u4e2d\u65f6\uff0c\u5728 ht[0] buckets \u8303\u56f4\u5185\u968f\u673a\u627e\u5230\u4e00\u4e2a\u975e\u7a7a\u8282\u70b9 do { h = random () & d -> ht [ 0 ]. sizemask ; he = d -> ht [ 0 ]. table [ h ]; } while ( he == NULL ); } listlen = 0 ; orighe = he ; // \u7edf\u8ba1\u94fe\u8868\u957f\u5ea6 while ( he ) { he = he -> next ; listlen ++ ; } // \u968f\u673a\u4e00\u4e2a\u5c0f\u4e8e\u94fe\u8868\u957f\u5ea6\u7684\u503c listele = random () % listlen ; he = orighe ; // \u5b9a\u4f4d\u8fd9\u4e2a\u503c while ( listele -- ) he = he -> next ; return he ; }","title":"\u83b7\u53d6\u968f\u673a key\uff1adictGetRandomKey"},{"location":"Redis/HashTable/#keydictgetsomekeys","text":"\u4e0d\u4fdd\u8bc1\u8fd4\u56de\u6307\u5b9a\u6570\u91cf\u7684\u968f\u673a\u8282\u70b9\uff0c\u4e5f\u4e0d\u4fdd\u8bc1\u4e0d\u8fd4\u56de\u91cd\u590d\u8282\u70b9 unsigned int dictGetSomeKeys ( dict * d , dictEntry ** des , unsigned int count ) { unsigned long j ; unsigned long tables ; unsigned long stored = 0 , maxsizemask ; unsigned long maxsteps ; // \u68c0\u67e5 count \u662f\u5426\u5927\u4e8e \u4e24\u4e2a hashtable \u957f\u5ea6\u4e4b\u548c if ( dictSize ( d ) < count ) count = dictSize ( d ); // \u521d\u59cb\u5316\u6700\u5927\u67e5\u627e\u6b21\u6570 maxsteps = count * 10 ; // \u534f\u52a9 rehash for ( j = 0 ; j < count ; j ++ ) { if ( dictIsRehashing ( d )) _dictRehashStep ( d ); else break ; } // \u786e\u5b9a hashtable \u67e5\u8be2\u6570\u91cf\u8303\u56f4 tables = dictIsRehashing ( d ) ? 2 : 1 ; // \u83b7\u53d6\u6700\u5927\u63a9\u7801 maxsizemask = d -> ht [ 0 ]. sizemask ; if ( tables > 1 && maxsizemask < d -> ht [ 1 ]. sizemask ) maxsizemask = d -> ht [ 1 ]. sizemask ; // \u8ba1\u7b97 bucket \u521d\u59cb\u4f4d\u7f6e unsigned long i = random () & maxsizemask ; // \u8fde\u7eed\u7a7a bucket \u7edf\u8ba1 unsigned long emptylen = 0 ; while ( stored < count && maxsteps -- ) { for ( j = 0 ; j < tables ; j ++ ) { // \u5982\u679c\u5728 rehash \u4e2d\uff0c\u5728 ht[0] \u4e2d 0 - rehashidx - 1 \u7684\u503c\u5df2\u7ecf\u5b8c\u6210\u8fc1\u79fb if ( tables == 2 && j == 0 && i < ( unsigned long ) d -> rehashidx ) { // \u68c0\u67e5\u521d\u59cb\u4f4d\u7f6e\u6709\u6548\u6027\uff0c\u5982\u679c\u8d8a\u754c\uff0c\u8d4b\u503c\u4e3a rehashidx if ( i >= d -> ht [ 1 ]. size ) i = d -> rehashidx ; else // \u5728ht[1] \u4e2d\u7ee7\u7eed continue ; } // index overflow \u68c0\u67e5 if ( i >= d -> ht [ j ]. size ) continue ; dictEntry * he = d -> ht [ j ]. table [ i ]; // \u68c0\u67e5 empty bucket if ( he == NULL ) { emptylen ++ ; // \u5982\u679c\u8fde\u7eed5\u4e2a\u7a7a bucket\uff0c\u5e76\u4e14\u5927\u4e8e\u76ee\u6807 entry \u6570\u91cf\uff0c\u91cd\u65b0\u8ba1\u7b97\u521d\u59cb bucket \u4f4d\u7f6e if ( emptylen >= 5 && emptylen > count ) { i = random () & maxsizemask ; emptylen = 0 ; } } else { emptylen = 0 ; // \u5c06\u94fe\u8868\u7684\u6240\u6709\u8282\u70b9\u653e\u5165\u7ed3\u679c\u96c6 while ( he ) { * des = he ; des ++ ; he = he -> next ; stored ++ ; if ( stored == count ) return stored ; } } } // \u8fde\u7eed\u9012\u589e\uff0c\u5e76\u4e14\u9632\u6b62\u8d8a\u754c i = ( i + 1 ) & maxsizemask ; } return stored ; }","title":"\u6279\u91cf\u83b7\u53d6\u968f\u673a key\uff1adictGetSomeKeys"},{"location":"Redis/HashTable/#keydictgetfairrandomkey","text":"dictEntry * dictGetFairRandomKey ( dict * d ) { // \u5b9a\u4e49\u7ed3\u679c\u96c6\uff0c\u9ed8\u8ba4\u957f\u5ea615 dictEntry * entries [ GETFAIR_NUM_ENTRIES ]; // \u83b7\u53d6\u968f\u673a\u8282\u70b9 unsigned int count = dictGetSomeKeys ( d , entries , GETFAIR_NUM_ENTRIES ); // \u7ed3\u679c\u96c6\u4e3a\u7a7a\uff0c\u5219\u8c03\u7528 dictGetRandomKey \u8fd4\u56de\u4e00\u4e2a\u968f\u673a\u8282\u70b9 if ( count == 0 ) return dictGetRandomKey ( d ); // \u6839\u636e\u7ed3\u679c\u96c6\u957f\u5ea6\uff0c\u968f\u673a\u8fd4\u56de\u4e00\u4e2a\u8282\u70b9 unsigned int idx = rand () % count ; return entries [ idx ]; }","title":"\u516c\u5e73\u83b7\u53d6\u968f\u673a key\uff1adictGetFairRandomKey"},{"location":"Redis/HashTable/#debug-htstats-dictgetstats","text":"void dictGetStats ( char * buf , size_t bufsize , dict * d ) { size_t l ; char * orig_buf = buf ; size_t orig_bufsize = bufsize ; // \u83b7\u53d6 ht[0] \u72b6\u6001\u4fe1\u606f l = _dictGetStatsHt ( buf , bufsize , & d -> ht [ 0 ], 0 ); buf += l ; bufsize -= l ; // \u83b7\u53d6 ht[1] \u72b6\u6001\u4fe1\u606f if ( dictIsRehashing ( d ) && bufsize > 0 ) { _dictGetStatsHt ( buf , bufsize , & d -> ht [ 1 ], 1 ); } // set '\\0' \u4e3a buf \u5c3e\u5143\u7d20 if ( orig_bufsize ) orig_buf [ orig_bufsize -1 ] = '\\0' ; } // \u83b7\u53d6 hashtable \u72b6\u6001 size_t _dictGetStatsHt ( char * buf , size_t bufsize , dictht * ht , int tableid ) { unsigned long i , slots = 0 , chainlen , maxchainlen = 0 ; unsigned long totchainlen = 0 ; // \u94fe\u8868\u957f\u5ea6\u7edf\u8ba1 unsigned long clvector [ DICT_STATS_VECTLEN ]; size_t l = 0 ; // empty check if ( ht -> used == 0 ) { return snprintf ( buf , bufsize , \"No stats available for empty dictionaries \\n \" ); } // \u7ed3\u679c\u96c6\u521d\u59cb\u5316 for ( i = 0 ; i < DICT_STATS_VECTLEN ; i ++ ) clvector [ i ] = 0 ; for ( i = 0 ; i < ht -> size ; i ++ ) { dictEntry * he ; // \u7a7a bucket \u68c0\u67e5 if ( ht -> table [ i ] == NULL ) { clvector [ 0 ] ++ ; continue ; } // \u975e\u7a7a slot \u7edf\u8ba1 slots ++ ; // \u8ba1\u7b97\u94fe\u8868\u957f\u5ea6 chainlen = 0 ; he = ht -> table [ i ]; while ( he ) { chainlen ++ ; he = he -> next ; } // \u6839\u636e\u94fe\u8868\u957f\u5ea6\u7edf\u8ba1 key \u6570\u91cf clvector [( chainlen < DICT_STATS_VECTLEN ) ? chainlen : ( DICT_STATS_VECTLEN -1 )] ++ ; // \u8ba1\u7b97\u6700\u957f\u94fe\u8868 if ( chainlen > maxchainlen ) maxchainlen = chainlen ; // \u7edf\u8ba1\u94fe\u8868\u957f\u5ea6\u548c totchainlen += chainlen ; } // \u53ef\u8bfb\u4fe1\u606f\u751f\u6210\uff1ahashtable \u4fe1\u606f\u3001size\u3001\u4f7f\u7528\u6570\u91cf\u3001slots\u3001\u6700\u957f\u94fe\u8868\uff0c\u94fe\u8868\u8282\u70b9\u5360\u6bd4\u3001\u4f7f\u7528\u7387 l += snprintf ( buf + l , bufsize - l , \"Hash table %d stats (%s): \\n \" \" table size: %ld \\n \" \" number of elements: %ld \\n \" \" different slots: %ld \\n \" \" max chain length: %ld \\n \" \" avg chain length (counted): %.02f \\n \" \" avg chain length (computed): %.02f \\n \" \" Chain length distribution: \\n \" , tableid , ( tableid == 0 ) ? \"main hash table\" : \"rehashing target\" , ht -> size , ht -> used , slots , maxchainlen , ( float ) totchainlen / slots , ( float ) ht -> used / slots ); for ( i = 0 ; i < DICT_STATS_VECTLEN -1 ; i ++ ) { if ( clvector [ i ] == 0 ) continue ; if ( l >= bufsize ) break ; l += snprintf ( buf + l , bufsize - l , \" %s%ld: %ld (%.02f%%) \\n \" , ( i == DICT_STATS_VECTLEN -1 ) ? \">= \" : \"\" , i , clvector [ i ], (( float ) clvector [ i ] / ht -> size ) * 100 ); } /* Unlike snprintf(), teturn the number of characters actually written. */ if ( bufsize ) buf [ bufsize -1 ] = '\\0' ; return strlen ( buf ); }","title":"Debug \u63a5\u53e3\u83b7\u53d6 htstats\uff1a dictGetStats"},{"location":"Redis/HashTable/#siphash-hash-dictgenhashfunction","text":"uint64_t dictGenHashFunction ( const void * key , int len ) { return siphash ( key , len , dict_hash_function_seed ); }","title":"siphash hash \u751f\u6210\u51fd\u6570 dictGenHashFunction"},{"location":"Redis/HashTable/#siphash-hash-dictgenhashfunction_1","text":"uint64_t dictGenCaseHashFunction ( const unsigned char * buf , int len ) { return siphash_nocase ( buf , len , dict_hash_function_seed ); }","title":"siphash \u5927\u5c0f\u5199\u654f\u611f hash \u751f\u6210\u51fd\u6570 dictGenHashFunction"},{"location":"Redis/HashTable/#dict-dictempty","text":"void dictEmpty ( dict * d , void ( callback )( void * )) { // hashtable \u8282\u70b9\u53ca\u7a7a\u95f4\u91ca\u653e _dictClear ( d , & d -> ht [ 0 ], callback ); _dictClear ( d , & d -> ht [ 1 ], callback ); // \u91cd\u7f6e rehashidx \u53ca\u8fed\u4ee3\u5668\u8ba1\u6570 d -> rehashidx = -1 ; d -> iterators = 0 ; }","title":"\u6e05\u7a7a dict\uff1a dictEmpty"},{"location":"Redis/HashTable/#rehashdictenableresize","text":"void dictEnableResize ( void ) { dict_can_resize = 1 ; }","title":"\u542f\u7528 rehash\uff1adictEnableResize"},{"location":"Redis/HashTable/#rehashdictenableresize_1","text":"void dictDisableResize ( void ) { dict_can_resize = 0 ; }","title":"\u7981\u6b62 rehash\uff1adictEnableResize"},{"location":"Redis/HashTable/#rehashdictrehash","text":"iterators \u8fed\u4ee3\u5668\u6570\u91cf\u5fc5\u987b\u4e3a 0 int dictRehash ( dict * d , int n ) { // \u6700\u5927\u7a7a bucket \u68c0\u6d4b\u6b21\u6570 int empty_visits = n * 10 ; // rehash \u4e2d\u68c0\u67e5 if ( ! dictIsRehashing ( d )) return 0 ; // step \u63a7\u5236 while ( n -- && d -> ht [ 0 ]. used != 0 ) { dictEntry * de , * nextde ; // rehashidx overflow check assert ( d -> ht [ 0 ]. size > ( unsigned long ) d -> rehashidx ); // \u67e5\u627e\u975e\u7a7a bucket while ( d -> ht [ 0 ]. table [ d -> rehashidx ] == NULL ) { d -> rehashidx ++ ; if ( -- empty_visits == 0 ) return 1 ; } // \u62ff\u5230 entry de = d -> ht [ 0 ]. table [ d -> rehashidx ]; // \u5904\u7406\u94fe\u8868\u4e2d\u7684\u6240\u6709entry while ( de ) { uint64_t h ; nextde = de -> next ; // \u8ba1\u7b97\u65b0\u7684 bucket \u4f4d\u7f6e h = dictHashKey ( d , de -> key ) & d -> ht [ 1 ]. sizemask ; // \u5934\u8282\u70b9\u63d2\u5165 de -> next = d -> ht [ 1 ]. table [ h ]; d -> ht [ 1 ]. table [ h ] = de ; d -> ht [ 0 ]. used -- ; d -> ht [ 1 ]. used ++ ; de = nextde ; } // \u65e7\u7684 bucket \u7f6e\u7a7a d -> ht [ 0 ]. table [ d -> rehashidx ] = NULL ; // rehash \u4f4d\u7f6e+1 d -> rehashidx ++ ; } // rehash \u5b8c\u6210\u68c0\u67e5 if ( d -> ht [ 0 ]. used == 0 ) { // \u91ca\u653e\u65e7\u7684 hashtable zfree ( d -> ht [ 0 ]. table ); // \u4f7f\u7528\u6269\u5bb9\u540e\u7684 hashtable \u66ff\u6362\u65e7\u7684 hashtable d -> ht [ 0 ] = d -> ht [ 1 ]; // ht[1] \u91cd\u7f6e _dictReset ( & d -> ht [ 1 ]); // rehash \u6807\u5fd7\u91cd\u7f6e d -> rehashidx = -1 ; return 0 ; } return 1 ; }","title":"\u9650\u5236\u6b65\u6570 rehash\uff1adictRehash"},{"location":"Redis/HashTable/#rehashdictrehashmilliseconds","text":"int dictRehashMilliseconds ( dict * d , int ms ) { // \u8fed\u4ee3\u4e2d\uff0c if ( d -> iterators > 0 ) return 0 ; // \u83b7\u53d6 rehash \u5f00\u59cb\u65f6\u95f4 long long start = timeInMilliseconds (); int rehashes = 0 ; // \u6267\u884c100\u6b21 rehash while ( dictRehash ( d , 100 )) { rehashes += 100 ; // \u8d85\u65f6\u68c0\u67e5 if ( timeInMilliseconds () - start > ms ) break ; } // \u8fd4\u56de rehash \u6b21\u6570 return rehashes ; } long long timeInMilliseconds ( void ) { struct timeval tv ; gettimeofday ( & tv , NULL ); return ((( long long ) tv . tv_sec ) * 1000 ) + ( tv . tv_usec / 1000 ); }","title":"\u9650\u65f6 rehash\uff1adictRehashMilliseconds"},{"location":"Redis/HashTable/#hash-dictsethashfunctionseed","text":"static uint8_t dict_hash_function_seed [ 16 ]; void dictSetHashFunctionSeed ( uint8_t * seed ) { memcpy ( dict_hash_function_seed , seed , sizeof ( dict_hash_function_seed )); }","title":"\u8bbe\u7f6e hash \u51fd\u6570\u79cd\u5b50\uff1adictSetHashFunctionSeed"},{"location":"Redis/HashTable/#hash-dictgethashfunctionseed","text":"uint8_t * dictGetHashFunctionSeed ( void ) { return dict_hash_function_seed ; }","title":"\u83b7\u53d6 hash \u51fd\u6570\u79cd\u5b50\uff1adictGetHashFunctionSeed"},{"location":"Redis/HashTable/#dict-dictscan","text":"dictScan() \u7528\u4e8e\u904d\u5386\u5b57\u5178\u7684\u6240\u6709\u5143\u7d20 \u5f00\u59cb\u904d\u5386\u90a3\u4e00\u523b\u7684\u6240\u6709\u5143\u7d20\uff0c\u53ea\u8981\u4e0d\u88ab\u5220\u9664\uff0c\u80af\u5b9a\u80fd\u88ab\u904d\u5386\u5230\uff0c\u4e0d\u7ba1\u5b57\u5178\u6269\u5c55\u8fd8\u662f\u7f29\u5c0f \u53ef\u80fd\u4f1a\u8fd4\u56de\u91cd\u590d\u5143\u7d20\uff0c\u4f46\u662f\u5df2\u7ecf\u628a\u8fd4\u56de\u91cd\u590d\u5143\u7d20\u7684\u53ef\u80fd\u6027\u964d\u5230\u4e86\u6700\u4f4e /* \u5bf9 v \u8fdb\u884c\u4e8c\u8fdb\u5236\u9006\u5e8f\u64cd\u4f5c http://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel */ static unsigned long rev ( unsigned long v ) { unsigned long s = CHAR_BIT * sizeof ( v ); // bit size; must be power of 2 unsigned long mask = ~ 0UL ; while (( s >>= 1 ) > 0 ) { mask ^= ( mask << s ); v = (( v >> s ) & mask ) | (( v << s ) & ~ mask ); } return v ; } /* \u5b57\u5178\u904d\u5386 v\uff1a \u8981\u904d\u5386\u7684 bucket \u7d22\u5f15 */ unsigned long dictScan ( dict * d , unsigned long v , dictScanFunction * fn , dictScanBucketFunction * bucketfn , void * privdata ) { dictht * t0 , * t1 ; const dictEntry * de , * next ; unsigned long m0 , m1 ; // empty check if ( dictSize ( d ) == 0 ) return 0 ; // \u8fed\u4ee3\u5668\u6570\u91cf+1\uff0c\u9632\u6b62 rehash d -> iterators ++ ; // \u5982\u679c\u4e0d\u5728 rehash \u4e2d if ( ! dictIsRehashing ( d )) { t0 = & ( d -> ht [ 0 ]); m0 = t0 -> sizemask ; // bucket callback if ( bucketfn ) bucketfn ( privdata , & t0 -> table [ v & m0 ]); de = t0 -> table [ v & m0 ]; // bucket \u94fe\u8868\u904d\u5386 while ( de ) { next = de -> next ; fn ( privdata , de ); // \u94fe\u8868\u8282\u70b9 callback de = next ; } v |= ~ m0 ; // \u4fdd\u7559 v \u7684\u4f4e n \u4f4d\u6570\uff0c\u5176\u4f59\u4f4d\u5168\u7f6e\u4e3a 1 // [\u4e8c\u8fdb\u5236\u53cd\u8f6c](http://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel) v = rev ( v ); // \u5c06 v \u7684\u4e8c\u8fdb\u5236\u4f4d\u8fdb\u884c\u7ffb\u8f6c\uff0c\u6240\u4ee5\uff0cv\u7684\u4f4e n \u4f4d\u6570\u6210\u4e86\u9ad8 n \u4f4d\u6570\uff0c\u5e76\u4e14\u8fdb\u884c\u4e86\u7ffb\u8f6c v ++ ; // \u81ea\u589e v = rev ( v ); // \u518d\u6b21\u4e8c\u8fdb\u5236\u7ffb\u8f6c } else { // \u5728 rehash \u8fc7\u7a0b\u4e2d t0 = & d -> ht [ 0 ]; t1 = & d -> ht [ 1 ]; // \u786e\u4fdd t0 \u957f\u5ea6\u5c0f\u4e8e t1 if ( t0 -> size > t1 -> size ) { t0 = & d -> ht [ 1 ]; t1 = & d -> ht [ 0 ]; } m0 = t0 -> sizemask ; m1 = t1 -> sizemask ; // bucket callback if ( bucketfn ) bucketfn ( privdata , & t0 -> table [ v & m0 ]); de = t0 -> table [ v & m0 ]; // bucket \u94fe\u8868\u904d\u5386 while ( de ) { next = de -> next ; fn ( privdata , de ); // \u94fe\u8868\u8282\u70b9 callback de = next ; } // \u5927\u7684 hashtable t1 \u904d\u5386 do { if ( bucketfn ) bucketfn ( privdata , & t1 -> table [ v & m1 ]); // bucket callback de = t1 -> table [ v & m1 ]; // bucket \u94fe\u8868\u904d\u5386 while ( de ) { next = de -> next ; fn ( privdata , de ); // \u94fe\u8868\u8282\u70b9 callback de = next ; } v |= ~ m1 ; // \u4fdd\u7559 v \u7684\u4f4e n \u4f4d\u6570\uff0c\u5176\u4f59\u4f4d\u5168\u7f6e\u4e3a 1 v = rev ( v ); // \u5c06 v \u7684\u4e8c\u8fdb\u5236\u4f4d\u8fdb\u884c\u7ffb\u8f6c\uff0c\u6240\u4ee5\uff0cv\u7684\u4f4e n \u4f4d\u6570\u6210\u4e86\u9ad8 n \u4f4d\u6570\uff0c\u5e76\u4e14\u8fdb\u884c\u4e86\u7ffb\u8f6c v ++ ; // \u81ea\u589e v = rev ( v ); // \u518d\u6b21\u4e8c\u8fdb\u5236\u7ffb\u8f6c // \u76f4\u5230 v \u7684\u4f4e m1-m0 \u4f4d\u5230\u4f4e m1 \u4f4d\u4e4b\u95f4\u5168\u90e8\u4e3a 0 \u4e3a\u6b62 } while ( v & ( m0 ^ m1 )); } // \u8fed\u4ee3\u5668\u6570\u91cf-1 d -> iterators -- ; return v ; }","title":"dict \u626b\u63cf\uff1adictScan"},{"location":"Redis/HashTable/#hash-dictgethash","text":"\u4f7f\u7528\u7684 hash \u51fd\u6570\u4e3a\u521d\u59cb\u5316 dict \u65f6\u8bbe\u7f6e\u7684 hash \u51fd\u6570 uint64_t dictGetHash ( dict * d , const void * key ) { return dictHashKey ( d , key ); }","title":"\u8ba1\u7b97 hash\uff1a dictGetHash"},{"location":"Redis/HashTable/#hash-entry-dictfindentryrefbyptrandhash","text":"dictEntry ** dictFindEntryRefByPtrAndHash ( dict * d , const void * oldptr , uint64_t hash ) { dictEntry * he , ** heref ; unsigned long idx , table ; // empty check if ( dictSize ( d ) == 0 ) return NULL ; for ( table = 0 ; table <= 1 ; table ++ ) { // \u8ba1\u7b97 slot idx = hash & d -> ht [ table ]. sizemask ; heref = & d -> ht [ table ]. table [ idx ]; he = * heref ; // \u94fe\u8868\u8282\u70b9\u67e5\u8be2 while ( he ) { // \u901a\u8fc7\u6307\u9488\u5bf9\u6bd4\u4ee3\u66ff key \u5bf9\u6bd4 if ( oldptr == he -> key ) return heref ; heref = & he -> next ; he = * heref ; } // \u975e rehash \u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u9700\u8981\u67e5\u8be2 ht[1] if ( ! dictIsRehashing ( d )) return NULL ; } return NULL ; }","title":"\u6839\u636e\u6307\u9488\u548c hash \u67e5\u8be2 entry\uff1a dictFindEntryRefByPtrAndHash"},{"location":"Redis/redis/","tags":["Redis"],"text":"Redis \u5b98\u65b9 Repo \u8bf4\u660e \u672c\u535a\u5ba2\u5185\u5bb9\u57fa\u4e8e Redis6.0","title":"\u7b80\u4ecb"},{"location":"Redis/redis/#redis","text":"\u5b98\u65b9 Repo","title":"Redis"},{"location":"Redis/redis/#_1","text":"\u672c\u535a\u5ba2\u5185\u5bb9\u57fa\u4e8e Redis6.0","title":"\u8bf4\u660e"},{"location":"ServerMesh/istio/","tags":["Istio"],"text":"Istio Mesh Istio install https://istio.io/latest/docs/setup/getting-started/ Set up with minikube zsh \u279c minikube start zsh \u279c minikube addons enable ingredd zsh \u279c minikube tunnel Istio Samples zsh \u279c git clone https://github.com/istio/istio.git zsh \u279c cd istio/samples Istio HelloWorld zsh \u279c cd helloworld zsh \u279c kubectl apply -f helloworld.yaml","title":"Istio Mesh"},{"location":"ServerMesh/istio/#istio-mesh","text":"","title":"Istio Mesh"},{"location":"ServerMesh/istio/#istio-install","text":"https://istio.io/latest/docs/setup/getting-started/","title":"Istio install"},{"location":"ServerMesh/istio/#set-up-with-minikube","text":"zsh \u279c minikube start zsh \u279c minikube addons enable ingredd zsh \u279c minikube tunnel","title":"Set up with minikube"},{"location":"ServerMesh/istio/#istio-samples","text":"zsh \u279c git clone https://github.com/istio/istio.git zsh \u279c cd istio/samples","title":"Istio Samples"},{"location":"ServerMesh/istio/#istio-helloworld","text":"zsh \u279c cd helloworld zsh \u279c kubectl apply -f helloworld.yaml","title":"Istio HelloWorld"},{"location":"ServerMesh/server/","tags":["Service Mesh","\u6ce8\u518c\u4e2d\u5fc3","\u8d1f\u8f7d\u5747\u8861","\u670d\u52a1\u6cbb\u7406","\u7f51\u5173","\u914d\u7f6e\u4e2d\u5fc3","Trace","Envoy"],"text":"\u670d\u52a1\u6ce8\u518c\u4e2d\u5fc3 \u5065\u5eb7\u68c0\u67e5\u8bbe\u8ba1 \u670d\u52a1\u4e3b\u52a8\u63a2\u6d3b \u670d\u52a1\u5b9a\u65f6\u53d1\u9001\u79df\u7ea6\u4fe1\u606f\u7ed9\u6ce8\u518c\u4e2d\u5fc3 \u5199\u64cd\u4f5c\u538b\u529b\u5927\u3001\u4e3b\u52a8\u79df\u7ea6\u4e0d\u80fd\u4fdd\u8bc1\u670d\u52a1\u5065\u5eb7 \u6ce8\u518c\u4e2d\u5fc3\u53d1\u8d77\u5065\u5eb7\u68c0\u67e5 \u53ef\u80fd\u4f1a\u53d1\u751f\u65e7\u670d\u52a1\u91cd\u65b0\u6fc0\u6d3b\u7684\u95ee\u9898 \u53ef\u7528 envory \u505a\u670d\u52a1\u540d\u68c0\u67e5 \u8c03\u7528\u623f\u7684\u8d1f\u8f7d\u5747\u8861\u5668\u8fdb\u884c\u5065\u5eb7\u68c0\u67e5 \u5982 grpc \u7684\u81ea\u52a8\u6458\u9664\u8282\u70b9 IP \u91cd\u7528\u4ea7\u751f\u810f\u6570\u636e \u6ce8\u518c\u4e2d\u5fc3\u7684\u9009\u578b \u7279\u5f81 Nacos Eureka Zookeeper Consul Etcd \u4e00\u81f4\u6027\u534f\u8bae AP AP CP CP CP \u5065\u5eb7\u68c0\u67e5 \u591a\u79cd TTL Keep Alive \u591a\u79cd TTL \u7f51\u7edc\u5f02\u5e38\u4fdd\u62a4 \u652f\u6301 \u652f\u6301 \u4e0d\u652f\u6301 \u652f\u6301 \u4e0d\u652f\u6301 \u5b9e\u73b0\u8bed\u8a00 Java Java Java Go Go \u642d\u5efa\u9ad8\u53ef\u7528\u7684\u6ce8\u518c\u4e2d\u5fc3 Q1\uff1a\u6ce8\u518c\u4e2d\u5fc3\u6545\u969c\u4e86\uff0c\u670d\u52a1\u662f\u5426\u8fd8\u80fd\u6b63\u5e38\u8bbf\u95ee\uff1f \u53ea\u8981\u670d\u52a1\u7f13\u5b58\u4e86\u670d\u52a1\u6570\u636e\uff0c\u5f71\u54cd\u9762\u53ef\u63a7 \u670d\u52a1\u65e0\u6cd5\u6269\u5bb9 Q2\uff1a\u6ce8\u518c\u4e2d\u5fc3\u56e0\u4e3a\u9ad8\u8d1f\u8f7d\uff0c\u63a8\u9001\u4e86\u5f02\u5e38\u7684\u6570\u636e\uff0c\u670d\u52a1\u662f\u5426\u8fd8\u80fd\u6b63\u5e38\u8bbf\u95ee\uff1f \u5728\u5ba2\u6237\u7aef\u7684\u670d\u52a1\u53d1\u73b0 SDk \u4e2d\u52a0\u5165\u81ea\u6211\u4fdd\u62a4\u673a\u5236\uff0c\u5f53\u670d\u52a1\u7684\u8282\u70b9\u6570\u91cf\u4e0b\u964d\u8d85\u8fc7\u4e00\u5b9a\u9608\u503c\uff0c\u5c31\u8fdb\u5165\u4fdd\u62a4\u673a\u5236\uff0c\u653e\u5f03\u4f7f\u7528\u65b0\u63a8\u9001\u8fc7\u6765\u7684\u670d\u52a1\u6ce8\u518c\u4fe1\u606f Q3\uff1a\u65b0\u52a0\u5165\u7684\u673a\u5668\uff0c\u51fa\u73b0\u4e86\u7f51\u7edc\u8054\u901a\u6027\u95ee\u9898\uff08\u6ce8\u518c\u4e2d\u5fc3\u4e0e\u670d\u52a1\u7f51\u7edc\u6b63\u5e38\uff0c\u670d\u52a1\u4e4b\u95f4\u7f51\u7edc\u5f02\u5e38\uff09\uff0c\u5e94\u8be5\u600e\u6837\u5e94\u5bf9\uff1f \u5728\u8d1f\u8f7d\u5747\u8861\u4e2d\u52a0\u5165\u88ab\u52a8\u5065\u5eb7\u68c0\u67e5\uff08\u8282\u70b9\u7194\u65ad\uff09\u548c\u4e3b\u52a8\u5065\u5eb7\u68c0\u67e5\uff0c\u4e3b\u52a8\u5254\u9664\u5931\u6548\u7684\u8282\u70b9 Q4\uff1a\u670d\u52a1\u662f\u5426\u5e94\u8be5\u5b8c\u5168\u4fe1\u4efb\u6ce8\u518c\u4e2d\u5fc3\u63a8\u9001\u7684\u6570\u636e\uff1f \u76f8\u6bd4\u6ce8\u518c\u4e2d\u5fc3\u6570\u636e\uff0c\u66f4\u4fe1\u4efb\u672c\u5730\u6570\u636e \u4f7f\u7528 Envoy 2X2 \u77e9\u9635\u6765\u51b3\u5b9a\u8282\u70b9\u662f\u5426\u5e94\u8be5\u8def\u7531 \u53d1\u73b0\u72b6\u6001 \u5065\u5eb7\u68c0\u67e5\u6210\u529f \u5065\u5eb7\u68c0\u67e5\u5931\u8d25 \u53d1\u73b0 \u8def\u7531 \u4e0d\u8def\u7531 \u672a\u53d1\u73b0 \u8def\u7531 \u4e0d\u8def\u7531\uff0c\u5220\u9664 Q5\uff1a\u670d\u52a1\u53d1\u5e03\u540e\uff0c\u9020\u6210 N*M \u6b21\u4e8b\u4ef6\u901a\u77e5\uff0c\u5f62\u6210\u5e7f\u64ad\u98ce\u66b4\uff0c\u8be5\u5982\u4f55\u89e3\u51b3\uff1f \u5c06\u6d88\u606f\u63a8\u9001\u5408\u5e76 Service Mesh \u4e2d\u7684\u6ce8\u518c\u4e2d\u5fc3 \u6d89\u53ca\u8de8\u96c6\u7fa4\u8bbf\u95ee EDS \u670d\u52a1\u53d1\u73b0\u89c4\u8303 \u4e0e K8S \u96c6\u7fa4\u7ed3\u5408 \u9700\u8981\u6ce8\u610f\u8282\u70b9 IP \u53d8\u5316\u7684\u95ee\u9898 Service Mesh \u4e2d\u7684\u6ce8\u518c\u4e2d\u5fc3\u7684\u4f18\u52bf \u7531 sidercar \u4ee3\u7406\u6ce8\u518c\uff0c\u51cf\u5c11\u670d\u52a1\u5f00\u53d1\u91cf\uff0c\u53ef\u4ee5\u63a7\u5236\u6ce8\u518c meta \u4fe1\u606f\u4e00\u81f4\u5316 \u901a\u8fc7\u63a7\u5236\u9762\u805a\u5408\u591a\u79cd\u3001\u591a\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u6570\u636e\uff0c\u964d\u4f4e\u5355\u4e00\u6ce8\u518c\u4e2d\u5fc3\u7684\u8bfb\u5199\u538b\u529b\uff0c\u66f4\u5bb9\u6613\u6c34\u5e73\u6269\u5c55 \u901a\u8fc7 sidercar \u63d0\u4f9b\u670d\u52a1\u6b63\u786e\u6027\u68c0\u67e5\u529f\u80fd\uff0c\u901a\u8fc7 header \u4e2d\u589e\u52a0\u670d\u52a1\u540d\u4e0e\u672c\u5730\u670d\u52a1\u540d\u79f0\u505a\u6821\u9a8c \u8d1f\u8f7d\u5747\u8861 \u5e94\u8be5\u9009\u62e9\u4ec0\u4e48\u6837\u7684\u8d1f\u8f7d\u5747\u8861\u5668 \u786c\u4ef6\u8d1f\u8f7d\u5747\u8861\u5668 F5 Citrix NetScaler radware Array DNS \u8d1f\u8f7d\u5747\u8861 \u8f6f\u4ef6\u8d1f\u8f7d\u5747\u8861 Nginx\uff08\u4e03\u5c42\uff09 HAProxy\uff08\u4e03\u5c42\uff09 LVS\uff08\u56db\u5c42\uff09 \u7a0b\u5e8f\u5185\u8d1f\u8f7d\u5747\u8861\uff1a\u8bb2\u8d1f\u8f7d\u5747\u8861\u653e\u5728\u670d\u52a1\u7a0b\u5e8f\u5185\u90e8 Service Mesh \u8d1f\u8f7d\u5747\u8861\uff1a\u5229\u7528 sidercar \u505a\u8d1f\u8f7d\u5747\u8861\uff0c\u5c5e\u4e8e\u8f6f\u4ef6\u8d1f\u8f7d\u5747\u8861\u7684\u4e00\u79cd \u8d1f\u8f7d\u7b97\u6cd5 Round Robin\uff1a\u8f6e\u8bad\u7b97\u6cd5\uff0c\u9002\u5408\u8282\u70b9\u6743\u91cd\u4e00\u81f4\u7684\u573a\u666f Weighted Round Robin\uff1a\u5c06\u6743\u91cd\u5927\u7684\u8282\u70b9\u5206\u6563\u5f00\uff0c\u53d6\u6700\u5927\u516c\u7ea6\u6570\uff0c\u505a\u7b80\u5355\u8f6e\u8bad\uff1b\u5728\u670d\u52a1\u91cd\u542f\u65f6\u4f1a\u51fa\u73b0\u8bf7\u6c42\u96c6\u4e2d\u7684\u73b0\u8c61 Weighted Random\uff1a\u901a\u8fc7\u968f\u673a\u7684\u65b9\u5f0f\u8fdb\u884c\u8d1f\u8f7d\uff0c\u914d\u5408\u4e8c\u5206\u67e5\u627e\uff0c\u5c06\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\u5230 logn\uff0c\u5bf9\u540e\u7aef\u8282\u70b9\u975e\u5e38\u5747\u8861 Two Random Choices\uff1a\u901a\u8fc7\u4e24\u6b21\u968f\u673a\u7b97\u6cd5\uff0c\u9009\u53d6\u4e24\u4e2a\u8282\u70b9\uff0c\u518d\u5bf9\u6bd4\u4e24\u4e2a\u8282\u70b9\u7684\u8d1f\u8f7d\u3001\u5ef6\u65f6\u7b49\u4fe1\u606f\uff0c\u9009\u53d6\u6700\u4f18\u7684\u4e00\u4e2a Stick Session\uff1a\u540c\u4e00\u4e2a\u5ba2\u6237\u7aef\uff0c\u8d1f\u8f7d\u5230\u7684\u8282\u70b9\u76f8\u540c\uff0c\u8d1f\u8f7d\u4e0d\u5747\u8861\uff0c\u614e\u7528 \u670d\u52a1\u53d1\u73b0\u540e\u5982\u4f55\u5b9e\u73b0\u8282\u70b9\u4fdd\u62a4 \u4e3b\u52a8\u5065\u5eb7\u68c0\u67e5 \u5728\u8d1f\u8f7d\u5747\u8861\u4e2d\u4e3b\u52a8\u5065\u5eb7\u68c0\u67e5\u3002 \u4f1a\u4ea7\u751f\u5927\u91cf\u65e0\u7528 ping\uff1b\u5efa\u8bae\u9009\u62e9\u83b7\u53d6\u8fc7\u5c11\u8282\u70b9\u65f6\u624d\u89e6\u53d1\uff0c\u5982\u5f53\u524d\u8282\u70b9\u6570\u6bd4\u5341\u4e94\u5206\u949f\u524d\u7684\u5c11 20%\u65f6\u89e6\u53d1 \u6050\u614c\u9608\u503c \u5f53\u5065\u5eb7\u68c0\u67e5\u540e\uff0c\u53ef\u7528\u7684\u8282\u70b9\u4f9d\u7136\u5c0f\u4e8e\u9608\u503c\uff0810%\uff09\uff0c\u5219\u5ffd\u7565\u5065\u5eb7\u68c0\u67e5\u7684\u7ed3\u679c\uff0c\u628a\u6d41\u91cf\u8d1f\u8f7d\u5230\u6240\u6709\u8282\u70b9\uff0c\u5305\u62ec\u5f02\u5e38\u7684\u8282\u70b9\uff0c\u4fdd\u8bc1\u7406\u7531\u7684\u5747\u8861\uff0c\u5065\u5eb7\u7684\u8282\u70b9\u4e5f\u4e0d\u4f1a\u56e0\u4e3a\u6fc0\u589e\u7684\u6d41\u91cf\u800c\u96ea\u5d29 \u88ab\u52a8\u5065\u5eb7\u68c0\u67e5 \u901a\u8fc7\u6b63\u5e38\u7684\u6d41\u91cf\u5224\u65ad\u8282\u70b9\u662f\u5426\u6b63\u5e38\uff0c\u4e5f\u5c31\u662f\u5229\u7528\u8282\u70b9\u7194\u65ad\u5668 \u5c06 499 \u53ca\u4ee5\u4e0a\u7684\u9519\u8bef\u7801\u8ba4\u4e3a\u662f\u540e\u7aef\u670d\u52a1\u5f02\u5e38\uff0c\u7edf\u8ba1 10 \u79d2\u6ed1\u52a8\u7a97\u53e3\u5185\u5f02\u5e38\u8bf7\u6c42\u5360\u6bd4 \u8282\u70b9\u67d3\u8272 \u5229\u7528\u8282\u70b9\u4e0a\u7684\u6807\u7b7e\u8fdb\u884c\u6d41\u91cf\u8def\u7531\uff1b\u628a\u67d0\u4e00\u7c7b\u8282\u70b9\u6253\u4e0a\u76f8\u540c\u6807\u7b7e\uff0c\u8d1f\u8f7d\u5747\u8861\u5668\u6839\u636e\u76f8\u540c\u6807\u7b7e\u5206\u53d1\u6d41\u91cf \u91d1\u4e1d\u96c0\u53d1\u5e03\u3001A/B \u6d4b\u8bd5\u3001\u6545\u969c\u6f14\u7ec3\u3001\u6d41\u91cf\u5206\u533a\u7b49 \u5982\u4f55\u64cd\u4f5c \u5728\u7f51\u5173\u5c42\uff0c\u6839\u636e header \u4fe1\u606f\u6216\u8005\u6743\u91cd\u5bf9\u6d41\u91cf\u8fdb\u884c\u67d3\u8272 \u5728\u6ce8\u518c\u4e2d\u5fc3\u4e2d\u4e5f\u8981\u5199\u5165\u5bf9\u5e94\u7684 metaData \u4fe1\u606f\uff0c\u7528\u6237\u5728\u8d1f\u8f7d\u5747\u8861\u5c42\u8fdb\u884c\u6d41\u91cf\u8fc7\u6ee4 \u5730\u57df\u4f18\u5148\u8bbf\u95ee \u5728 Envoy \u4e2d\u88ab\u79f0\u4e3a zone \u611f\u77e5\u8def\u7531 \u540d\u8bcd\u89e3\u91ca \u59cb\u53d1\u96c6\u7fa4\uff1a\u8c03\u7528\u65b9\uff0cClient \u7684\u670d\u52a1\u8282\u70b9\u96c6\u7fa4 \u4e0a\u6e38\u96c6\u7fa4\uff1a\u88ab\u8c03\u7528\u65b9\uff0cServer \u670d\u52a1\u8282\u70b9\u96c6\u7fa4 zone\uff1a\u533a\u57df\uff08Region\uff09\u548c\u53ef\u7528\u533a\uff08Availability Zone\uff09 zone \u611f\u77e5\u8def\u7531\uff0c\u4f1a\u6839\u636e\u59cb\u53d1\u96c6\u7fa4\u7684\u6240\u5728\u533a\u8282\u70b9\u6570\u91cf\u548c\u76ee\u6807\u96c6\u7fa4\u7684\u6240\u5728\u533a\u8282\u70b9\u6570\u91cf\uff0c\u52a8\u6001\u8ba1\u7b97\u4e00\u4e2a\u76f8\u5bf9\u7684\u6bd4\u4f8b\uff1b\u901a\u8fc7\u52a8\u6001\u8ba1\u7b97\u4e0a\u4e0b\u6e38\u7684\u8282\u70b9\u6570\uff0c\u5c06\u6d41\u91cf\u6b63\u786e\u7684\u8def\u7531\u5230\u5404\u4e2a\u5206\u533a\uff0c\u907f\u514d\u4e0a\u6e38\u96c6\u7fa4\u627f\u53d7\u8fc7\u5927\u7684\u8bbf\u95ee\u91cf\u800c\u5d29\u6e83 \u59cb\u53d1\u96c6\u7fa4\u7684\u672c\u5730 zone \u8282\u70b9\u6570\u91cf\u5c0f\u4e8e\u6216\u7b49\u4e8e\u4e0a\u6e38\u670d\u52a1\u8282\u70b9\u6570\u91cf\uff0c\u76f4\u63a5\u5168\u91cf\u8d1f\u8f7d\u5230\u4e0a\u6e38\u96c6\u7fa4 zone\uff0c\u5e76\u8ba1\u7b97\u5269\u4f59\u6d41\u91cf\u6bd4\u4f8b\u7528\u4e8e\u670d\u52a1\u5176\u5b83 zone \u59cb\u53d1\u96c6\u7fa4\u7684\u672c\u5730 zone \u8282\u70b9\u6570\u91cf\u5927\u4e8e\u4e0a\u6e38\u670d\u52a1\u8282\u70b9\u6570\u91cf\uff0c\u9700\u8981\u5c06\u5269\u4f59\u6d41\u91cf\u8def\u7531\u5230\u5176\u5b83\u4e0a\u6e38\u670d\u52a1 zone \u8282\u70b9\u7f29\u91cf\u53d8\u5316\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u77ac\u95f4\u7684\u6d41\u91cf\u4e0d\u5747\u8861 P2C\uff08pick off to chioce\uff09 \u5ef6\u65f6\u3001\u8d1f\u8f7d\u52a0\u6743\uff08EWMA\uff09 \u57fa\u4e8e P2C \u7b97\u6cd5\u7684\u8d1f\u8f7d\u5747\u8861\uff0c\u5982 Envoy\u3001Nginx\u3001Linkerd \u8d1f\u8f7d\u7387: client_success/server_cpu*math.Sqrt(latency+1)*(inflight+1) client_success\uff1a\u5ba2\u6237\u7aef\u8bf7\u6c42\u6210\u529f\u7387 server_cpu\uff1a\u6bcf\u6b21\u8bf7\u6c42 response \u7684 header \u643a\u5e26\u7684\u77ac\u65f6 cpu latency\uff1a\u5ba2\u6237\u7aef\u8ba1\u7b97\u7684\u5ef6\u65f6 inflight\uff1a\u6b63\u5728\u53d1\u9001\u4e2d\u7684\u8bf7\u6c42\u6570\u91cf EWMA \u8ba1\u7b97\u5ef6\u65f6\u548c\u5ba2\u6237\u7aef\u6210\u529f\u7387 \u8d1f\u8f7d\u5747\u8861\u4e2d\u7684\u5e38\u89c1\u95ee\u9898 Q1\uff1a\u4e3a\u4ec0\u4e48\u56db\u5c42\u8d1f\u8f7d\u5747\u8861\u6d41\u91cf\u4e0d\u5747\u5300\uff1f \u56db\u5c42\u8d1f\u8f7d\u5747\u8861\u662f\u57fa\u4e8e\u8fde\u63a5\u505a\u8d1f\u8f7d\u5747\u8861\uff0c\u7531\u4e8e\u8fde\u63a5\u4fdd\u6301\uff0c\u6d41\u91cf\u4f1a\u59cb\u7ec8\u6253\u5230\u56fa\u5b9a\u8282\u70b9\uff1b\u65b0\u52a0\u5165\u7684\u8282\u70b9\uff0c\u5f80\u5f80\u9700\u8981\u8f83\u957f\u65f6\u95f4\u624d\u6709\u6d41\u91cf Q2\uff1a\u8d1f\u8f7d\u6d41\u91cf\u4e00\u81f4\uff0c\u540e\u7aef\u670d\u52a1\u7684\u8d1f\u8f7d\u5c31\u4e00\u81f4\u5417\uff1f \u56e0\u4e3a\u670d\u52a1\u5668\u786c\u4ef6\u5dee\u5f02\uff0c\u540e\u7aef\u670d\u52a1\u7684\u8d1f\u8f7d\u5f88\u96be\u4e00\u81f4 Q3\uff1a\u8282\u70b9\u4e0b\u7ebf\u540e\uff0c\u5982\u4f55\u53ca\u65f6\u6458\u9664\u8282\u70b9\uff1f \u6ce8\u518c\u4e2d\u5fc3\u5f02\u6b65\u63a8\u9001\u5b58\u5728\u5ef6\u8fdf\uff0c\u53ef\u901a\u8fc7 upsteam \u8282\u70b9\uff0c\u8fd4\u56de\u5065\u5eb7\u68c0\u67e5\u4fe1\u606f\u68c0\u67e5\u5931\u8d25\u7684\u5934\u4fe1\u606f\uff0c\u5feb\u901f\u6458\u6389\u8282\u70b9 \u4f7f\u7528\u8def\u7531\u5668\u6a21\u5757\uff08\u8f6f\u8def\u7531\uff09\u9488\u5bf9\u4e0d\u540c\u6d41\u91cf\u5b9e\u73b0\u4e0d\u540c\u7684\u8def\u7531\u7b56\u7565 \u540d\u8bcd\u89e3\u91ca Name\uff1a\u4e3b\u8981\u5bf9\u5e94 Listener \u7684\u540d\u79f0\uff0c\u7528\u7aef\u53e3\u5ea7\u4f4d\u540d\u5b57\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u552f\u4e00\u6027 Domains\uff1a\u5728 Envoy \u4e2d\u4f1a\u5148\u505a\u4e00\u6b21\u521d\u6b65\u7684\u8fc7\u6ee4\uff0c\u8fd9\u5c42\u8fc7\u6ee4\u5c31\u662f\u670d\u52a1\u57df\u540d\u3002\u4e3b\u8981\u901a\u8fc7\u5b57\u7b26\u4e32\u5339\u914d routes\uff1a\u670d\u52a1\u8def\u7531\u914d\u7f6e\uff0c\u9488\u5bf9\u8981\u8bbf\u95ee\u7684\u670d\u52a1\u8bbe\u7f6e\u591a\u6761\u8def\u7531\u914d\u7f6e match\uff1a\u8def\u7531\u5339\u914d\uff0c\u5339\u914d\u6b64\u5b57\u6bb5\u5230\u5bf9\u5e94\u7684\u8def\u7531\u8bbe\u7f6e\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u5982 path\u3001pathPrefix\u3001header \u7b49 route\uff1a\u57fa\u672c\u89c4\u5219\u8bbe\u7f6e\uff0c\u5982 Cluster \u5b57\u6bb5\u4ee3\u8868\u8def\u7531\u5bf9\u5e94\u7684\u670d\u52a1\u540d per_filter_config\uff1a\u8def\u7531\u5bf9\u5e94\u7684\u4e2d\u95f4\u4ef6\u914d\u7f6e\uff0c\u7528\u4e8e\u670d\u52a1\u6cbb\u7406\u3001\u9650\u6d41\u3001\u7194\u65ad\u7b49 \u8def\u7531\u4e2d\u95f4\u4ef6 \u628a\u4e2d\u95f4\u4ef6\u653e\u5728\u8def\u7531\u5c42 \u670d\u52a1\u91cd\u5199 sidercar \u7684\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u4fdd\u8bc1\u57fa\u7840\u8bbe\u65bd\u548c\u4e1a\u52a1\u72ec\u7acb\u6f14\u5316 RDS \u670d\u52a1\u53d1\u73b0\u670d\u52a1 \u52a8\u6001\u53d1\u73b0\u8def\u7531\u53d8\u5316\uff0c\u53ca\u65f6\u66f4\u65b0\u8def\u7531\u7b56\u7565 \u670d\u52a1\u6cbb\u7406 \u9650\u6d41\u7b97\u6cd5 \u8ba1\u6570\u5668\uff1a\u8bb0\u5f55\u4e00\u5b9a\u65f6\u95f4\u5185\u7684\u8bf7\u6c42\u91cf \u5728\u4e34\u754c\u533a\u89c1\u5bb9\u6613\u89e6\u53d1\u9519\u8bef\u7684\u5224\u5b9a \u6ed1\u52a8\u7a97\u53e3 \u6f0f\u6876 \u5728\u4e00\u5b9a\u65f6\u95f4\u5185\uff0c\u5141\u8bb8\u901a\u8fc7\u6052\u5b9a\u6570\u91cf\u7684\u8bf7\u6c42\uff0c\u5e38\u7528\u4e8e\u8bf7\u6c42\u7b2c\u4e09\u65b9 \u4ee4\u724c \u6f0f\u6876\u7684\u4f18\u5316\u7248\uff0c\u5141\u8bb8\u4e00\u5b9a\u65f6\u95f4\u5185\u7684\u7a81\u53d1\u6d41\u91cf\uff0c\u9002\u5408\u5fae\u670d\u52a1 \u5355\u673a\u9650\u6d41\u4e0e\u5168\u5c40\u9650\u6d41 \u5168\u5c40\u9650\u6d41 \u4e00\u7ec4\u670d\u52a1\uff0c\u901a\u8fc7\u5916\u90e8\u5b58\u50a8\u5bf9\u96c6\u7fa4\u6574\u4f53\u6d41\u91cf\u505a\u9650\u6d41\uff0c\u9002\u5408\u6709 DB \u6709\u541e\u5410\u91cf\u9650\u5236\u7684\u573a\u666f\uff0c\u6269\u5bb9\u4e0d\u65b9\u4fbf \u5355\u673a\u9650\u6d41 \u901a\u8fc7\u5bf9\u5355\u673a\u7684\u9650\u6d41\uff0c\u8fbe\u5230\u5bf9\u96c6\u7fa4\u7684\u9650\u6d41 \u7194\u65ad \u72b6\u6001 close\uff1a\u521d\u59cb\u4e3a\u5173\u95ed\u72b6\u6001 open\uff1a\u7194\u65ad\u4e2d halfopen\uff1a\u7ecf\u8fc7\u4e00\u6bb5\u53ef\u914d\u65f6\u95f4\uff0c\u4ece open \u53d8\u4e3a halfopen\uff0c\u6309\u7167\u7ebf\u6027\u65b9\u5f0f\u653e\u884c\u6d41\u91cf\uff0c \u4e3b\u8981\u914d\u7f6e \u6ed1\u52a8\u7a97\u53e3\u65f6\u95f4\uff1a\u5982 10s \u89e6\u53d1\u6761\u4ef6\uff1a\u5982\u9519\u8bef\u7801 \u8fde\u63a5\u6c60 HTTP \u8fde\u63a5\u6c60 HTTP/2 \u8fde\u63a5\u6c60 \u7f51\u5173 API-Gateway \u63d0\u4f9b\u7edf\u4e00\u7684\u6d41\u91cf\u5165\u53e3 \u4e1a\u52a1\u805a\u5408 \u534f\u8bae\u8f6c\u6362\uff0chttp -> grpc/thrift \u4e2d\u95f4\u4ef6\u7b56\u7565\uff0c\u9650\u6d41\u7194\u65ad\u7b49 \u5b89\u5168\u8ba4\u8bc1 \u8bc1\u4e66\u7ba1\u7406\uff0c\u5982 https \u8bc1\u4e66\u62c6\u5378\u3001\u7ba1\u7406\u7b49 \u5e38\u7528\u7f51\u5173 Kong\uff08lua + OpenResty\uff09 Service\uff1a\u540e\u7aef\u670d\u52a1 router\uff1a\u8def\u7531 Admin Api\uff1a\u5185\u90e8\u7ba1\u7406\u63a5\u53e3 Plugins\uff1a\u63d2\u4ef6 Load Balancing\uff1a\u8d1f\u8f7d\uff0cDNS \u548c\u5185\u7f6e\u8d1f\u8f7d\u5747\u8861\u5668 - Zuul\uff08Java\uff09 Traefik\uff08Go\uff09 \u53cc\u91cd\u7f51\u5173\uff08\u7cfb\u7edf\u7f51\u5173\u548c\u4e1a\u52a1\u7f51\u5173\uff09 \u5206\u522b\u9762\u5411\u8fd0\u7ef4\u548c\u5f00\u53d1 \u4e1a\u52a1\u7f51\u5173\u8fd8\u53ef\u4ee5\u6839\u636e\u4e1a\u52a1\u7ef4\u5ea6\u62c6\u5206\uff0c\u9632\u6b62\u5355\u4e00\u7f51\u5173\u6545\u969c\u5e26\u6765\u5168\u7ad9\u4e0d\u53ef\u7528 \u914d\u7f6e\u4e2d\u5fc3 \u914d\u7f6e\u4e2d\u5fc3\u7684\u4f18\u52bf \u51cf\u5c11\u53d1\u7248\u6b21\u6570 \u63d0\u5347\u5b89\u5168\u6027 \u914d\u7f6e\u4e2d\u5fc3\u7684\u7279\u6027 \u5b9e\u65f6\u611f\u77e5\u914d\u7f6e\u53d8\u66f4 \u5b9e\u65f6\u6027\u8981\u6c42\u4e0d\u9ad8\uff0c\u8981\u6c42\u6700\u7ec8\u4e00\u81f4 \u53d8\u66f4\u9891\u7387\u4f4e \u5b89\u5168\u6027\u8981\u6c42\u9ad8\uff0c\u5982\u8bc1\u4e66\u7b49 \u53d8\u66f4\u5ba1\u8ba1\uff0c\u53ef\u8ffd\u8e2a \u7070\u5ea6\u53d1\u5e03 \u53d8\u66f4\u56de\u6eda \u5f31\u4f9d\u8d56 \u901a\u8fc7 SDK \u589e\u52a0\u914d\u7f6e\u7f13\u5b58\uff0c\u5373\u4fbf\u914d\u7f6e\u4e2d\u5fc3\u670d\u52a1\u5f02\u5e38\uff0c\u4e5f\u4e0d\u5f71\u54cd\u5f53\u524d\u670d\u52a1\u4f7f\u7528 \u56fe\u5f62\u64cd\u4f5c\u754c\u9762 \u914d\u7f6e\u4e2d\u5fc3\u9009\u578b Etcd Apollo Confd \u914d\u7f6e\u4e2d\u5fc3\u7684\u5b9e\u65f6\u53d8\u66f4 \u957f\u8fde\u63a5 watch\uff0cTPC/gRPC HTTP \u957f\u8f6e\u8be2\uff0cHTTP KeepAlive \u5b9a\u65f6\u540c\u6b65 \u957f\u8fde\u63a5 watch + \u5b9a\u65f6\u8f6e\u8bad Service Mesh \u7684\u914d\u7f6e\u4e2d\u5fc3 \u670d\u52a1\u6cbb\u7406\u53ca\u4e2d\u914d\u7f6e \u7cfb\u540c\u5c42\u9762\u7684\u914d\u7f6e\u9700\u8981\u62bd\u8c61\u51fa\u6765\uff0c\u5f62\u6210\u540c\u610f\u7684\u6570\u636e\u7ed3\u6784\u4f9b\u63a7\u5236\u9762\u4f7f\u7528 \u5e73\u53f0\u5316 \u63d0\u4f9b SRE \u64cd\u4f5c\u5e73\u53f0 Trace \u53ef\u89c2\u6d4b\u7ec4\u4ef6 \u94fe\u8def\u8ffd\u8e2a \u8bb0\u5f55\u8c03\u7528\u94fe\u8def\u4fe1\u606f Metrics \u76d1\u63a7\u6307\u6807 \u8bb0\u5f55\u670d\u52a1\u72b6\u6001 \u65e5\u5fd7\u5206\u6790 \u7528\u4e8e\u6392\u67e5\u95ee\u9898 Trace \u94fe\u8def\u8ffd\u8e2a\u539f\u7406 TraceId\uff1a\u5168\u5c40\u552f\u4e00\u7684\u8c03\u7528\u6807\u8bc6 span\u3001parentSpan\uff1a\u8868\u793a\u8c03\u7528\u6b21\u6570 \u5e38\u89c1\u94fe\u8def\u8ffd\u8e2a\u7cfb\u7edf Zipkin\uff0c\u7531 Twitter \u5f00\u6e90 Jaeger\uff0c\u7531 Uber \u5f00\u6e90 Trace \u65e5\u5fd7\u843d\u76d8 SDK \u91c7\u6837\u7387 Metrics \u5e38\u7528\u7684 Metrics \u7cfb\u7edf StatsD + Graphite influDB + Telegraf Prometheus Prometheus \u7684 Metrics \u7c7b\u578b Counter \u7d2f\u52a0\u503c\uff0c\u9002\u5408\u7edf\u8ba1 QPS \u7b49 Gauge \u9002\u5408\u8bb0\u5f55\u77ac\u65f6\u503c\uff0c\u5982\u7edf\u8ba1\u7194\u65ad\u3001\u9650\u6d41\u4e8b\u4ef6 Histogram \u9002\u5408\u7edf\u8ba1 99 \u5ef6\u65f6\u7b49\u4fe1\u606f\uff0c\u9002\u5408\u9ad8\u6027\u80fd\u7684\u573a\u666f\u4f7f\u7528 Summary \u7c7b\u4f3c\u4e8e Histogram\uff0c\u6027\u80fd\u6bd4 Histogram \u5f31\uff0c\u4f46\u66f4\u7cbe\u51c6 Service Mesh \u9009\u578b https://servicemesh.es \u89e3\u51b3\u65b9\u6848 Istio Linkerd2 SOFAMaesh Kuma Consul Traefik \u670d\u52a1\u4ee3\u7406 Envoy linkerd-proxy Traefik Envoy Envoy Envoy \u5f00\u53d1\u8bed\u8a00 GO\u3001C++ Go\u3001Rust Go Go\u3001C++ Go\u3001C++ C++ \u5e73\u53f0 K8S K8S K8S\u3001VM K8S\u3001VM K8S K8S\u3001VM \u534f\u8bae\u652f\u6301 \u591a\u79cd RPC \u591a\u79cd RPC Http/gRPC \u591a\u79cd RPC \u591a\u79cd RPC \u591a\u79cd RPC \u8d1f\u8f7d\u5747\u8861 \u591a\u79cd P2C WRR \u591a\u79cd \u591a\u79cd \u591a\u79cd \u4f18\u70b9 \u77e5\u540d\u3001\u6210\u719f \u591a\u5e73\u53f0\u652f\u6301\u8f03\u597d \u9002\u5408\u5728 consul \u4e0a\u6269\u5c55 \u4e91\u5382\u5546\u4fdd\u8bc1\u670d\u52a1\u7a33\u5b9a\u6027 \u7f3a\u70b9 \u7248\u672c\u53d8\u5316\u5927 \u670d\u52a1\u6cbb\u7406\u4e0d\u5b8c\u5584 \u8282\u70b9\u90e8\u7f72\u65b9\u5f0f\uff0c\u4e0d\u9002\u5408\u5927\u89c4\u6a21\u5e94\u7528 \u51b7\u95e8 \u4e0d\u652f\u6301\u9650\u6d41\u3001\u7ed1\u5b9a consul \u7ed1\u5b9a\u4e91\u670d\u52a1\u5546 \u6570\u636e\u9762-Envoy \u4e13\u4e3a\u5927\u578b\u73b0\u4ee3 SOA \u67b6\u6784\u8bbe\u8ba1\u7684 L7 \u4ee3\u7406\u548c\u901a\u4fe1\u603b\u7ebf\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u6570\u636e\u9762\u3001\u5165\u53e3\u7f51\u5173\u4f7f\u7528\uff0c\u901a\u8fc7 xDS API \u63a7\u5236 Envoy \u7684\u76d1\u542c\u3001\u8def\u7531\u3001\u8d1f\u8f7d\u5747\u8861\u7b49\u884c\u4e3a \u6838\u5fc3\u7ec4\u4ef6 Iptable\uff1a\u901a\u8fc7 Iptable \u52ab\u6301\uff0c\u5c06\u5165\u53e3\u548c\u51fa\u53e3\u7684\u6d41\u91cf\u5168\u8f6c\u53d1\u5230 Envoy \u4e0a Listener\uff1a\u901a\u8fc7\u5efa\u7acb\u591a\u4e2a\u76d1\u542c\u5668\u63d0\u4f9b\u4e0d\u540c\u7684\u670d\u52a1\uff0c\u4f8b\u5982\uff0c\u76d1\u542c\u4e24\u4e2a\u7684\u7aef\u53e3\u5206\u522b\u8d1f\u8d23 sidercar \u6a21\u5f0f\u7684\u51fa\u6d41\u91cf\u548c\u5165\u6d41\u91cf\u3002\u5982\u8fc7\u63d0\u4f9b\u4e0d\u540c\u7684\u534f\u8bae\uff0cEnvoy \u4e5f\u4f1a\u5efa\u7acb\u4e0d\u540c\u7684\u7aef\u53e3\u63d0\u4f9b\u670d\u52a1 Worker\uff1a\u6bcf\u4e2a Listener \u7ef4\u62a4\u4e00\u4e2a\u5bf9\u5e94\u7684 worker pool\uff0cEnvoy \u4e3a\u6bcf\u4e2a\u903b\u8f91\u5904\u7406\u5668\u521b\u5efa\u4e00\u4e2a worker \u7ebf\u7a0b\uff0c\u5f53\u6211\u4eec\u5728\u4e00\u4e2a\u65b0\u7684\u7aef\u53e3\u542f\u52a8\u4e00\u4e2a\u65b0\u7684 server \u65f6\uff0cEnvoy \u4e5f\u4f1a\u521b\u5efa\u5bf9\u5e94\u7684 worker \u7ebf\u7a0b\u3002\u592a\u591a\u7684 worker \u7ebf\u7a0b\u4e0d\u4e00\u5b9a\u662f\u597d\u4e8b\uff0c\u7279\u522b\u7684\u5728 sidercar \u6a21\u5f0f Filters\uff1a\u63d0\u4f9b\u56db\u5c42\u3001\u4e03\u5c42\u7684\u6d41\u91cf\u8fc7\u6ee4\uff0c\u652f\u6301\u670d\u52a1\u6cbb\u7406 Cluster Manager\uff1a\u6d41\u91cf\u7ecf\u8fc7 Router \u8bc6\u522b\u51fa\u9700\u8981\u8f6c\u53d1\u7684 Cluster\uff0c\u901a\u8fc7 Cluster Manager \u8fdb\u884c\u670d\u52a1\u53d1\u73b0\u548c\u8d1f\u8f7d\u5747\u8861 Upstream\uff1a\u7ef4\u62a4 Endpoint \u7684\u8fde\u63a5\u6c60\uff0c\u901a\u8fc7\u8d1f\u8f7d\u5747\u8861\u5668\u5c06\u6d41\u91cf\u8f6c\u53d1\u5230\u5408\u9002\u7684 Endpoint \u4e0a Envoy \u4f5c\u4e3a sidercar \u7684\u4f7f\u7528 Envoy \u4f5c\u4e3a Sidercar \u4f7f\u7528\u65f6\uff0c\u9700\u8981\u548c\u670d\u52a1\u90e8\u7f72\u75db\u4e00\u53f0\u673a\u5668\u6216\u8005\u540c\u4e00\u4e2a pod \u4e2d\uff0c\u5f53\u7528\u6237\u8bbf\u95ee\u5176\u4ed6\u670d\u52a1\u65f6\uff0c\u6d41\u91cf\u4f1a\u81ea\u52a8\u88ab\u52ab\u6301\u5230 Envoy \u4e2d \u6d41\u7a0b \u901a\u8fc7 Iptable \u5bf9\u6d41\u91cf\u8fdb\u884c\u52ab\u6301\uff0c\u5c06\u6d41\u91cf\u8f6c\u53d1\u5230\u51fa\u6d41\u91cf\u7aef\u53e3 Envoy \u5148\u6839\u636e virtual hosts \u5339\u914d\uff0c\u518d\u901a\u8fc7\u8def\u7531\u5339\u914d\uff0c\u53d1\u73b0\u8def\u7531\u5bf9\u5e94\u7684 Cluster\uff0c\u901a\u8fc7\u670d\u52a1\u53d1\u73b0\u627e\u5230 Cluster \u5bf9\u5e94\u7684 Endpoint\uff0c\u5c06\u6d41\u91cf\u8f6c\u53d1\u5230\u76ee\u6807 pod Pod \u5185\uff0c\u901a\u8fc7 Iptable \u5bf9\u5165\u6d41\u91cf\u52ab\u6301\uff0c\u5c06\u6d41\u91cf\u52ab\u6301\u5230 Envoy \u7684\u5165\u7aef\u53e3 Envoy \u5c06\u672c\u5730\u6d41\u91cf\u8f6c\u53d1\u5230\u5bf9\u5e94\u7684 pod \u5185\u672c\u5730\u5730\u5740 Envoy \u914d\u7f6e \u9759\u6001\u914d\u7f6e \u624b\u52a8\u586b\u5199 \u52a8\u6001\u914d\u7f6e \u901a\u8fc7 xDS API \u83b7\u53d6\u914d\u7f6e Envoy \u8fb9\u7f18\u4ee3\u7406\u7f51\u5173 \u8fb9\u7f18\u4ee3\u7406\u7f51\u5173\uff1a\u8d1f\u8d23\u7f51\u683c\u51fa\u53e3\u4e0e\u5165\u53e3\u6d41\u91cf\u8d1f\u8f7d\u5747\u8861\u7684\u7279\u6b8a\u6570\u636e\u9762\uff0c\u5b83\u4e0d\u4ee5 Sidecar \u7684\u5f62\u5f0f\uff0c\u800c\u662f\u4ee5\u72ec\u7acb Pod \u7684\u5f62\u5f0f\u90e8\u7f72\u5728\u60a8\u7684\u96c6\u7fa4\u5185 \u7279\u6b8a\u8bbe\u7f6e HTTP \u5934\u6e05\u7406 \u5982 x-forward-for \u8d85\u65f6\u63a7\u5236 \u8fde\u63a5\u8d85\u65f6\uff1aEnvoy \u4e3a HTTP \u670d\u52a1\u63d0\u4f9b\u7a7a\u95f2\u8fde\u63a5\u8d85\u65f6\u65f6\u95f4\u7684\u8bbe\u7f6e\uff0c\u9ed8\u8ba4\u4e00\u5c0f\u65f6 \u6d41\u8d85\u65f6\uff1a\u6d41\u65f6 HTTP/2 \u4e2d\u7684\u6982\u5ff5\uff0cEnvoy \u901a\u8fc7\u5c06 HTTP \u8fde\u63a5\u5bf9\u5e94\u5230\u6d41\u6a21\u5f0f\uff0c\u7edf\u4e00\u8fdb\u884c\u5904\u7406 \u8def\u7531\u8d85\u65f6\uff1a\u4e3a\u67d0\u4e9b\u8bf7\u6c42\u8bbe\u7f6e\u7279\u6b8a\u7684\u914d\u7f6e \u8fde\u63a5\u9650\u5236 Envoy \u53ef\u4ee5\u9488\u5bf9\u5168\u5c40\u6216\u8005\u76d1\u542c\u5668\u8bbe\u7f6e\u8fde\u63a5\u9650\u5236\uff0c\u53ef\u4ee5\u6839\u636e\u670d\u52a1\u5cf0\u503c\u8bbe\u7f6e\u5408\u7406\u7684\u8fde\u63a5\u9650\u5236 xDS-\u63a7\u5236\u9762\u4e0e\u6570\u636e\u9762\u7684\u901a\u4fe1 xDS API\uff1a\u4e00\u5957\u53ef\u6269\u5c55\u7684\u901a\u7528\u5fae\u670d\u52a1\u63a7\u5236 API\uff0c\u8fd9\u4e9b API \u53ef\u4ee5\u505a\u5230\u670d\u52a1\u53d1\u73b0\u3001\u8def\u7531\u3001\u96c6\u7fa4\u53d1\u73b0\u7b49\u529f\u80fd\u3002xDS \u4e2d\u6bcf\u79cd\u7c7b\u578b\u5bf9\u5e94\u4e00\u4e2a\u53d1\u73b0\u7684\u8d44\u6e90\uff0c\u8fd9\u4e9b\u7c7b\u578b\u6570\u636e\u5b58\u50a8\u5728 xDS \u534f\u8bae\u7684 Discovery Request \u548c Discovery Response \u7684 TypeUrl \u5b57\u6bb5\u4e2d\uff0c\u683c\u5f0f\u4e3a\uff1atype.googleapis.com/ \\ \u8d44\u6e90\u7c7b\u578b LDS\uff1a\u76d1\u542c\u5668\u53d1\u73b0\u670d\u52a1\uff0c\u5bf9\u5e94 Listener \u6570\u636e\u7c7b\u578b CDS\uff1a\u96c6\u7fa4\u53d1\u73b0\u670d\u52a1\uff0c\u5bf9\u5e94 Cluster \u6570\u636e\u7c7b\u578b RDS\uff1a\u8def\u7531\u53d1\u73b0\u670d\u52a1\uff0c\u5bf9\u5e94 Route \u6570\u636e\u7c7b\u578b EDS\uff1a\u8282\u70b9\u53d1\u73b0\u670d\u52a1\uff0c\u5305\u542b\u670d\u52a1\u540d\u3001\u8282\u70b9\u4fe1\u606f\u3001LB \u7b56\u7565\u7b49 SDS\uff1a\u5bc6\u94a5\u53d1\u73b0\u670d\u52a1\uff0c\u7528\u4e8e\u8bc1\u4e66\u53d1\u73b0 todo\uff1agRPC \u6d41\u5f0f\u8ba2\u9605 Engress & Ingress Ingress K8S \u96c6\u7fa4\u5916\u8bbf\u95ee pod\uff0c\u9700\u8981\u901a\u8fc7 NodePort \u548c Ingress NodePort\uff1a\u901a\u8fc7\u66b4\u9732 node \u7aef\u53e3\uff0c\u63d0\u4f9b\u8bbf\u95ee K8S Service \u7684\u5165\u53e3 Ingress\uff1a\u901a\u8fc7 ingress \u8def\u7531\uff0c\u5c06\u8bf7\u6c42\u8f6c\u53d1\u5230 K8S Service \u4e0a\uff0c\u5185\u90e8\u4f9d\u7136\u662f\u4f7f\u7528\u7684 ClusterIP\uff0c\u9700\u8981\u901a\u8fc7 IPVS \u56db\u5c42\u8f6c\u53d1 Istio Gateway \u5141\u8bb8\u5916\u90e8\u6d41\u91cf\u8bbf\u95ee\u5185\u90e8\u670d\u52a1\uff0c\u4ee3\u66ff Ingress\uff1bGateway \u53ea\u9700\u8981\u914d\u7f6e\u6d41\u91cf\u8f6c\u53d1\u5373\u53ef Egress \u51fa\u53e3\u7f51\u5173 K8S Engress \u901a\u8fc7 IP \u5730\u5740\u6216\u7aef\u53e3\u5c42\u9762\uff08OSI \u7b2c 3 \u5c42\u6216\u7b2c 4 \u5c42\uff09\u63a7\u5236\u7f51\u7edc\u6d41\u91cf Istio Egress Istio Egress \u672c\u8d28\u4e0a\u662f\u4e00\u4e2a Envoy Proxy\uff0c\u901a\u8fc7 Envoy \u7684\u4e03\u5c42\u8d1f\u8f7d\uff0c\u63d0\u4f9b\u8def\u7531\u7b56\u7565","title":"\u57fa\u7840\u77e5\u8bc6"},{"location":"ServerMesh/server/#_1","text":"","title":"\u670d\u52a1\u6ce8\u518c\u4e2d\u5fc3"},{"location":"ServerMesh/server/#_2","text":"\u670d\u52a1\u4e3b\u52a8\u63a2\u6d3b \u670d\u52a1\u5b9a\u65f6\u53d1\u9001\u79df\u7ea6\u4fe1\u606f\u7ed9\u6ce8\u518c\u4e2d\u5fc3 \u5199\u64cd\u4f5c\u538b\u529b\u5927\u3001\u4e3b\u52a8\u79df\u7ea6\u4e0d\u80fd\u4fdd\u8bc1\u670d\u52a1\u5065\u5eb7 \u6ce8\u518c\u4e2d\u5fc3\u53d1\u8d77\u5065\u5eb7\u68c0\u67e5 \u53ef\u80fd\u4f1a\u53d1\u751f\u65e7\u670d\u52a1\u91cd\u65b0\u6fc0\u6d3b\u7684\u95ee\u9898 \u53ef\u7528 envory \u505a\u670d\u52a1\u540d\u68c0\u67e5 \u8c03\u7528\u623f\u7684\u8d1f\u8f7d\u5747\u8861\u5668\u8fdb\u884c\u5065\u5eb7\u68c0\u67e5 \u5982 grpc \u7684\u81ea\u52a8\u6458\u9664\u8282\u70b9 IP \u91cd\u7528\u4ea7\u751f\u810f\u6570\u636e","title":"\u5065\u5eb7\u68c0\u67e5\u8bbe\u8ba1"},{"location":"ServerMesh/server/#_3","text":"\u7279\u5f81 Nacos Eureka Zookeeper Consul Etcd \u4e00\u81f4\u6027\u534f\u8bae AP AP CP CP CP \u5065\u5eb7\u68c0\u67e5 \u591a\u79cd TTL Keep Alive \u591a\u79cd TTL \u7f51\u7edc\u5f02\u5e38\u4fdd\u62a4 \u652f\u6301 \u652f\u6301 \u4e0d\u652f\u6301 \u652f\u6301 \u4e0d\u652f\u6301 \u5b9e\u73b0\u8bed\u8a00 Java Java Java Go Go","title":"\u6ce8\u518c\u4e2d\u5fc3\u7684\u9009\u578b"},{"location":"ServerMesh/server/#_4","text":"Q1\uff1a\u6ce8\u518c\u4e2d\u5fc3\u6545\u969c\u4e86\uff0c\u670d\u52a1\u662f\u5426\u8fd8\u80fd\u6b63\u5e38\u8bbf\u95ee\uff1f \u53ea\u8981\u670d\u52a1\u7f13\u5b58\u4e86\u670d\u52a1\u6570\u636e\uff0c\u5f71\u54cd\u9762\u53ef\u63a7 \u670d\u52a1\u65e0\u6cd5\u6269\u5bb9 Q2\uff1a\u6ce8\u518c\u4e2d\u5fc3\u56e0\u4e3a\u9ad8\u8d1f\u8f7d\uff0c\u63a8\u9001\u4e86\u5f02\u5e38\u7684\u6570\u636e\uff0c\u670d\u52a1\u662f\u5426\u8fd8\u80fd\u6b63\u5e38\u8bbf\u95ee\uff1f \u5728\u5ba2\u6237\u7aef\u7684\u670d\u52a1\u53d1\u73b0 SDk \u4e2d\u52a0\u5165\u81ea\u6211\u4fdd\u62a4\u673a\u5236\uff0c\u5f53\u670d\u52a1\u7684\u8282\u70b9\u6570\u91cf\u4e0b\u964d\u8d85\u8fc7\u4e00\u5b9a\u9608\u503c\uff0c\u5c31\u8fdb\u5165\u4fdd\u62a4\u673a\u5236\uff0c\u653e\u5f03\u4f7f\u7528\u65b0\u63a8\u9001\u8fc7\u6765\u7684\u670d\u52a1\u6ce8\u518c\u4fe1\u606f Q3\uff1a\u65b0\u52a0\u5165\u7684\u673a\u5668\uff0c\u51fa\u73b0\u4e86\u7f51\u7edc\u8054\u901a\u6027\u95ee\u9898\uff08\u6ce8\u518c\u4e2d\u5fc3\u4e0e\u670d\u52a1\u7f51\u7edc\u6b63\u5e38\uff0c\u670d\u52a1\u4e4b\u95f4\u7f51\u7edc\u5f02\u5e38\uff09\uff0c\u5e94\u8be5\u600e\u6837\u5e94\u5bf9\uff1f \u5728\u8d1f\u8f7d\u5747\u8861\u4e2d\u52a0\u5165\u88ab\u52a8\u5065\u5eb7\u68c0\u67e5\uff08\u8282\u70b9\u7194\u65ad\uff09\u548c\u4e3b\u52a8\u5065\u5eb7\u68c0\u67e5\uff0c\u4e3b\u52a8\u5254\u9664\u5931\u6548\u7684\u8282\u70b9 Q4\uff1a\u670d\u52a1\u662f\u5426\u5e94\u8be5\u5b8c\u5168\u4fe1\u4efb\u6ce8\u518c\u4e2d\u5fc3\u63a8\u9001\u7684\u6570\u636e\uff1f \u76f8\u6bd4\u6ce8\u518c\u4e2d\u5fc3\u6570\u636e\uff0c\u66f4\u4fe1\u4efb\u672c\u5730\u6570\u636e \u4f7f\u7528 Envoy 2X2 \u77e9\u9635\u6765\u51b3\u5b9a\u8282\u70b9\u662f\u5426\u5e94\u8be5\u8def\u7531 \u53d1\u73b0\u72b6\u6001 \u5065\u5eb7\u68c0\u67e5\u6210\u529f \u5065\u5eb7\u68c0\u67e5\u5931\u8d25 \u53d1\u73b0 \u8def\u7531 \u4e0d\u8def\u7531 \u672a\u53d1\u73b0 \u8def\u7531 \u4e0d\u8def\u7531\uff0c\u5220\u9664 Q5\uff1a\u670d\u52a1\u53d1\u5e03\u540e\uff0c\u9020\u6210 N*M \u6b21\u4e8b\u4ef6\u901a\u77e5\uff0c\u5f62\u6210\u5e7f\u64ad\u98ce\u66b4\uff0c\u8be5\u5982\u4f55\u89e3\u51b3\uff1f \u5c06\u6d88\u606f\u63a8\u9001\u5408\u5e76","title":"\u642d\u5efa\u9ad8\u53ef\u7528\u7684\u6ce8\u518c\u4e2d\u5fc3"},{"location":"ServerMesh/server/#service-mesh","text":"\u6d89\u53ca\u8de8\u96c6\u7fa4\u8bbf\u95ee EDS \u670d\u52a1\u53d1\u73b0\u89c4\u8303 \u4e0e K8S \u96c6\u7fa4\u7ed3\u5408 \u9700\u8981\u6ce8\u610f\u8282\u70b9 IP \u53d8\u5316\u7684\u95ee\u9898","title":"Service Mesh \u4e2d\u7684\u6ce8\u518c\u4e2d\u5fc3"},{"location":"ServerMesh/server/#service-mesh_1","text":"\u7531 sidercar \u4ee3\u7406\u6ce8\u518c\uff0c\u51cf\u5c11\u670d\u52a1\u5f00\u53d1\u91cf\uff0c\u53ef\u4ee5\u63a7\u5236\u6ce8\u518c meta \u4fe1\u606f\u4e00\u81f4\u5316 \u901a\u8fc7\u63a7\u5236\u9762\u805a\u5408\u591a\u79cd\u3001\u591a\u4e2a\u6ce8\u518c\u4e2d\u5fc3\u6570\u636e\uff0c\u964d\u4f4e\u5355\u4e00\u6ce8\u518c\u4e2d\u5fc3\u7684\u8bfb\u5199\u538b\u529b\uff0c\u66f4\u5bb9\u6613\u6c34\u5e73\u6269\u5c55 \u901a\u8fc7 sidercar \u63d0\u4f9b\u670d\u52a1\u6b63\u786e\u6027\u68c0\u67e5\u529f\u80fd\uff0c\u901a\u8fc7 header \u4e2d\u589e\u52a0\u670d\u52a1\u540d\u4e0e\u672c\u5730\u670d\u52a1\u540d\u79f0\u505a\u6821\u9a8c","title":"Service Mesh \u4e2d\u7684\u6ce8\u518c\u4e2d\u5fc3\u7684\u4f18\u52bf"},{"location":"ServerMesh/server/#_5","text":"","title":"\u8d1f\u8f7d\u5747\u8861"},{"location":"ServerMesh/server/#_6","text":"\u786c\u4ef6\u8d1f\u8f7d\u5747\u8861\u5668 F5 Citrix NetScaler radware Array DNS \u8d1f\u8f7d\u5747\u8861 \u8f6f\u4ef6\u8d1f\u8f7d\u5747\u8861 Nginx\uff08\u4e03\u5c42\uff09 HAProxy\uff08\u4e03\u5c42\uff09 LVS\uff08\u56db\u5c42\uff09 \u7a0b\u5e8f\u5185\u8d1f\u8f7d\u5747\u8861\uff1a\u8bb2\u8d1f\u8f7d\u5747\u8861\u653e\u5728\u670d\u52a1\u7a0b\u5e8f\u5185\u90e8 Service Mesh \u8d1f\u8f7d\u5747\u8861\uff1a\u5229\u7528 sidercar \u505a\u8d1f\u8f7d\u5747\u8861\uff0c\u5c5e\u4e8e\u8f6f\u4ef6\u8d1f\u8f7d\u5747\u8861\u7684\u4e00\u79cd","title":"\u5e94\u8be5\u9009\u62e9\u4ec0\u4e48\u6837\u7684\u8d1f\u8f7d\u5747\u8861\u5668"},{"location":"ServerMesh/server/#_7","text":"Round Robin\uff1a\u8f6e\u8bad\u7b97\u6cd5\uff0c\u9002\u5408\u8282\u70b9\u6743\u91cd\u4e00\u81f4\u7684\u573a\u666f Weighted Round Robin\uff1a\u5c06\u6743\u91cd\u5927\u7684\u8282\u70b9\u5206\u6563\u5f00\uff0c\u53d6\u6700\u5927\u516c\u7ea6\u6570\uff0c\u505a\u7b80\u5355\u8f6e\u8bad\uff1b\u5728\u670d\u52a1\u91cd\u542f\u65f6\u4f1a\u51fa\u73b0\u8bf7\u6c42\u96c6\u4e2d\u7684\u73b0\u8c61 Weighted Random\uff1a\u901a\u8fc7\u968f\u673a\u7684\u65b9\u5f0f\u8fdb\u884c\u8d1f\u8f7d\uff0c\u914d\u5408\u4e8c\u5206\u67e5\u627e\uff0c\u5c06\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\u5230 logn\uff0c\u5bf9\u540e\u7aef\u8282\u70b9\u975e\u5e38\u5747\u8861 Two Random Choices\uff1a\u901a\u8fc7\u4e24\u6b21\u968f\u673a\u7b97\u6cd5\uff0c\u9009\u53d6\u4e24\u4e2a\u8282\u70b9\uff0c\u518d\u5bf9\u6bd4\u4e24\u4e2a\u8282\u70b9\u7684\u8d1f\u8f7d\u3001\u5ef6\u65f6\u7b49\u4fe1\u606f\uff0c\u9009\u53d6\u6700\u4f18\u7684\u4e00\u4e2a Stick Session\uff1a\u540c\u4e00\u4e2a\u5ba2\u6237\u7aef\uff0c\u8d1f\u8f7d\u5230\u7684\u8282\u70b9\u76f8\u540c\uff0c\u8d1f\u8f7d\u4e0d\u5747\u8861\uff0c\u614e\u7528","title":"\u8d1f\u8f7d\u7b97\u6cd5"},{"location":"ServerMesh/server/#_8","text":"\u4e3b\u52a8\u5065\u5eb7\u68c0\u67e5 \u5728\u8d1f\u8f7d\u5747\u8861\u4e2d\u4e3b\u52a8\u5065\u5eb7\u68c0\u67e5\u3002 \u4f1a\u4ea7\u751f\u5927\u91cf\u65e0\u7528 ping\uff1b\u5efa\u8bae\u9009\u62e9\u83b7\u53d6\u8fc7\u5c11\u8282\u70b9\u65f6\u624d\u89e6\u53d1\uff0c\u5982\u5f53\u524d\u8282\u70b9\u6570\u6bd4\u5341\u4e94\u5206\u949f\u524d\u7684\u5c11 20%\u65f6\u89e6\u53d1 \u6050\u614c\u9608\u503c \u5f53\u5065\u5eb7\u68c0\u67e5\u540e\uff0c\u53ef\u7528\u7684\u8282\u70b9\u4f9d\u7136\u5c0f\u4e8e\u9608\u503c\uff0810%\uff09\uff0c\u5219\u5ffd\u7565\u5065\u5eb7\u68c0\u67e5\u7684\u7ed3\u679c\uff0c\u628a\u6d41\u91cf\u8d1f\u8f7d\u5230\u6240\u6709\u8282\u70b9\uff0c\u5305\u62ec\u5f02\u5e38\u7684\u8282\u70b9\uff0c\u4fdd\u8bc1\u7406\u7531\u7684\u5747\u8861\uff0c\u5065\u5eb7\u7684\u8282\u70b9\u4e5f\u4e0d\u4f1a\u56e0\u4e3a\u6fc0\u589e\u7684\u6d41\u91cf\u800c\u96ea\u5d29 \u88ab\u52a8\u5065\u5eb7\u68c0\u67e5 \u901a\u8fc7\u6b63\u5e38\u7684\u6d41\u91cf\u5224\u65ad\u8282\u70b9\u662f\u5426\u6b63\u5e38\uff0c\u4e5f\u5c31\u662f\u5229\u7528\u8282\u70b9\u7194\u65ad\u5668 \u5c06 499 \u53ca\u4ee5\u4e0a\u7684\u9519\u8bef\u7801\u8ba4\u4e3a\u662f\u540e\u7aef\u670d\u52a1\u5f02\u5e38\uff0c\u7edf\u8ba1 10 \u79d2\u6ed1\u52a8\u7a97\u53e3\u5185\u5f02\u5e38\u8bf7\u6c42\u5360\u6bd4","title":"\u670d\u52a1\u53d1\u73b0\u540e\u5982\u4f55\u5b9e\u73b0\u8282\u70b9\u4fdd\u62a4"},{"location":"ServerMesh/server/#_9","text":"\u5229\u7528\u8282\u70b9\u4e0a\u7684\u6807\u7b7e\u8fdb\u884c\u6d41\u91cf\u8def\u7531\uff1b\u628a\u67d0\u4e00\u7c7b\u8282\u70b9\u6253\u4e0a\u76f8\u540c\u6807\u7b7e\uff0c\u8d1f\u8f7d\u5747\u8861\u5668\u6839\u636e\u76f8\u540c\u6807\u7b7e\u5206\u53d1\u6d41\u91cf \u91d1\u4e1d\u96c0\u53d1\u5e03\u3001A/B \u6d4b\u8bd5\u3001\u6545\u969c\u6f14\u7ec3\u3001\u6d41\u91cf\u5206\u533a\u7b49 \u5982\u4f55\u64cd\u4f5c \u5728\u7f51\u5173\u5c42\uff0c\u6839\u636e header \u4fe1\u606f\u6216\u8005\u6743\u91cd\u5bf9\u6d41\u91cf\u8fdb\u884c\u67d3\u8272 \u5728\u6ce8\u518c\u4e2d\u5fc3\u4e2d\u4e5f\u8981\u5199\u5165\u5bf9\u5e94\u7684 metaData \u4fe1\u606f\uff0c\u7528\u6237\u5728\u8d1f\u8f7d\u5747\u8861\u5c42\u8fdb\u884c\u6d41\u91cf\u8fc7\u6ee4","title":"\u8282\u70b9\u67d3\u8272"},{"location":"ServerMesh/server/#_10","text":"\u5728 Envoy \u4e2d\u88ab\u79f0\u4e3a zone \u611f\u77e5\u8def\u7531 \u540d\u8bcd\u89e3\u91ca \u59cb\u53d1\u96c6\u7fa4\uff1a\u8c03\u7528\u65b9\uff0cClient \u7684\u670d\u52a1\u8282\u70b9\u96c6\u7fa4 \u4e0a\u6e38\u96c6\u7fa4\uff1a\u88ab\u8c03\u7528\u65b9\uff0cServer \u670d\u52a1\u8282\u70b9\u96c6\u7fa4 zone\uff1a\u533a\u57df\uff08Region\uff09\u548c\u53ef\u7528\u533a\uff08Availability Zone\uff09 zone \u611f\u77e5\u8def\u7531\uff0c\u4f1a\u6839\u636e\u59cb\u53d1\u96c6\u7fa4\u7684\u6240\u5728\u533a\u8282\u70b9\u6570\u91cf\u548c\u76ee\u6807\u96c6\u7fa4\u7684\u6240\u5728\u533a\u8282\u70b9\u6570\u91cf\uff0c\u52a8\u6001\u8ba1\u7b97\u4e00\u4e2a\u76f8\u5bf9\u7684\u6bd4\u4f8b\uff1b\u901a\u8fc7\u52a8\u6001\u8ba1\u7b97\u4e0a\u4e0b\u6e38\u7684\u8282\u70b9\u6570\uff0c\u5c06\u6d41\u91cf\u6b63\u786e\u7684\u8def\u7531\u5230\u5404\u4e2a\u5206\u533a\uff0c\u907f\u514d\u4e0a\u6e38\u96c6\u7fa4\u627f\u53d7\u8fc7\u5927\u7684\u8bbf\u95ee\u91cf\u800c\u5d29\u6e83 \u59cb\u53d1\u96c6\u7fa4\u7684\u672c\u5730 zone \u8282\u70b9\u6570\u91cf\u5c0f\u4e8e\u6216\u7b49\u4e8e\u4e0a\u6e38\u670d\u52a1\u8282\u70b9\u6570\u91cf\uff0c\u76f4\u63a5\u5168\u91cf\u8d1f\u8f7d\u5230\u4e0a\u6e38\u96c6\u7fa4 zone\uff0c\u5e76\u8ba1\u7b97\u5269\u4f59\u6d41\u91cf\u6bd4\u4f8b\u7528\u4e8e\u670d\u52a1\u5176\u5b83 zone \u59cb\u53d1\u96c6\u7fa4\u7684\u672c\u5730 zone \u8282\u70b9\u6570\u91cf\u5927\u4e8e\u4e0a\u6e38\u670d\u52a1\u8282\u70b9\u6570\u91cf\uff0c\u9700\u8981\u5c06\u5269\u4f59\u6d41\u91cf\u8def\u7531\u5230\u5176\u5b83\u4e0a\u6e38\u670d\u52a1 zone \u8282\u70b9\u7f29\u91cf\u53d8\u5316\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u77ac\u95f4\u7684\u6d41\u91cf\u4e0d\u5747\u8861 P2C\uff08pick off to chioce\uff09","title":"\u5730\u57df\u4f18\u5148\u8bbf\u95ee"},{"location":"ServerMesh/server/#ewma","text":"\u57fa\u4e8e P2C \u7b97\u6cd5\u7684\u8d1f\u8f7d\u5747\u8861\uff0c\u5982 Envoy\u3001Nginx\u3001Linkerd \u8d1f\u8f7d\u7387: client_success/server_cpu*math.Sqrt(latency+1)*(inflight+1) client_success\uff1a\u5ba2\u6237\u7aef\u8bf7\u6c42\u6210\u529f\u7387 server_cpu\uff1a\u6bcf\u6b21\u8bf7\u6c42 response \u7684 header \u643a\u5e26\u7684\u77ac\u65f6 cpu latency\uff1a\u5ba2\u6237\u7aef\u8ba1\u7b97\u7684\u5ef6\u65f6 inflight\uff1a\u6b63\u5728\u53d1\u9001\u4e2d\u7684\u8bf7\u6c42\u6570\u91cf EWMA \u8ba1\u7b97\u5ef6\u65f6\u548c\u5ba2\u6237\u7aef\u6210\u529f\u7387","title":"\u5ef6\u65f6\u3001\u8d1f\u8f7d\u52a0\u6743\uff08EWMA\uff09"},{"location":"ServerMesh/server/#_11","text":"Q1\uff1a\u4e3a\u4ec0\u4e48\u56db\u5c42\u8d1f\u8f7d\u5747\u8861\u6d41\u91cf\u4e0d\u5747\u5300\uff1f \u56db\u5c42\u8d1f\u8f7d\u5747\u8861\u662f\u57fa\u4e8e\u8fde\u63a5\u505a\u8d1f\u8f7d\u5747\u8861\uff0c\u7531\u4e8e\u8fde\u63a5\u4fdd\u6301\uff0c\u6d41\u91cf\u4f1a\u59cb\u7ec8\u6253\u5230\u56fa\u5b9a\u8282\u70b9\uff1b\u65b0\u52a0\u5165\u7684\u8282\u70b9\uff0c\u5f80\u5f80\u9700\u8981\u8f83\u957f\u65f6\u95f4\u624d\u6709\u6d41\u91cf Q2\uff1a\u8d1f\u8f7d\u6d41\u91cf\u4e00\u81f4\uff0c\u540e\u7aef\u670d\u52a1\u7684\u8d1f\u8f7d\u5c31\u4e00\u81f4\u5417\uff1f \u56e0\u4e3a\u670d\u52a1\u5668\u786c\u4ef6\u5dee\u5f02\uff0c\u540e\u7aef\u670d\u52a1\u7684\u8d1f\u8f7d\u5f88\u96be\u4e00\u81f4 Q3\uff1a\u8282\u70b9\u4e0b\u7ebf\u540e\uff0c\u5982\u4f55\u53ca\u65f6\u6458\u9664\u8282\u70b9\uff1f \u6ce8\u518c\u4e2d\u5fc3\u5f02\u6b65\u63a8\u9001\u5b58\u5728\u5ef6\u8fdf\uff0c\u53ef\u901a\u8fc7 upsteam \u8282\u70b9\uff0c\u8fd4\u56de\u5065\u5eb7\u68c0\u67e5\u4fe1\u606f\u68c0\u67e5\u5931\u8d25\u7684\u5934\u4fe1\u606f\uff0c\u5feb\u901f\u6458\u6389\u8282\u70b9","title":"\u8d1f\u8f7d\u5747\u8861\u4e2d\u7684\u5e38\u89c1\u95ee\u9898"},{"location":"ServerMesh/server/#_12","text":"","title":"\u4f7f\u7528\u8def\u7531\u5668\u6a21\u5757\uff08\u8f6f\u8def\u7531\uff09\u9488\u5bf9\u4e0d\u540c\u6d41\u91cf\u5b9e\u73b0\u4e0d\u540c\u7684\u8def\u7531\u7b56\u7565"},{"location":"ServerMesh/server/#_13","text":"Name\uff1a\u4e3b\u8981\u5bf9\u5e94 Listener \u7684\u540d\u79f0\uff0c\u7528\u7aef\u53e3\u5ea7\u4f4d\u540d\u5b57\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u552f\u4e00\u6027 Domains\uff1a\u5728 Envoy \u4e2d\u4f1a\u5148\u505a\u4e00\u6b21\u521d\u6b65\u7684\u8fc7\u6ee4\uff0c\u8fd9\u5c42\u8fc7\u6ee4\u5c31\u662f\u670d\u52a1\u57df\u540d\u3002\u4e3b\u8981\u901a\u8fc7\u5b57\u7b26\u4e32\u5339\u914d routes\uff1a\u670d\u52a1\u8def\u7531\u914d\u7f6e\uff0c\u9488\u5bf9\u8981\u8bbf\u95ee\u7684\u670d\u52a1\u8bbe\u7f6e\u591a\u6761\u8def\u7531\u914d\u7f6e match\uff1a\u8def\u7531\u5339\u914d\uff0c\u5339\u914d\u6b64\u5b57\u6bb5\u5230\u5bf9\u5e94\u7684\u8def\u7531\u8bbe\u7f6e\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u5982 path\u3001pathPrefix\u3001header \u7b49 route\uff1a\u57fa\u672c\u89c4\u5219\u8bbe\u7f6e\uff0c\u5982 Cluster \u5b57\u6bb5\u4ee3\u8868\u8def\u7531\u5bf9\u5e94\u7684\u670d\u52a1\u540d per_filter_config\uff1a\u8def\u7531\u5bf9\u5e94\u7684\u4e2d\u95f4\u4ef6\u914d\u7f6e\uff0c\u7528\u4e8e\u670d\u52a1\u6cbb\u7406\u3001\u9650\u6d41\u3001\u7194\u65ad\u7b49","title":"\u540d\u8bcd\u89e3\u91ca"},{"location":"ServerMesh/server/#_14","text":"\u628a\u4e2d\u95f4\u4ef6\u653e\u5728\u8def\u7531\u5c42","title":"\u8def\u7531\u4e2d\u95f4\u4ef6"},{"location":"ServerMesh/server/#_15","text":"sidercar \u7684\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u4fdd\u8bc1\u57fa\u7840\u8bbe\u65bd\u548c\u4e1a\u52a1\u72ec\u7acb\u6f14\u5316","title":"\u670d\u52a1\u91cd\u5199"},{"location":"ServerMesh/server/#rds","text":"\u52a8\u6001\u53d1\u73b0\u8def\u7531\u53d8\u5316\uff0c\u53ca\u65f6\u66f4\u65b0\u8def\u7531\u7b56\u7565","title":"RDS \u670d\u52a1\u53d1\u73b0\u670d\u52a1"},{"location":"ServerMesh/server/#_16","text":"","title":"\u670d\u52a1\u6cbb\u7406"},{"location":"ServerMesh/server/#_17","text":"\u8ba1\u6570\u5668\uff1a\u8bb0\u5f55\u4e00\u5b9a\u65f6\u95f4\u5185\u7684\u8bf7\u6c42\u91cf \u5728\u4e34\u754c\u533a\u89c1\u5bb9\u6613\u89e6\u53d1\u9519\u8bef\u7684\u5224\u5b9a \u6ed1\u52a8\u7a97\u53e3 \u6f0f\u6876 \u5728\u4e00\u5b9a\u65f6\u95f4\u5185\uff0c\u5141\u8bb8\u901a\u8fc7\u6052\u5b9a\u6570\u91cf\u7684\u8bf7\u6c42\uff0c\u5e38\u7528\u4e8e\u8bf7\u6c42\u7b2c\u4e09\u65b9 \u4ee4\u724c \u6f0f\u6876\u7684\u4f18\u5316\u7248\uff0c\u5141\u8bb8\u4e00\u5b9a\u65f6\u95f4\u5185\u7684\u7a81\u53d1\u6d41\u91cf\uff0c\u9002\u5408\u5fae\u670d\u52a1","title":"\u9650\u6d41\u7b97\u6cd5"},{"location":"ServerMesh/server/#_18","text":"\u5168\u5c40\u9650\u6d41 \u4e00\u7ec4\u670d\u52a1\uff0c\u901a\u8fc7\u5916\u90e8\u5b58\u50a8\u5bf9\u96c6\u7fa4\u6574\u4f53\u6d41\u91cf\u505a\u9650\u6d41\uff0c\u9002\u5408\u6709 DB \u6709\u541e\u5410\u91cf\u9650\u5236\u7684\u573a\u666f\uff0c\u6269\u5bb9\u4e0d\u65b9\u4fbf \u5355\u673a\u9650\u6d41 \u901a\u8fc7\u5bf9\u5355\u673a\u7684\u9650\u6d41\uff0c\u8fbe\u5230\u5bf9\u96c6\u7fa4\u7684\u9650\u6d41","title":"\u5355\u673a\u9650\u6d41\u4e0e\u5168\u5c40\u9650\u6d41"},{"location":"ServerMesh/server/#_19","text":"\u72b6\u6001 close\uff1a\u521d\u59cb\u4e3a\u5173\u95ed\u72b6\u6001 open\uff1a\u7194\u65ad\u4e2d halfopen\uff1a\u7ecf\u8fc7\u4e00\u6bb5\u53ef\u914d\u65f6\u95f4\uff0c\u4ece open \u53d8\u4e3a halfopen\uff0c\u6309\u7167\u7ebf\u6027\u65b9\u5f0f\u653e\u884c\u6d41\u91cf\uff0c \u4e3b\u8981\u914d\u7f6e \u6ed1\u52a8\u7a97\u53e3\u65f6\u95f4\uff1a\u5982 10s \u89e6\u53d1\u6761\u4ef6\uff1a\u5982\u9519\u8bef\u7801","title":"\u7194\u65ad"},{"location":"ServerMesh/server/#_20","text":"HTTP \u8fde\u63a5\u6c60 HTTP/2 \u8fde\u63a5\u6c60","title":"\u8fde\u63a5\u6c60"},{"location":"ServerMesh/server/#_21","text":"","title":"\u7f51\u5173"},{"location":"ServerMesh/server/#api-gateway","text":"\u63d0\u4f9b\u7edf\u4e00\u7684\u6d41\u91cf\u5165\u53e3 \u4e1a\u52a1\u805a\u5408 \u534f\u8bae\u8f6c\u6362\uff0chttp -> grpc/thrift \u4e2d\u95f4\u4ef6\u7b56\u7565\uff0c\u9650\u6d41\u7194\u65ad\u7b49 \u5b89\u5168\u8ba4\u8bc1 \u8bc1\u4e66\u7ba1\u7406\uff0c\u5982 https \u8bc1\u4e66\u62c6\u5378\u3001\u7ba1\u7406\u7b49","title":"API-Gateway"},{"location":"ServerMesh/server/#_22","text":"Kong\uff08lua + OpenResty\uff09 Service\uff1a\u540e\u7aef\u670d\u52a1 router\uff1a\u8def\u7531 Admin Api\uff1a\u5185\u90e8\u7ba1\u7406\u63a5\u53e3 Plugins\uff1a\u63d2\u4ef6 Load Balancing\uff1a\u8d1f\u8f7d\uff0cDNS \u548c\u5185\u7f6e\u8d1f\u8f7d\u5747\u8861\u5668 - Zuul\uff08Java\uff09 Traefik\uff08Go\uff09","title":"\u5e38\u7528\u7f51\u5173"},{"location":"ServerMesh/server/#_23","text":"\u5206\u522b\u9762\u5411\u8fd0\u7ef4\u548c\u5f00\u53d1 \u4e1a\u52a1\u7f51\u5173\u8fd8\u53ef\u4ee5\u6839\u636e\u4e1a\u52a1\u7ef4\u5ea6\u62c6\u5206\uff0c\u9632\u6b62\u5355\u4e00\u7f51\u5173\u6545\u969c\u5e26\u6765\u5168\u7ad9\u4e0d\u53ef\u7528","title":"\u53cc\u91cd\u7f51\u5173\uff08\u7cfb\u7edf\u7f51\u5173\u548c\u4e1a\u52a1\u7f51\u5173\uff09"},{"location":"ServerMesh/server/#_24","text":"","title":"\u914d\u7f6e\u4e2d\u5fc3"},{"location":"ServerMesh/server/#_25","text":"\u51cf\u5c11\u53d1\u7248\u6b21\u6570 \u63d0\u5347\u5b89\u5168\u6027","title":"\u914d\u7f6e\u4e2d\u5fc3\u7684\u4f18\u52bf"},{"location":"ServerMesh/server/#_26","text":"\u5b9e\u65f6\u611f\u77e5\u914d\u7f6e\u53d8\u66f4 \u5b9e\u65f6\u6027\u8981\u6c42\u4e0d\u9ad8\uff0c\u8981\u6c42\u6700\u7ec8\u4e00\u81f4 \u53d8\u66f4\u9891\u7387\u4f4e \u5b89\u5168\u6027\u8981\u6c42\u9ad8\uff0c\u5982\u8bc1\u4e66\u7b49 \u53d8\u66f4\u5ba1\u8ba1\uff0c\u53ef\u8ffd\u8e2a \u7070\u5ea6\u53d1\u5e03 \u53d8\u66f4\u56de\u6eda \u5f31\u4f9d\u8d56 \u901a\u8fc7 SDK \u589e\u52a0\u914d\u7f6e\u7f13\u5b58\uff0c\u5373\u4fbf\u914d\u7f6e\u4e2d\u5fc3\u670d\u52a1\u5f02\u5e38\uff0c\u4e5f\u4e0d\u5f71\u54cd\u5f53\u524d\u670d\u52a1\u4f7f\u7528 \u56fe\u5f62\u64cd\u4f5c\u754c\u9762","title":"\u914d\u7f6e\u4e2d\u5fc3\u7684\u7279\u6027"},{"location":"ServerMesh/server/#_27","text":"Etcd Apollo Confd","title":"\u914d\u7f6e\u4e2d\u5fc3\u9009\u578b"},{"location":"ServerMesh/server/#_28","text":"\u957f\u8fde\u63a5 watch\uff0cTPC/gRPC HTTP \u957f\u8f6e\u8be2\uff0cHTTP KeepAlive \u5b9a\u65f6\u540c\u6b65 \u957f\u8fde\u63a5 watch + \u5b9a\u65f6\u8f6e\u8bad","title":"\u914d\u7f6e\u4e2d\u5fc3\u7684\u5b9e\u65f6\u53d8\u66f4"},{"location":"ServerMesh/server/#service-mesh_2","text":"\u670d\u52a1\u6cbb\u7406\u53ca\u4e2d\u914d\u7f6e \u7cfb\u540c\u5c42\u9762\u7684\u914d\u7f6e\u9700\u8981\u62bd\u8c61\u51fa\u6765\uff0c\u5f62\u6210\u540c\u610f\u7684\u6570\u636e\u7ed3\u6784\u4f9b\u63a7\u5236\u9762\u4f7f\u7528 \u5e73\u53f0\u5316 \u63d0\u4f9b SRE \u64cd\u4f5c\u5e73\u53f0","title":"Service Mesh \u7684\u914d\u7f6e\u4e2d\u5fc3"},{"location":"ServerMesh/server/#trace","text":"","title":"Trace"},{"location":"ServerMesh/server/#_29","text":"\u94fe\u8def\u8ffd\u8e2a \u8bb0\u5f55\u8c03\u7528\u94fe\u8def\u4fe1\u606f Metrics \u76d1\u63a7\u6307\u6807 \u8bb0\u5f55\u670d\u52a1\u72b6\u6001 \u65e5\u5fd7\u5206\u6790 \u7528\u4e8e\u6392\u67e5\u95ee\u9898","title":"\u53ef\u89c2\u6d4b\u7ec4\u4ef6"},{"location":"ServerMesh/server/#trace_1","text":"TraceId\uff1a\u5168\u5c40\u552f\u4e00\u7684\u8c03\u7528\u6807\u8bc6 span\u3001parentSpan\uff1a\u8868\u793a\u8c03\u7528\u6b21\u6570","title":"Trace \u94fe\u8def\u8ffd\u8e2a\u539f\u7406"},{"location":"ServerMesh/server/#_30","text":"Zipkin\uff0c\u7531 Twitter \u5f00\u6e90 Jaeger\uff0c\u7531 Uber \u5f00\u6e90","title":"\u5e38\u89c1\u94fe\u8def\u8ffd\u8e2a\u7cfb\u7edf"},{"location":"ServerMesh/server/#trace_2","text":"SDK \u91c7\u6837\u7387","title":"Trace \u65e5\u5fd7\u843d\u76d8"},{"location":"ServerMesh/server/#metrics","text":"","title":"Metrics"},{"location":"ServerMesh/server/#metrics_1","text":"StatsD + Graphite influDB + Telegraf Prometheus","title":"\u5e38\u7528\u7684 Metrics \u7cfb\u7edf"},{"location":"ServerMesh/server/#prometheus-metrics","text":"Counter \u7d2f\u52a0\u503c\uff0c\u9002\u5408\u7edf\u8ba1 QPS \u7b49 Gauge \u9002\u5408\u8bb0\u5f55\u77ac\u65f6\u503c\uff0c\u5982\u7edf\u8ba1\u7194\u65ad\u3001\u9650\u6d41\u4e8b\u4ef6 Histogram \u9002\u5408\u7edf\u8ba1 99 \u5ef6\u65f6\u7b49\u4fe1\u606f\uff0c\u9002\u5408\u9ad8\u6027\u80fd\u7684\u573a\u666f\u4f7f\u7528 Summary \u7c7b\u4f3c\u4e8e Histogram\uff0c\u6027\u80fd\u6bd4 Histogram \u5f31\uff0c\u4f46\u66f4\u7cbe\u51c6","title":"Prometheus \u7684 Metrics \u7c7b\u578b"},{"location":"ServerMesh/server/#service-mesh_3","text":"https://servicemesh.es \u89e3\u51b3\u65b9\u6848 Istio Linkerd2 SOFAMaesh Kuma Consul Traefik \u670d\u52a1\u4ee3\u7406 Envoy linkerd-proxy Traefik Envoy Envoy Envoy \u5f00\u53d1\u8bed\u8a00 GO\u3001C++ Go\u3001Rust Go Go\u3001C++ Go\u3001C++ C++ \u5e73\u53f0 K8S K8S K8S\u3001VM K8S\u3001VM K8S K8S\u3001VM \u534f\u8bae\u652f\u6301 \u591a\u79cd RPC \u591a\u79cd RPC Http/gRPC \u591a\u79cd RPC \u591a\u79cd RPC \u591a\u79cd RPC \u8d1f\u8f7d\u5747\u8861 \u591a\u79cd P2C WRR \u591a\u79cd \u591a\u79cd \u591a\u79cd \u4f18\u70b9 \u77e5\u540d\u3001\u6210\u719f \u591a\u5e73\u53f0\u652f\u6301\u8f03\u597d \u9002\u5408\u5728 consul \u4e0a\u6269\u5c55 \u4e91\u5382\u5546\u4fdd\u8bc1\u670d\u52a1\u7a33\u5b9a\u6027 \u7f3a\u70b9 \u7248\u672c\u53d8\u5316\u5927 \u670d\u52a1\u6cbb\u7406\u4e0d\u5b8c\u5584 \u8282\u70b9\u90e8\u7f72\u65b9\u5f0f\uff0c\u4e0d\u9002\u5408\u5927\u89c4\u6a21\u5e94\u7528 \u51b7\u95e8 \u4e0d\u652f\u6301\u9650\u6d41\u3001\u7ed1\u5b9a consul \u7ed1\u5b9a\u4e91\u670d\u52a1\u5546","title":"Service Mesh \u9009\u578b"},{"location":"ServerMesh/server/#-envoy","text":"\u4e13\u4e3a\u5927\u578b\u73b0\u4ee3 SOA \u67b6\u6784\u8bbe\u8ba1\u7684 L7 \u4ee3\u7406\u548c\u901a\u4fe1\u603b\u7ebf\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u6570\u636e\u9762\u3001\u5165\u53e3\u7f51\u5173\u4f7f\u7528\uff0c\u901a\u8fc7 xDS API \u63a7\u5236 Envoy \u7684\u76d1\u542c\u3001\u8def\u7531\u3001\u8d1f\u8f7d\u5747\u8861\u7b49\u884c\u4e3a","title":"\u6570\u636e\u9762-Envoy"},{"location":"ServerMesh/server/#_31","text":"Iptable\uff1a\u901a\u8fc7 Iptable \u52ab\u6301\uff0c\u5c06\u5165\u53e3\u548c\u51fa\u53e3\u7684\u6d41\u91cf\u5168\u8f6c\u53d1\u5230 Envoy \u4e0a Listener\uff1a\u901a\u8fc7\u5efa\u7acb\u591a\u4e2a\u76d1\u542c\u5668\u63d0\u4f9b\u4e0d\u540c\u7684\u670d\u52a1\uff0c\u4f8b\u5982\uff0c\u76d1\u542c\u4e24\u4e2a\u7684\u7aef\u53e3\u5206\u522b\u8d1f\u8d23 sidercar \u6a21\u5f0f\u7684\u51fa\u6d41\u91cf\u548c\u5165\u6d41\u91cf\u3002\u5982\u8fc7\u63d0\u4f9b\u4e0d\u540c\u7684\u534f\u8bae\uff0cEnvoy \u4e5f\u4f1a\u5efa\u7acb\u4e0d\u540c\u7684\u7aef\u53e3\u63d0\u4f9b\u670d\u52a1 Worker\uff1a\u6bcf\u4e2a Listener \u7ef4\u62a4\u4e00\u4e2a\u5bf9\u5e94\u7684 worker pool\uff0cEnvoy \u4e3a\u6bcf\u4e2a\u903b\u8f91\u5904\u7406\u5668\u521b\u5efa\u4e00\u4e2a worker \u7ebf\u7a0b\uff0c\u5f53\u6211\u4eec\u5728\u4e00\u4e2a\u65b0\u7684\u7aef\u53e3\u542f\u52a8\u4e00\u4e2a\u65b0\u7684 server \u65f6\uff0cEnvoy \u4e5f\u4f1a\u521b\u5efa\u5bf9\u5e94\u7684 worker \u7ebf\u7a0b\u3002\u592a\u591a\u7684 worker \u7ebf\u7a0b\u4e0d\u4e00\u5b9a\u662f\u597d\u4e8b\uff0c\u7279\u522b\u7684\u5728 sidercar \u6a21\u5f0f Filters\uff1a\u63d0\u4f9b\u56db\u5c42\u3001\u4e03\u5c42\u7684\u6d41\u91cf\u8fc7\u6ee4\uff0c\u652f\u6301\u670d\u52a1\u6cbb\u7406 Cluster Manager\uff1a\u6d41\u91cf\u7ecf\u8fc7 Router \u8bc6\u522b\u51fa\u9700\u8981\u8f6c\u53d1\u7684 Cluster\uff0c\u901a\u8fc7 Cluster Manager \u8fdb\u884c\u670d\u52a1\u53d1\u73b0\u548c\u8d1f\u8f7d\u5747\u8861 Upstream\uff1a\u7ef4\u62a4 Endpoint \u7684\u8fde\u63a5\u6c60\uff0c\u901a\u8fc7\u8d1f\u8f7d\u5747\u8861\u5668\u5c06\u6d41\u91cf\u8f6c\u53d1\u5230\u5408\u9002\u7684 Endpoint \u4e0a","title":"\u6838\u5fc3\u7ec4\u4ef6"},{"location":"ServerMesh/server/#envoy-sidercar","text":"Envoy \u4f5c\u4e3a Sidercar \u4f7f\u7528\u65f6\uff0c\u9700\u8981\u548c\u670d\u52a1\u90e8\u7f72\u75db\u4e00\u53f0\u673a\u5668\u6216\u8005\u540c\u4e00\u4e2a pod \u4e2d\uff0c\u5f53\u7528\u6237\u8bbf\u95ee\u5176\u4ed6\u670d\u52a1\u65f6\uff0c\u6d41\u91cf\u4f1a\u81ea\u52a8\u88ab\u52ab\u6301\u5230 Envoy \u4e2d \u6d41\u7a0b \u901a\u8fc7 Iptable \u5bf9\u6d41\u91cf\u8fdb\u884c\u52ab\u6301\uff0c\u5c06\u6d41\u91cf\u8f6c\u53d1\u5230\u51fa\u6d41\u91cf\u7aef\u53e3 Envoy \u5148\u6839\u636e virtual hosts \u5339\u914d\uff0c\u518d\u901a\u8fc7\u8def\u7531\u5339\u914d\uff0c\u53d1\u73b0\u8def\u7531\u5bf9\u5e94\u7684 Cluster\uff0c\u901a\u8fc7\u670d\u52a1\u53d1\u73b0\u627e\u5230 Cluster \u5bf9\u5e94\u7684 Endpoint\uff0c\u5c06\u6d41\u91cf\u8f6c\u53d1\u5230\u76ee\u6807 pod Pod \u5185\uff0c\u901a\u8fc7 Iptable \u5bf9\u5165\u6d41\u91cf\u52ab\u6301\uff0c\u5c06\u6d41\u91cf\u52ab\u6301\u5230 Envoy \u7684\u5165\u7aef\u53e3 Envoy \u5c06\u672c\u5730\u6d41\u91cf\u8f6c\u53d1\u5230\u5bf9\u5e94\u7684 pod \u5185\u672c\u5730\u5730\u5740","title":"Envoy \u4f5c\u4e3a sidercar \u7684\u4f7f\u7528"},{"location":"ServerMesh/server/#envoy","text":"\u9759\u6001\u914d\u7f6e \u624b\u52a8\u586b\u5199 \u52a8\u6001\u914d\u7f6e \u901a\u8fc7 xDS API \u83b7\u53d6\u914d\u7f6e","title":"Envoy \u914d\u7f6e"},{"location":"ServerMesh/server/#envoy_1","text":"\u8fb9\u7f18\u4ee3\u7406\u7f51\u5173\uff1a\u8d1f\u8d23\u7f51\u683c\u51fa\u53e3\u4e0e\u5165\u53e3\u6d41\u91cf\u8d1f\u8f7d\u5747\u8861\u7684\u7279\u6b8a\u6570\u636e\u9762\uff0c\u5b83\u4e0d\u4ee5 Sidecar \u7684\u5f62\u5f0f\uff0c\u800c\u662f\u4ee5\u72ec\u7acb Pod \u7684\u5f62\u5f0f\u90e8\u7f72\u5728\u60a8\u7684\u96c6\u7fa4\u5185 \u7279\u6b8a\u8bbe\u7f6e HTTP \u5934\u6e05\u7406 \u5982 x-forward-for \u8d85\u65f6\u63a7\u5236 \u8fde\u63a5\u8d85\u65f6\uff1aEnvoy \u4e3a HTTP \u670d\u52a1\u63d0\u4f9b\u7a7a\u95f2\u8fde\u63a5\u8d85\u65f6\u65f6\u95f4\u7684\u8bbe\u7f6e\uff0c\u9ed8\u8ba4\u4e00\u5c0f\u65f6 \u6d41\u8d85\u65f6\uff1a\u6d41\u65f6 HTTP/2 \u4e2d\u7684\u6982\u5ff5\uff0cEnvoy \u901a\u8fc7\u5c06 HTTP \u8fde\u63a5\u5bf9\u5e94\u5230\u6d41\u6a21\u5f0f\uff0c\u7edf\u4e00\u8fdb\u884c\u5904\u7406 \u8def\u7531\u8d85\u65f6\uff1a\u4e3a\u67d0\u4e9b\u8bf7\u6c42\u8bbe\u7f6e\u7279\u6b8a\u7684\u914d\u7f6e \u8fde\u63a5\u9650\u5236 Envoy \u53ef\u4ee5\u9488\u5bf9\u5168\u5c40\u6216\u8005\u76d1\u542c\u5668\u8bbe\u7f6e\u8fde\u63a5\u9650\u5236\uff0c\u53ef\u4ee5\u6839\u636e\u670d\u52a1\u5cf0\u503c\u8bbe\u7f6e\u5408\u7406\u7684\u8fde\u63a5\u9650\u5236","title":"Envoy \u8fb9\u7f18\u4ee3\u7406\u7f51\u5173"},{"location":"ServerMesh/server/#xds-","text":"xDS API\uff1a\u4e00\u5957\u53ef\u6269\u5c55\u7684\u901a\u7528\u5fae\u670d\u52a1\u63a7\u5236 API\uff0c\u8fd9\u4e9b API \u53ef\u4ee5\u505a\u5230\u670d\u52a1\u53d1\u73b0\u3001\u8def\u7531\u3001\u96c6\u7fa4\u53d1\u73b0\u7b49\u529f\u80fd\u3002xDS \u4e2d\u6bcf\u79cd\u7c7b\u578b\u5bf9\u5e94\u4e00\u4e2a\u53d1\u73b0\u7684\u8d44\u6e90\uff0c\u8fd9\u4e9b\u7c7b\u578b\u6570\u636e\u5b58\u50a8\u5728 xDS \u534f\u8bae\u7684 Discovery Request \u548c Discovery Response \u7684 TypeUrl \u5b57\u6bb5\u4e2d\uff0c\u683c\u5f0f\u4e3a\uff1atype.googleapis.com/ \\ \u8d44\u6e90\u7c7b\u578b LDS\uff1a\u76d1\u542c\u5668\u53d1\u73b0\u670d\u52a1\uff0c\u5bf9\u5e94 Listener \u6570\u636e\u7c7b\u578b CDS\uff1a\u96c6\u7fa4\u53d1\u73b0\u670d\u52a1\uff0c\u5bf9\u5e94 Cluster \u6570\u636e\u7c7b\u578b RDS\uff1a\u8def\u7531\u53d1\u73b0\u670d\u52a1\uff0c\u5bf9\u5e94 Route \u6570\u636e\u7c7b\u578b EDS\uff1a\u8282\u70b9\u53d1\u73b0\u670d\u52a1\uff0c\u5305\u542b\u670d\u52a1\u540d\u3001\u8282\u70b9\u4fe1\u606f\u3001LB \u7b56\u7565\u7b49 SDS\uff1a\u5bc6\u94a5\u53d1\u73b0\u670d\u52a1\uff0c\u7528\u4e8e\u8bc1\u4e66\u53d1\u73b0","title":"xDS-\u63a7\u5236\u9762\u4e0e\u6570\u636e\u9762\u7684\u901a\u4fe1"},{"location":"ServerMesh/server/#todogrpc","text":"","title":"todo\uff1agRPC \u6d41\u5f0f\u8ba2\u9605"},{"location":"ServerMesh/server/#engress-ingress","text":"","title":"Engress &amp; Ingress"},{"location":"ServerMesh/server/#ingress","text":"K8S \u96c6\u7fa4\u5916\u8bbf\u95ee pod\uff0c\u9700\u8981\u901a\u8fc7 NodePort \u548c Ingress NodePort\uff1a\u901a\u8fc7\u66b4\u9732 node \u7aef\u53e3\uff0c\u63d0\u4f9b\u8bbf\u95ee K8S Service \u7684\u5165\u53e3 Ingress\uff1a\u901a\u8fc7 ingress \u8def\u7531\uff0c\u5c06\u8bf7\u6c42\u8f6c\u53d1\u5230 K8S Service \u4e0a\uff0c\u5185\u90e8\u4f9d\u7136\u662f\u4f7f\u7528\u7684 ClusterIP\uff0c\u9700\u8981\u901a\u8fc7 IPVS \u56db\u5c42\u8f6c\u53d1","title":"Ingress"},{"location":"ServerMesh/server/#istio-gateway","text":"\u5141\u8bb8\u5916\u90e8\u6d41\u91cf\u8bbf\u95ee\u5185\u90e8\u670d\u52a1\uff0c\u4ee3\u66ff Ingress\uff1bGateway \u53ea\u9700\u8981\u914d\u7f6e\u6d41\u91cf\u8f6c\u53d1\u5373\u53ef","title":"Istio Gateway"},{"location":"ServerMesh/server/#egress","text":"","title":"Egress \u51fa\u53e3\u7f51\u5173"},{"location":"ServerMesh/server/#k8s-engress","text":"\u901a\u8fc7 IP \u5730\u5740\u6216\u7aef\u53e3\u5c42\u9762\uff08OSI \u7b2c 3 \u5c42\u6216\u7b2c 4 \u5c42\uff09\u63a7\u5236\u7f51\u7edc\u6d41\u91cf","title":"K8S Engress"},{"location":"ServerMesh/server/#istio-egress","text":"Istio Egress \u672c\u8d28\u4e0a\u662f\u4e00\u4e2a Envoy Proxy\uff0c\u901a\u8fc7 Envoy \u7684\u4e03\u5c42\u8d1f\u8f7d\uff0c\u63d0\u4f9b\u8def\u7531\u7b56\u7565","title":"Istio Egress"},{"location":"develop/git-options/","tags":["Git"],"text":"Git \u5e38\u7528\u547d\u4ee4 Learn https://www.atlassian.com/git/tutorials/learn-git-with-bitbucket-cloud \u64a4\u9500\u4fee\u6539 \u76ee\u7684 \u5907\u6ce8 \u89e3\u51b3\u65b9\u6848 \u820d\u5f03\u5de5\u4f5c\u76ee\u5f55\u4e2d\u5bf9\u4e00\u4e2a\u6587\u4ef6\u7684\u4fee\u6539 \u4fee\u6539\u7684\u6587\u4ef6\u672a\u88ab\u6682\u5b58/\u63d0\u4ea4 git checkout -- filename \u820d\u5f03\u5de5\u4f5c\u76ee\u5f55\u4e2d\u6240\u6709\u672a\u4fdd\u5b58\u7684\u53d8\u66f4 \u6587\u4ef6\u5df2\u6682\u5b58\uff0c\u4f46\u672a\u63d0\u4ea4 git reset --hard \u5408\u5e76\u4e0e\u67d0\u4e2a\u7279\u5b9a\u63d0\u4ea4\uff08\u4f46\u4e0d\u542b\uff09\u4e4b\u95f4\u7684\u591a\u4e2a\u63d0\u4ea4 reset commit \u79fb\u9664\u6240\u6709\u672a\u4fdd\u5b58\u7684\u53d8\u66f4\uff0c\u5305\u542b\u672a\u8ddf\u8e2a\u7684\u6587\u4ef6 \u4fee\u6539\u7684\u6587\u4ef6\u672a\u88ab\u63d0\u4ea4 reset -fd \u79fb\u9664\u6240\u6709\u5df2\u6682\u5b58\u7684\u53d8\u66f4\u548c\u5728\u67d0\u4e2a\u63d0\u4ea4\u4e4b\u524d\u63d0\u4ea4\u7684\u5de5\u4f5c\uff0c\u4f46\u4e0d\u79fb\u9664\u5de5\u4f5c\u76ee\u5f55\u4e2d\u7684\u65b0\u6587\u4ef6 reset --hard commit \u79fb\u9664\u4e4b\u524d\u7684\u5de5\u4f5c\uff0c\u4f46\u5b8c\u6574\u4fdd\u7559\u63d0\u4ea4\u5386\u53f2\u8bb0\u5f55\uff08\u524d\u8fdb\u5f0f\u56de\u6eda\uff09 \u5206\u652f\u5df2\u7ecf\u88ab\u53d1\u5e03\uff0c\u5de5\u4f5c\u76ee\u5f55\u662f\u5e72\u51c0\u7684 revert commit \u4ece\u5206\u652f\u5386\u53f2\u8bb0\u5f55\u4e2d\u79fb\u9664\u4e00\u4e2a\u5355\u72ec\u7684\u63d0\u4ea4 \u4fee\u6539\u7684\u6587\u4ef6\u5df2\u7ecf\u88ab\u63d0\u4ea4\uff0c\u5de5\u4f5c\u76ee\u5f55\u662f\u5e72\u51c0\u7684\uff0c\u5206\u652f\u5c1a\u672a\u8fdb\u884c\u53d1\u5e03 rebase --interactive commit \u4fdd\u7559\u4e4b\u524d\u7684\u5de5\u4f5c\uff0c\u4f46\u4ee5\u53e6\u4e00\u4e2a\u63d0\u4ea4\u5408\u5e76 \u9009\u62e9 squash\uff08\u538b\u7f29\uff09\u9009\u9879 rebase --interactive commit","title":"Git\u5e38\u7528\u64cd\u4f5c"},{"location":"develop/git-options/#git","text":"","title":"Git \u5e38\u7528\u547d\u4ee4"},{"location":"develop/git-options/#learn","text":"https://www.atlassian.com/git/tutorials/learn-git-with-bitbucket-cloud","title":"Learn"},{"location":"develop/git-options/#_1","text":"\u76ee\u7684 \u5907\u6ce8 \u89e3\u51b3\u65b9\u6848 \u820d\u5f03\u5de5\u4f5c\u76ee\u5f55\u4e2d\u5bf9\u4e00\u4e2a\u6587\u4ef6\u7684\u4fee\u6539 \u4fee\u6539\u7684\u6587\u4ef6\u672a\u88ab\u6682\u5b58/\u63d0\u4ea4 git checkout -- filename \u820d\u5f03\u5de5\u4f5c\u76ee\u5f55\u4e2d\u6240\u6709\u672a\u4fdd\u5b58\u7684\u53d8\u66f4 \u6587\u4ef6\u5df2\u6682\u5b58\uff0c\u4f46\u672a\u63d0\u4ea4 git reset --hard \u5408\u5e76\u4e0e\u67d0\u4e2a\u7279\u5b9a\u63d0\u4ea4\uff08\u4f46\u4e0d\u542b\uff09\u4e4b\u95f4\u7684\u591a\u4e2a\u63d0\u4ea4 reset commit \u79fb\u9664\u6240\u6709\u672a\u4fdd\u5b58\u7684\u53d8\u66f4\uff0c\u5305\u542b\u672a\u8ddf\u8e2a\u7684\u6587\u4ef6 \u4fee\u6539\u7684\u6587\u4ef6\u672a\u88ab\u63d0\u4ea4 reset -fd \u79fb\u9664\u6240\u6709\u5df2\u6682\u5b58\u7684\u53d8\u66f4\u548c\u5728\u67d0\u4e2a\u63d0\u4ea4\u4e4b\u524d\u63d0\u4ea4\u7684\u5de5\u4f5c\uff0c\u4f46\u4e0d\u79fb\u9664\u5de5\u4f5c\u76ee\u5f55\u4e2d\u7684\u65b0\u6587\u4ef6 reset --hard commit \u79fb\u9664\u4e4b\u524d\u7684\u5de5\u4f5c\uff0c\u4f46\u5b8c\u6574\u4fdd\u7559\u63d0\u4ea4\u5386\u53f2\u8bb0\u5f55\uff08\u524d\u8fdb\u5f0f\u56de\u6eda\uff09 \u5206\u652f\u5df2\u7ecf\u88ab\u53d1\u5e03\uff0c\u5de5\u4f5c\u76ee\u5f55\u662f\u5e72\u51c0\u7684 revert commit \u4ece\u5206\u652f\u5386\u53f2\u8bb0\u5f55\u4e2d\u79fb\u9664\u4e00\u4e2a\u5355\u72ec\u7684\u63d0\u4ea4 \u4fee\u6539\u7684\u6587\u4ef6\u5df2\u7ecf\u88ab\u63d0\u4ea4\uff0c\u5de5\u4f5c\u76ee\u5f55\u662f\u5e72\u51c0\u7684\uff0c\u5206\u652f\u5c1a\u672a\u8fdb\u884c\u53d1\u5e03 rebase --interactive commit \u4fdd\u7559\u4e4b\u524d\u7684\u5de5\u4f5c\uff0c\u4f46\u4ee5\u53e6\u4e00\u4e2a\u63d0\u4ea4\u5408\u5e76 \u9009\u62e9 squash\uff08\u538b\u7f29\uff09\u9009\u9879 rebase --interactive commit","title":"\u64a4\u9500\u4fee\u6539"},{"location":"develop/tools/","tags":["Tools"],"text":"\u5e38\u7528\u5de5\u5177","title":"\u5e38\u7528\u5de5\u5177"},{"location":"develop/tools/#_1","text":"","title":"\u5e38\u7528\u5de5\u5177"},{"location":"linux/analysis/","tags":["Linux"],"text":"\u6027\u80fd\u5206\u6790 \u5e73\u5747\u8d1f\u8f7d \u6267\u884c top \u6216\u8005 uptime \u547d\u4ee4\uff0c\u53ef\u4ee5\u770b\u5230\u5982\u4e0b\u4fe1\u606f 21 :40 up 44 days, 49 mins, 3 users, load averages: 2 .45 3 .11 3 .40 \u4fe1\u606f\u542b\u4e49 \u5f53\u524d\u65f6\u95f4 \u7cfb\u7edf\u8fd0\u884c\u65f6\u95f4 \u6b63\u5728\u767b\u5f55\u7528\u6237\u6570 \u8fc7\u53bb 1 \u5206\u949f\u30015 \u5206\u949f\u300115 \u5206\u949f\u7684\u5e73\u5747\u8d1f\u8f7d\uff08Load Average\uff09 \u7b80\u5355\u6765\u8bf4\uff0c\u5e73\u5747\u8d1f\u8f7d\u662f\u6307\u5355\u4f4d\u65f6\u95f4\u5185\uff0c\u7cfb\u7edf\u5904\u4e8e\u53ef\u8fd0\u884c\u72b6\u6001\u548c\u4e0d\u53ef\u4e2d\u65ad\u72b6\u6001\u7684\u5e73\u5747\u8fdb\u7a0b\u6570\uff0c\u4e5f\u5c31\u662f\u5e73\u5747\u6d3b\u8dc3\u8fdb\u7a0b\u6570 \u53ef\u8fd0\u884c\u72b6\u6001\u7684\u8fdb\u7a0b\uff0c\u662f\u6307\u6b63\u5728\u4f7f\u7528 CPU \u6216\u8005\u6b63\u5728\u7b49\u5f85 CPU \u7684\u8fdb\u7a0b\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u5e38\u7528 ps \u547d\u4ee4\u770b\u5230\u7684\uff0c\u5904\u4e8e R \u72b6\u6001\uff08Running \u6216 Runnable\uff09\u7684\u8fdb\u7a0b \u4e0d\u53ef\u4e2d\u65ad\u72b6\u6001\u7684\u8fdb\u7a0b\u5219\u662f\u6b63\u5904\u4e8e\u5185\u6838\u6001\u5173\u952e\u6d41\u7a0b\u4e2d\u7684\u8fdb\u7a0b\uff0c\u5e76\u4e14\u8fd9\u4e9b\u6d41\u7a0b\u662f\u4e0d\u53ef\u6253\u65ad\u7684\uff0c\u6bd4\u5982\u6700\u5e38\u89c1\u7684\u662f\u7b49\u5f85\u786c\u4ef6\u8bbe\u5907\u7684 I/O \u54cd\u5e94\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u5728 ps \u547d\u4ee4\u4e2d\u770b\u5230\u7684 D \u72b6\u6001\uff08Uninterruptible Sleep\uff0c\u4e5f\u79f0\u4e3a Disk Sleep\uff09\u7684\u8fdb\u7a0b \u4f46\u5b83\u5b9e\u9645\u4e0a\u662f\u6d3b\u8dc3\u8fdb\u7a0b\u6570\u7684\u6307\u6570\u8870\u51cf\u5e73\u5747\u503c \u6ce8\u610f \u5e73\u5747\u8d1f\u8f7d\u9ad8\u6709\u53ef\u80fd\u662f CPU \u5bc6\u96c6\u578b\u8fdb\u7a0b\u5bfc\u81f4\u7684 \u5e73\u5747\u8d1f\u8f7d\u9ad8\u5e76\u4e0d\u4e00\u5b9a\u4ee3\u8868 CPU \u4f7f\u7528\u7387\u9ad8\uff0c\u8fd8\u6709\u53ef\u80fd\u662f I/O \u66f4\u7e41\u5fd9\u4e86 \u5f53\u53d1\u73b0\u8d1f\u8f7d\u9ad8\u7684\u65f6\u5019\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 mpstat\u3001pidstat \u7b49\u5de5\u5177\uff0c\u8f85\u52a9\u5206\u6790\u8d1f\u8f7d\u7684\u6765\u6e90 \u4e0a\u4e0b\u6587\u5207\u6362 \u8fdb\u7a0b\u4e0a\u4e0b\u6587\u5207\u6362 \u7cfb\u7edf\u8c03\u7528\uff0c\u5b8c\u6210\u4ece\u7528\u6237\u6001\u5230\u5185\u6838\u6001\u7684\u8f6c\u53d8 CPU \u5bc4\u5b58\u5668\u91cc\u539f\u6765\u7528\u6237\u6001\u7684\u6307\u4ee4\u4f4d\u7f6e\uff0c\u9700\u8981\u5148\u4fdd\u5b58\u8d77\u6765\u3002\u63a5\u7740\uff0c\u4e3a\u4e86\u6267\u884c\u5185\u6838\u6001\u4ee3\u7801 CPU \u5bc4\u5b58\u5668\u9700\u8981\u66f4\u65b0\u4e3a\u5185\u6838\u6001\u6307\u4ee4\u7684\u65b0\u4f4d\u7f6e\u3002\u6700\u540e\u624d\u662f\u8df3\u8f6c\u5230\u5185\u6838\u6001\u8fd0\u884c\u5185\u6838\u4efb\u52a1 \u800c\u7cfb\u7edf\u8c03\u7528\u7ed3\u675f\u540e\uff0cCPU \u5bc4\u5b58\u5668\u9700\u8981\u6062\u590d\u539f\u6765\u4fdd\u5b58\u7684\u7528\u6237\u6001\uff0c\u7136\u540e\u518d\u5207\u6362\u5230\u7528\u6237\u7a7a\u95f4\uff0c\u7ee7\u7eed\u8fd0\u884c\u8fdb\u7a0b\u3002\u6240\u4ee5\uff0c\u4e00\u6b21\u7cfb\u7edf\u8c03\u7528\u7684\u8fc7\u7a0b\uff0c\u5176\u5b9e\u662f\u53d1\u751f\u4e86\u4e24\u6b21 CPU \u4e0a\u4e0b\u6587\u5207\u6362 \u8fdb\u7a0b\u95f4\u5207\u6362 \u4ece\u4e00\u4e2a\u8fdb\u7a0b\u5207\u6362\u5230\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u8fd0\u884c \u5728\u4fdd\u5b58\u5f53\u524d\u8fdb\u7a0b\u7684\u5185\u6838\u72b6\u6001\u548c CPU \u5bc4\u5b58\u5668\u4e4b\u524d\uff0c\u9700\u8981\u5148\u628a\u8be5\u8fdb\u7a0b\u7684\u865a\u62df\u5185\u5b58\u3001\u6808\u7b49\u4fdd\u5b58\u4e0b\u6765\uff1b\u800c\u52a0\u8f7d\u4e86\u4e0b\u4e00\u8fdb\u7a0b\u7684\u5185\u6838\u6001\u540e\uff0c\u8fd8\u9700\u8981\u5237\u65b0\u8fdb\u7a0b\u7684\u865a\u62df\u5185\u5b58\u548c\u7528\u6237\u6808 \u8fdb\u7a0b\u7684\u4e0a\u4e0b\u6587\u4e0d\u4ec5\u5305\u62ec\u4e86\u865a\u62df\u5185\u5b58\u3001\u6808\u3001\u5168\u5c40\u53d8\u91cf\u7b49\u7528\u6237\u7a7a\u95f4\u7684\u8d44\u6e90\uff0c\u8fd8\u5305\u62ec\u4e86\u5185\u6838\u5806\u6808\u3001\u5bc4\u5b58\u5668\u7b49\u5185\u6838\u7a7a\u95f4\u7684\u72b6\u6001 \u7ebf\u7a0b\u4e0a\u4e0b\u6587\u5207\u6362 \u524d\u540e\u4e24\u4e2a\u7ebf\u7a0b\u5c5e\u4e8e\u4e0d\u540c\u8fdb\u7a0b \u56e0\u4e3a\u8d44\u6e90\u4e0d\u5171\u4eab\uff0c\u6240\u4ee5\u5207\u6362\u8fc7\u7a0b\u5c31\u8ddf\u8fdb\u7a0b\u4e0a\u4e0b\u6587\u5207\u6362\u662f\u4e00\u6837 \u524d\u540e\u4e24\u4e2a\u7ebf\u7a0b\u5c5e\u4e8e\u540c\u4e00\u4e2a\u8fdb\u7a0b \u56e0\u4e3a\u865a\u62df\u5185\u5b58\u662f\u5171\u4eab\u7684\uff0c\u6240\u4ee5\u5728\u5207\u6362\u65f6\uff0c\u865a\u62df\u5185\u5b58\u8fd9\u4e9b\u8d44\u6e90\u5c31\u4fdd\u6301\u4e0d\u52a8\uff0c\u53ea\u9700\u8981\u5207\u6362\u7ebf\u7a0b\u7684\u79c1\u6709\u6570\u636e\u3001\u5bc4\u5b58\u5668\u7b49\u4e0d\u5171\u4eab\u7684\u6570\u636e \u4e2d\u65ad\u4e0a\u4e0b\u6587\u5207\u6362 \u4e2d\u65ad\u4e0a\u4e0b\u6587\u5207\u6362\u5e76\u4e0d\u6d89\u53ca\u5230\u8fdb\u7a0b\u7684\u7528\u6237\u6001 \u5373\u4fbf\u4e2d\u65ad\u8fc7\u7a0b\u6253\u65ad\u4e86\u4e00\u4e2a\u6b63\u5904\u5728\u7528\u6237\u6001\u7684\u8fdb\u7a0b\uff0c\u4e5f\u4e0d\u9700\u8981\u4fdd\u5b58\u548c\u6062\u590d\u8fd9\u4e2a\u8fdb\u7a0b\u7684\u865a\u62df\u5185\u5b58\u3001\u5168\u5c40\u53d8\u91cf\u7b49\u7528\u6237\u6001\u8d44\u6e90\u3002\u4e2d\u65ad\u4e0a\u4e0b\u6587\uff0c\u5176\u5b9e\u53ea\u5305\u62ec\u5185\u6838\u6001\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\u6267\u884c\u6240\u5fc5\u9700\u7684\u72b6\u6001\uff0c\u5305\u62ec CPU \u5bc4\u5b58\u5668\u3001\u5185\u6838\u5806\u6808\u3001\u786c\u4ef6\u4e2d\u65ad\u53c2\u6570\u7b49 \u4e0a\u534a\u90e8 \u7528\u6765\u5feb\u901f\u5904\u7406\u4e2d\u65ad,\u4e3b\u8981\u5904\u7406\u8ddf\u786c\u4ef6\u7d27\u5bc6\u76f8\u5173\u7684\u6216\u65f6\u95f4\u654f\u611f\u7684\u5de5\u4f5c \u4e0b\u534a\u90e8 \u5ef6\u8fdf\u5904\u7406\u4e0a\u534a\u90e8\u672a\u5b8c\u6210\u7684\u5de5\u4f5c\uff0c\u901a\u5e38\u4ee5\u5185\u6838\u7ebf\u7a0b\u7684\u65b9\u5f0f\u8fd0\u884c\uff1b\u901a\u8fc7\u8f6f\u4e2d\u65ad\u4fe1\u53f7\u901a\u77e5 \u67e5\u770b\u7cfb\u7edf\u7684\u4e0a\u4e0b\u6587\u5207\u6362\u60c5\u51b5 \u901a\u8fc7 vmstat \u67e5\u770b\u7cfb\u7edf\u603b\u4f53\u7684\u4e0a\u4e0b\u6587\u5207\u6362 \u901a\u8fc7 pidstat \u67e5\u770b\u8fdb\u7a0b\u5207\u6362\u8be6\u60c5 cswch\uff1a\u81ea\u613f\u4e0a\u4e0b\u6587\u5207\u6362\uff0c\u662f\u6307\u8fdb\u7a0b\u65e0\u6cd5\u83b7\u53d6\u6240\u9700\u8d44\u6e90\uff0c\u5bfc\u81f4\u7684\u4e0a\u4e0b\u6587\u5207\u6362 nvcswch\uff1a\u975e\u81ea\u613f\u4e0a\u4e0b\u6587\u5207\u6362\uff0c\u5219\u662f\u6307\u8fdb\u7a0b\u7531\u4e8e\u65f6\u95f4\u7247\u5df2\u5230\u7b49\u539f\u56e0\uff0c\u88ab\u7cfb\u7edf\u5f3a\u5236\u8c03\u5ea6\uff0c\u8fdb\u800c\u53d1\u751f\u7684\u4e0a\u4e0b\u6587\u5207\u6362 \u95ee\u9898\u5206\u6790 \u81ea\u613f\u4e0a\u4e0b\u6587\u5207\u6362\u53d8\u591a\u4e86\uff0c\u8bf4\u660e\u8fdb\u7a0b\u90fd\u5728\u7b49\u5f85\u8d44\u6e90\uff0c\u6709\u53ef\u80fd\u53d1\u751f\u4e86 I/O \u7b49\u5176\u4ed6\u95ee\u9898 \u975e\u81ea\u613f\u4e0a\u4e0b\u6587\u5207\u6362\u53d8\u591a\u4e86\uff0c\u8bf4\u660e\u8fdb\u7a0b\u90fd\u5728\u88ab\u5f3a\u5236\u8c03\u5ea6\uff0c\u4e5f\u5c31\u662f\u90fd\u5728\u4e89\u62a2 CPU\uff0c\u8bf4\u660e CPU \u7684\u786e\u6210\u4e86\u74f6\u9888 \u4e2d\u65ad\u6b21\u6570\u53d8\u591a\u4e86\uff0c\u8bf4\u660e CPU \u88ab\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u5360\u7528\uff0c\u8fd8\u9700\u8981\u901a\u8fc7\u67e5\u770b /proc/interrupts \u6587\u4ef6\u6765\u5206\u6790\u5177\u4f53\u7684\u4e2d\u65ad\u7c7b\u578b \u8fdb\u7a0b\u8c03\u5ea6\u65f6\u673a \u4e3a\u4e86\u4fdd\u8bc1\u6240\u6709\u8fdb\u7a0b\u53ef\u4ee5\u5f97\u5230\u516c\u5e73\u8c03\u5ea6\uff0cCPU \u65f6\u95f4\u88ab\u5212\u5206\u4e3a\u4e00\u6bb5\u6bb5\u7684\u65f6\u95f4\u7247\uff0c\u8fd9\u4e9b\u65f6\u95f4\u7247\u518d\u88ab\u8f6e\u6d41\u5206\u914d\u7ed9\u5404\u4e2a\u8fdb\u7a0b\u3002\u8fd9\u6837\uff0c\u5f53\u67d0\u4e2a\u8fdb\u7a0b\u7684\u65f6\u95f4\u7247\u8017\u5c3d\u4e86\uff0c\u5c31\u4f1a\u88ab\u7cfb\u7edf\u6302\u8d77\uff0c\u5207\u6362\u5230\u5176\u5b83\u6b63\u5728\u7b49\u5f85 CPU \u7684\u8fdb\u7a0b\u8fd0\u884c \u8fdb\u7a0b\u5728\u7cfb\u7edf\u8d44\u6e90\u4e0d\u8db3\uff08\u6bd4\u5982\u5185\u5b58\u4e0d\u8db3\uff09\u65f6\uff0c\u8981\u7b49\u5230\u8d44\u6e90\u6ee1\u8db3\u540e\u624d\u53ef\u4ee5\u8fd0\u884c\uff0c\u8fd9\u4e2a\u65f6\u5019\u8fdb\u7a0b\u4e5f\u4f1a\u88ab\u6302\u8d77\uff0c\u5e76\u7531\u7cfb\u7edf\u8c03\u5ea6\u5176\u4ed6\u8fdb\u7a0b\u8fd0\u884c \u5f53\u8fdb\u7a0b\u901a\u8fc7\u7761\u7720\u51fd\u6570 sleep \u8fd9\u6837\u7684\u65b9\u6cd5\u5c06\u81ea\u5df1\u4e3b\u52a8\u6302\u8d77\u65f6\uff0c\u81ea\u7136\u4e5f\u4f1a\u91cd\u65b0\u8c03\u5ea6 \u5f53\u6709\u4f18\u5148\u7ea7\u66f4\u9ad8\u7684\u8fdb\u7a0b\u8fd0\u884c\u65f6\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u9ad8\u4f18\u5148\u7ea7\u8fdb\u7a0b\u7684\u8fd0\u884c\uff0c\u5f53\u524d\u8fdb\u7a0b\u4f1a\u88ab\u6302\u8d77\uff0c\u7531\u9ad8\u4f18\u5148\u7ea7\u8fdb\u7a0b\u6765\u8fd0\u884c \u53d1\u751f\u786c\u4ef6\u4e2d\u65ad\u65f6\uff0cCPU \u4e0a\u7684\u8fdb\u7a0b\u4f1a\u88ab\u4e2d\u65ad\u6302\u8d77\uff0c\u8f6c\u800c\u6267\u884c\u5185\u6838\u4e2d\u7684\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f CPU \u4f7f\u7528\u7387 CPU \u4f7f\u7528\u7387 = 1 - \u7a7a\u95f2\u65f6\u95f4 / \u603b CPU \u65f6\u95f4 \u5e73\u5747 CPU \u4f7f\u7528\u7387 = (\u7a7a\u95f2\u65f6\u95f4 2 - \u7a7a\u95f2\u65f6\u95f4 1) / (\u603b CPU \u65f6\u95f4 2 - \u603b CPU \u65f6\u95f4 1) \u6027\u80fd\u5de5\u5177\u4e00\u822c\u90fd\u4f1a\u53d6\u95f4\u9694\u4e00\u6bb5\u65f6\u95f4\uff08\u6bd4\u5982 3 \u79d2\uff09\u7684\u4e24\u6b21\u503c \u5e38\u7528\u7684\u6027\u80fd\u5206\u6790\u5de5\u5177 top/htop \u663e\u793a\u4e86\u7cfb\u7edf\u603b\u4f53\u7684 CPU \u548c\u5185\u5b58\u4f7f\u7528\u60c5\u51b5\uff0c\u4ee5\u53ca\u5404\u4e2a\u8fdb\u7a0b\u7684\u8d44\u6e90\u4f7f\u7528\u60c5\u51b5 ps \u663e\u793a\u4e86\u6bcf\u4e2a\u8fdb\u7a0b\u7684\u8d44\u6e90\u4f7f\u7528\u60c5\u51b5 \u5de5\u5177 stress Linux \u7cfb\u7edf\u538b\u529b\u6d4b\u8bd5\u5de5\u5177 stress --cpu 1 --timeout 600 stress -i 1 --timeout 600 stress -c 8 --timeout 600 sysbench \u591a\u7ebf\u7a0b\u7684\u57fa\u51c6\u6d4b\u8bd5\u5de5\u5177 sysbench --threads=10 --max-time=300 threads run sysstat \u5305\u542b\u4e86\u5e38\u7528\u7684 Linux \u6027\u80fd\u5de5\u5177 mpstat \u662f\u4e00\u4e2a\u5e38\u7528\u7684\u591a\u6838 CPU \u6027\u80fd\u5206\u6790\u5de5\u5177\uff0c\u7528\u6765\u5b9e\u65f6\u67e5\u770b\u6bcf\u4e2a CPU \u7684\u6027\u80fd\u6307\u6807\uff0c\u4ee5\u53ca\u6240\u6709 CPU \u7684\u5e73\u5747\u6307\u6807 mpstat -P ALL 5 20 pidstat \u662f\u4e00\u4e2a\u5e38\u7528\u7684\u8fdb\u7a0b\u6027\u80fd\u5206\u6790\u5de5\u5177\uff0c\u7528\u6765\u5b9e\u65f6\u67e5\u770b\u8fdb\u7a0b\u7684 CPU\u3001\u5185\u5b58\u3001I/O \u4ee5\u53ca\u4e0a\u4e0b\u6587\u5207\u6362\u7b49\u6027\u80fd\u6307\u6807 pidstat -u 5 1 pidstat -w 5 pidstat -wt 1 vmstat \u4e00\u4e2a\u5e38\u7528\u7684\u7cfb\u7edf\u6027\u80fd\u5206\u6790\u5de5\u5177\uff0c\u4e3b\u8981\u7528\u6765\u5206\u6790\u7cfb\u7edf\u7684\u5185\u5b58\u4f7f\u7528\u60c5\u51b5\uff0c\u4e5f\u5e38\u7528\u6765\u5206\u6790 CPU \u4e0a\u4e0b\u6587\u5207\u6362\u548c\u4e2d\u65ad\u7684\u6b21\u6570 \u547d\u4ee4\uff1avmstat 1 3 \u4fe1\u606f\u89e3\u8bfb cs\uff08context switch\uff09\u662f\u6bcf\u79d2\u4e0a\u4e0b\u6587\u5207\u6362\u7684\u6b21\u6570 in\uff08interrupt\uff09\u5219\u662f\u6bcf\u79d2\u4e2d\u65ad\u7684\u6b21\u6570 r\uff08Running or Runnable\uff09\u662f\u5c31\u7eea\u961f\u5217\u7684\u957f\u5ea6\uff0c\u4e5f\u5c31\u662f\u6b63\u5728\u8fd0\u884c\u548c\u7b49\u5f85 CPU \u7684\u8fdb\u7a0b\u6570 b\uff08Blocked\uff09\u5219\u662f\u5904\u4e8e\u4e0d\u53ef\u4e2d\u65ad\u7761\u7720\u72b6\u6001\u7684\u8fdb\u7a0b\u6570 iostat \u52a8\u6001\u76d1\u89c6\u7cfb\u7edf\u7684\u78c1\u76d8\u64cd\u4f5c\u6d3b\u52a8 # \u663e\u793a\u6240\u6709\u8bbe\u5907\u8d1f\u8f7d\u60c5\u51b5 # iostat Linux 4 .14.0_1-0-0-48 07 /08/2022 _x86_64_ ( 56 CPU ) avg-cpu: %user %nice %system %iowait %steal %idle 0 .39 0 .19 0 .38 0 .11 0 .00 98 .93 Device: tps kB_read/s kB_wrtn/s kB_read kB_wrtn sda 15 .44 9 .48 176 .87 71242014 1328555302 # \u67e5\u770bTPS\u548c\u541e\u5410\u91cf # iostat -d -x -k 1 1 Linux 4 .14.0_1-0-0-48 07 /08/2022 _x86_64_ ( 56 CPU ) Device: rrqm/s wrqm/s r/s w/s rkB/s wkB/s avgrq-sz avgqu-sz await r_await w_await svctm %util sda 0 .00 9 .55 0 .46 14 .98 9 .48 176 .87 24 .14 0 .28 17 .74 109 .27 14 .95 2 .78 4 .29 \u5982\u679c%iowait\u7684\u503c\u8fc7\u9ad8\uff0c\u8868\u793a\u786c\u76d8\u5b58\u5728I/O\u74f6\u9888\u3002 \u5982\u679c %util \u63a5\u8fd1 100 %\uff0c\u8bf4\u660e\u4ea7\u751f\u7684I/O\u8bf7\u6c42\u592a\u591a\uff0cI/O\u7cfb\u7edf\u5df2\u7ecf\u6ee1\u8d1f\u8377\uff0c\u8be5\u78c1\u76d8\u53ef\u80fd\u5b58\u5728\u74f6\u9888\u3002 \u5982\u679c svctm \u6bd4\u8f83\u63a5\u8fd1 await\uff0c\u8bf4\u660e I/O \u51e0\u4e4e\u6ca1\u6709\u7b49\u5f85\u65f6\u95f4\uff1b \u5982\u679c await \u8fdc\u5927\u4e8e svctm\uff0c\u8bf4\u660eI/O \u961f\u5217\u592a\u957f\uff0cio\u54cd\u5e94\u592a\u6162\uff0c\u5219\u9700\u8981\u8fdb\u884c\u5fc5\u8981\u4f18\u5316\u3002 \u5982\u679cavgqu-sz\u6bd4\u8f83\u5927\uff0c\u4e5f\u8868\u793a\u6709\u5927\u91cfio\u5728\u7b49\u5f85 # \u67e5\u770b\u8bbe\u5907\u4f7f\u7528\u7387\uff08%util\uff09\u548c\u54cd\u5e94\u65f6\u95f4\uff08await\uff09 # iostat -d -x -k 1 1 Linux 4 .14.0_1-0-0-48 07 /08/2022 _x86_64_ ( 56 CPU ) Device: rrqm/s wrqm/s r/s w/s rkB/s wkB/s avgrq-sz avgqu-sz await r_await w_await svctm %util sda 0 .00 9 .55 0 .46 14 .98 9 .48 176 .87 24 .14 0 .28 17 .74 109 .27 14 .95 2 .78 4 .29 perf \u4ee5\u6027\u80fd\u4e8b\u4ef6\u91c7\u6837\u4e3a\u57fa\u7840\uff0c\u4e0d\u4ec5\u53ef\u4ee5\u5206\u6790\u7cfb\u7edf\u7684\u5404\u79cd\u4e8b\u4ef6\u548c\u5185\u6838\u6027\u80fd\uff0c\u8fd8\u53ef\u4ee5\u7528\u6765\u5206\u6790\u6307\u5b9a\u5e94\u7528\u7a0b\u5e8f\u7684\u6027\u80fd\u95ee\u9898 \u547d\u4ee4 perf top perf record/report ab apache bench, \u5e38\u7528\u7684 HTTP \u670d\u52a1\u6027\u80fd\u6d4b\u8bd5\u5de5\u5177 ab -c 10 -n 100 your_url:port \u5e76\u53d1 10 \u4e2a\u8bf7\u6c42\u6d4b\u8bd5 Nginx \u6027\u80fd\uff0c\u603b\u5171\u6d4b\u8bd5 100 \u4e2a\u8bf7\u6c42 dstat \u7cfb\u7edf\u8d44\u6e90\u4f7f\u7528\u5206\u6790\uff0c\u5982\u78c1\u76d8 pstack \u8ddf\u8e2a\u8fdb\u7a0b\u6808\u7a7a\u95f4 pstack 36897 strace \u8ddf\u8e2a\u8fdb\u7a0b\u6267\u884c\u65f6\u7684\u7cfb\u7edf\u8c03\u7528\u548c\u6240\u63a5\u6536\u7684\u4fe1\u53f7 # strace -p 36897 execve ( \"/usr/bin/strace\" , [ \"strace\" , \"-p\" , \"36897\" ] , 0x7fff22c9c440 /* 27 vars */ ) = 0 brk ( NULL ) = 0xc60000 mmap ( NULL, 4096 , PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0 ) = 0x7fc291aeb000 access ( \"/etc/ld.so.preload\" , R_OK ) = -1 ENOENT ( No such file or directory ) open ( \"/etc/ld.so.cache\" , O_RDONLY | O_CLOEXEC ) = 3 fstat ( 3 , { st_mode = S_IFREG | 0644 , st_size = 43388 , ... }) = 0 mmap ( NULL, 43388 , PROT_READ, MAP_PRIVATE, 3 , 0 ) = 0x7fc291ae0000 close ( 3 ) = 0 open ( \"/lib64/librt.so.1\" , O_RDONLY | O_CLOEXEC ) = 3 read ( 3 , \"\\177ELF\\2\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0>\\0\\1\\0\\0\\0000\\\"\\0\\0\\0\\0\\0\\0\" ..., 832 ) = 832 fstat ( 3 , { st_mode = S_IFREG | 0755 , st_size = 43712 , ... }) = 0 mmap ( NULL, 2128952 , PROT_READ | PROT_EXEC, MAP_PRIVATE | MAP_DENYWRITE, 3 , 0 ) = 0x7fc2916c3000 mprotect ( 0x7fc2916ca000, 2093056 , PROT_NONE ) = 0 mmap ( 0x7fc2918c9000, 8192 , PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_FIXED | MAP_DENYWRITE, 3 , 0x6000 ) = 0x7fc2918c9000 close ( 3 ) = 0 open ( \"/lib64/libdw.so.1\" , O_RDONLY | O_CLOEXEC ) = 3 read ( 3 , \"\\177ELF\\2\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0>\\0\\1\\0\\0\\0\\0\\237\\0\\0\\0\\0\\0\\0\" ..., 832 ) = 832 fstat ( 3 , { st_mode = S_IFREG | 0755 , st_size = 338672 , ... }) = 0 mmap ( NULL, 2427184 , PROT_READ | PROT_EXEC, MAP_PRIVATE | MAP_DENYWRITE, 3 , 0 ) = 0x7fc291472000 mprotect ( 0x7fc2914c0000, 2097152 , PROT_NONE ) = 0 mmap ( 0x7fc2916c0000, 12288 , PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_FIXED | MAP_DENYWRITE, 3 , 0x4e000 ) = 0x7fc2916c0000 close ( 3 ) = 0 ... # \u8ddf\u8e2a\u670d\u52a1\u7a0b\u5e8f strace -o output.txt -T -tt -e trace = all -p 36897 pmap \u5206\u6790\u7ebf\u7a0b\u5806\u6808 pstrack 36897 sar (\u53ef\u4f7f\u7528 vmstat, prstat \u66ff\u6362) \u67e5\u770b CPU \u4f7f\u7528\u7387\uff1a sar -u 1 2 (\u6bcf\u79d2\u91c7\u6837 1 \u6b21\uff0c\u5171\u91c7\u6837 2 \u6b21) \u67e5\u770b CPU \u5e73\u5747\u8d1f\u8f7d\uff1a sar -q 1 2 (\u67e5\u770b\u8fd0\u884c\u961f\u5217\u4e2d\u7684\u8fdb\u7a0b\u6570\u3001\u7cfb\u7edf\u4e0a\u7684\u8fdb\u7a0b\u5927\u5c0f\u3001\u5e73\u5747\u8d1f\u8f7d\u7b49) \u67e5\u770b\u5185\u5b58\u4f7f\u7528\uff1a sar -r 1 2 / vmstat 1 3 \u67e5\u770b\u5185\u5b58\u9875\u4ea4\u6362\u67e5\u8be2\uff1a sar -W 1 3 \u7f51\u7edc netstat \u7528\u4e8e\u663e\u793a\u5404\u79cd\u7f51\u7edc\u76f8\u5173\u4fe1\u606f\uff0c\u5982\u7f51\u7edc\u8fde\u63a5\uff0c\u8def\u7531\u8868\uff0c\u63a5\u53e3\u72b6\u6001 (Interface Statistics)\uff0cmasquerade \u8fde\u63a5\uff0c\u591a\u64ad\u6210\u5458 (Multicast Memberships) \u7b49\u7b49 \u5217\u51fa\u6240\u6709\u7aef\u53e3 (\u5305\u62ec\u76d1\u542c\u548c\u672a\u76d1\u542c\u7684): netstat -a \u5217\u51fa\u6240\u6709 tcp \u7aef\u53e3: netstat -at \u5217\u51fa\u6240\u6709\u6709\u76d1\u542c\u7684\u670d\u52a1\u72b6\u6001: netstat -l \u7aef\u53e3\u67e5\u8be2: netstat -antp | grep 8080 # netstat -antp | grep 8669 tcp6 0 0 :::8669 :::* LISTEN 36897 /nebula-graphd # ps 36897 PID TTY STAT TIME COMMAND 36897 ? Ssl 4 :47 ./bin/nebula-graphd --flagfile ./nebula-graph/etc/nebula-graphd.conf IPCS IPCS \u67e5\u8be2 # ipcs IPC status from <running system> as of Fri Jul 8 15 :58:10 CST 2022 T ID KEY MODE OWNER GROUP Message Queues: T ID KEY MODE OWNER GROUP Shared Memory: T ID KEY MODE OWNER GROUP Semaphores: s 720896 0xe93c17d9 --ra-ra-ra- work staff s 262146 0x624b15dc --ra------- work staff s 262147 0x89600dce --ra------- work staff s 262148 0xbf832208 --ra------- work staff s 65541 0xccb76beb --ra------- work staff s 65542 0xfb27a582 --ra------- work staff s 65543 0x27a6455a --ra------- work staff s 65544 0xb1b0e0cd --ra------- work staff \u6587\u4ef6\u5206\u6790 nm \u663e\u793a\u5173\u4e8e\u6307\u5b9a File \u4e2d\u7b26\u53f7\u7684\u4fe1\u606f\uff0c\u6587\u4ef6\u53ef\u4ee5\u662f\u5bf9\u8c61\u6587\u4ef6\u3001\u53ef\u6267\u884c\u6587\u4ef6\u6216\u5bf9\u8c61\u6587\u4ef6\u5e93 zsh \u279c nm main 00000001000a6bf8 s _ $f64 .3eb0000000000000 00000001000a6c00 s _ $f64 .3f50624dd2f1a9fc 00000001000a6c08 s _ $f64 .3f847ae147ae147b 00000001000a6c10 s _ $f64 .3fd3333333333333 00000001000a6c18 s _ $f64 .3fe6666666666666 00000001000a6c20 s _ $f64 .3fee666666666666 00000001000a6c28 s _ $f64 .3ff199999999999a 00000001000a6c30 s _ $f64 .3ff3333333333333 00000001000a6c38 s _ $f64 .3ffb333333333333 00000001000a6c40 s _ $f64 .4059000000000000 00000001000a6c48 s _ $f64 .40c3880000000000 00000001000a6c50 s _ $f64 .40f0000000000000 00000001000a6c58 s _ $f64 .412e848000000000 00000001000a6c60 s _ $f64 .7ff0000000000000 00000001000a6c68 s _ $f64 .bfd3333333333333 00000001000a6c70 s _ $f64 .bfe62e42fefa39ef U ___error 0000000100133e60 b __cgo_init 0000000100133e68 b __cgo_notify_runtime_init_done 0000000100133e70 b __cgo_thread_start 0000000100133e78 b __cgo_yield U __exit 000000010005ad70 t __rt0_arm64_darwin 00000001000570d0 t _aeshashbody 0000000100162f30 s _block_size 00000001000570a0 t _callRet U _clock_gettime U _close U _closedir 0000000100001ab0 t _cmpbody 0000000100057770 t _debugCall1024 ... ... 000000010011d2a0 s _unicode/utf8.acceptRanges 0000000100120260 s _unicode/utf8.first U _usleep U _write ogjdump \u5de5\u5177\u7528\u6765\u663e\u793a\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u4fe1\u606f zsh \u279c objdump -d main main: file format mach-o arm64 Disassembly of section __TEXT,__text: 0000000100001000 <_runtime.text>: 100001000 : ff 20 47 6f umlal2.4s v31, v7, v7 [ 0 ] 100001004 : 20 62 75 69 ldpsw x0, x24, [ x17, #-88] 100001008 : 6c 64 20 49 <unknown> 10000100c: 44 3a 20 22 <unknown> 100001010 : 5a 46 58 50 adr x26, #723146 100001014 : 5f 33 4b 38 ldurb wzr, [ x26, #179] 100001018 : 5f 6d 45 65 <unknown> 10000101c: 34 6f 48 64 <unknown> 100001020 : 57 56 6a 4c <unknown> 100001024 : 2f 66 64 5f <unknown> 100001028 : 53 63 6c 66 <unknown> 10000102c: 34 6d 57 50 adr x20, #716198 100001030 : 6c 56 79 46 <unknown> 100001034 : 36 32 4b 67 <unknown> ... ... readelf \u4e0e objdump \u7c7b\u4f3c\uff0c\u5c55\u793a\u7684\u4fe1\u606f\u5177\u4f53 # readelf -all /usr/bin/make ELF Header: Magic: 7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 Class: ELF64 Data: 2 ' s complement, little endian Version: 1 ( current ) OS/ABI: UNIX - System V ABI Version: 0 Type: EXEC ( Executable file ) Machine: Advanced Micro Devices X86-64 Version: 0x1 Entry point address: 0x40431d Start of program headers: 64 ( bytes into file ) Start of section headers: 180896 ( bytes into file ) Flags: 0x0 Size of this header: 64 ( bytes ) Size of program headers: 56 ( bytes ) Number of program headers: 9 Size of section headers: 64 ( bytes ) Number of section headers: 29 Section header string table index: 28 Section Headers: [ Nr ] Name Type Address Offset Size EntSize Flags Link Info Align [ 0 ] NULL 0000000000000000 00000000 0000000000000000 0000000000000000 0 0 0 [ 1 ] .interp PROGBITS 0000000000400238 00000238 000000000000001c 0000000000000000 A 0 0 1 [ 2 ] .note.ABI-tag NOTE 0000000000400254 00000254 0000000000000020 0000000000000000 A 0 0 4 [ 3 ] .note.gnu.build-i NOTE 0000000000400274 00000274 0000000000000024 0000000000000000 A 0 0 4 [ 4 ] .gnu.hash GNU_HASH 0000000000400298 00000298 000000000000004c 0000000000000000 A 5 0 8 [ 5 ] .dynsym DYNSYM 00000000004002e8 000002e8 0000000000000b88 0000000000000018 A 6 1 8 [ 6 ] .dynstr STRTAB 0000000000400e70 00000e70 000000000000040f 0000000000000000 A 0 0 1 [ 7 ] .gnu.version VERSYM 0000000000401280 00001280 00000000000000f6 0000000000000002 A 5 0 2 [ 8 ] .gnu.version_r VERNEED 0000000000401378 00001378 0000000000000070 0000000000000000 A 6 1 8 size \u67e5\u770b\u7a0b\u5e8f\u8fd0\u884c\u65f6\u5404\u4e2a\u6bb5\u7684\u5b9e\u9645\u5185\u5b58\u5360\u7528 zsh \u279c size main __TEXT __DATA __OBJC others dec hex 688128 310624 0 4295554186 4296552938 1001831ea xxd \u5341\u516d\u8fdb\u5236\u663e\u793a\u6570\u636e zsh \u279c xxd main 00000000 : cffa edfe 0c00 0001 0000 0000 0200 0000 ................ 00000010 : 0e00 0000 7009 0000 0400 2000 0000 0000 ....p..... ..... 00000020 : 1900 0000 4800 0000 5f5f 5041 4745 5a45 ....H...__PAGEZE 00000030 : 524f 0000 0000 0000 0000 0000 0000 0000 RO.............. 00000040 : 0000 0000 0100 0000 0000 0000 0000 0000 ................ 00000050 : 0000 0000 0000 0000 0000 0000 0000 0000 ................ 00000060 : 0000 0000 0000 0000 1900 0000 3801 0000 ............8... 00000070 : 5f5f 5445 5854 0000 0000 0000 0000 0000 __TEXT.......... 00000080 : 0000 0000 0100 0000 0080 0a00 0000 0000 ................ 00000090 : 0000 0000 0000 0000 0080 0a00 0000 0000 ................ 000000a0: 0700 0000 0500 0000 0300 0000 0000 0000 ................ 000000b0: 5f5f 7465 7874 0000 0000 0000 0000 0000 __text.......... 000000c0: 5f5f 5445 5854 0000 0000 0000 0000 0000 __TEXT.......... 000000d0: 0010 0000 0100 0000 8070 0800 0000 0000 .........p...... 000000e0: 0010 0000 0400 0000 0000 0000 0000 0000 ................ 000000f0: 0004 0080 0000 0000 0000 0000 0000 0000 ................ 00000100 : 5f5f 7379 6d62 6f6c 5f73 7475 6231 0000 __symbol_stub1.. 00000110 : 5f5f 5445 5854 0000 0000 0000 0000 0000 __TEXT.......... 00000120 : 8080 0800 0100 0000 3402 0000 0000 0000 ........4....... 00000130 : 8080 0800 0500 0000 0000 0000 0000 0000 ................ ... ...","title":"\u6027\u80fd\u5206\u6790"},{"location":"linux/analysis/#_1","text":"","title":"\u6027\u80fd\u5206\u6790"},{"location":"linux/analysis/#_2","text":"\u6267\u884c top \u6216\u8005 uptime \u547d\u4ee4\uff0c\u53ef\u4ee5\u770b\u5230\u5982\u4e0b\u4fe1\u606f 21 :40 up 44 days, 49 mins, 3 users, load averages: 2 .45 3 .11 3 .40 \u4fe1\u606f\u542b\u4e49 \u5f53\u524d\u65f6\u95f4 \u7cfb\u7edf\u8fd0\u884c\u65f6\u95f4 \u6b63\u5728\u767b\u5f55\u7528\u6237\u6570 \u8fc7\u53bb 1 \u5206\u949f\u30015 \u5206\u949f\u300115 \u5206\u949f\u7684\u5e73\u5747\u8d1f\u8f7d\uff08Load Average\uff09 \u7b80\u5355\u6765\u8bf4\uff0c\u5e73\u5747\u8d1f\u8f7d\u662f\u6307\u5355\u4f4d\u65f6\u95f4\u5185\uff0c\u7cfb\u7edf\u5904\u4e8e\u53ef\u8fd0\u884c\u72b6\u6001\u548c\u4e0d\u53ef\u4e2d\u65ad\u72b6\u6001\u7684\u5e73\u5747\u8fdb\u7a0b\u6570\uff0c\u4e5f\u5c31\u662f\u5e73\u5747\u6d3b\u8dc3\u8fdb\u7a0b\u6570 \u53ef\u8fd0\u884c\u72b6\u6001\u7684\u8fdb\u7a0b\uff0c\u662f\u6307\u6b63\u5728\u4f7f\u7528 CPU \u6216\u8005\u6b63\u5728\u7b49\u5f85 CPU \u7684\u8fdb\u7a0b\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u5e38\u7528 ps \u547d\u4ee4\u770b\u5230\u7684\uff0c\u5904\u4e8e R \u72b6\u6001\uff08Running \u6216 Runnable\uff09\u7684\u8fdb\u7a0b \u4e0d\u53ef\u4e2d\u65ad\u72b6\u6001\u7684\u8fdb\u7a0b\u5219\u662f\u6b63\u5904\u4e8e\u5185\u6838\u6001\u5173\u952e\u6d41\u7a0b\u4e2d\u7684\u8fdb\u7a0b\uff0c\u5e76\u4e14\u8fd9\u4e9b\u6d41\u7a0b\u662f\u4e0d\u53ef\u6253\u65ad\u7684\uff0c\u6bd4\u5982\u6700\u5e38\u89c1\u7684\u662f\u7b49\u5f85\u786c\u4ef6\u8bbe\u5907\u7684 I/O \u54cd\u5e94\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u5728 ps \u547d\u4ee4\u4e2d\u770b\u5230\u7684 D \u72b6\u6001\uff08Uninterruptible Sleep\uff0c\u4e5f\u79f0\u4e3a Disk Sleep\uff09\u7684\u8fdb\u7a0b \u4f46\u5b83\u5b9e\u9645\u4e0a\u662f\u6d3b\u8dc3\u8fdb\u7a0b\u6570\u7684\u6307\u6570\u8870\u51cf\u5e73\u5747\u503c \u6ce8\u610f \u5e73\u5747\u8d1f\u8f7d\u9ad8\u6709\u53ef\u80fd\u662f CPU \u5bc6\u96c6\u578b\u8fdb\u7a0b\u5bfc\u81f4\u7684 \u5e73\u5747\u8d1f\u8f7d\u9ad8\u5e76\u4e0d\u4e00\u5b9a\u4ee3\u8868 CPU \u4f7f\u7528\u7387\u9ad8\uff0c\u8fd8\u6709\u53ef\u80fd\u662f I/O \u66f4\u7e41\u5fd9\u4e86 \u5f53\u53d1\u73b0\u8d1f\u8f7d\u9ad8\u7684\u65f6\u5019\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 mpstat\u3001pidstat \u7b49\u5de5\u5177\uff0c\u8f85\u52a9\u5206\u6790\u8d1f\u8f7d\u7684\u6765\u6e90","title":"\u5e73\u5747\u8d1f\u8f7d"},{"location":"linux/analysis/#_3","text":"\u8fdb\u7a0b\u4e0a\u4e0b\u6587\u5207\u6362 \u7cfb\u7edf\u8c03\u7528\uff0c\u5b8c\u6210\u4ece\u7528\u6237\u6001\u5230\u5185\u6838\u6001\u7684\u8f6c\u53d8 CPU \u5bc4\u5b58\u5668\u91cc\u539f\u6765\u7528\u6237\u6001\u7684\u6307\u4ee4\u4f4d\u7f6e\uff0c\u9700\u8981\u5148\u4fdd\u5b58\u8d77\u6765\u3002\u63a5\u7740\uff0c\u4e3a\u4e86\u6267\u884c\u5185\u6838\u6001\u4ee3\u7801 CPU \u5bc4\u5b58\u5668\u9700\u8981\u66f4\u65b0\u4e3a\u5185\u6838\u6001\u6307\u4ee4\u7684\u65b0\u4f4d\u7f6e\u3002\u6700\u540e\u624d\u662f\u8df3\u8f6c\u5230\u5185\u6838\u6001\u8fd0\u884c\u5185\u6838\u4efb\u52a1 \u800c\u7cfb\u7edf\u8c03\u7528\u7ed3\u675f\u540e\uff0cCPU \u5bc4\u5b58\u5668\u9700\u8981\u6062\u590d\u539f\u6765\u4fdd\u5b58\u7684\u7528\u6237\u6001\uff0c\u7136\u540e\u518d\u5207\u6362\u5230\u7528\u6237\u7a7a\u95f4\uff0c\u7ee7\u7eed\u8fd0\u884c\u8fdb\u7a0b\u3002\u6240\u4ee5\uff0c\u4e00\u6b21\u7cfb\u7edf\u8c03\u7528\u7684\u8fc7\u7a0b\uff0c\u5176\u5b9e\u662f\u53d1\u751f\u4e86\u4e24\u6b21 CPU \u4e0a\u4e0b\u6587\u5207\u6362 \u8fdb\u7a0b\u95f4\u5207\u6362 \u4ece\u4e00\u4e2a\u8fdb\u7a0b\u5207\u6362\u5230\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u8fd0\u884c \u5728\u4fdd\u5b58\u5f53\u524d\u8fdb\u7a0b\u7684\u5185\u6838\u72b6\u6001\u548c CPU \u5bc4\u5b58\u5668\u4e4b\u524d\uff0c\u9700\u8981\u5148\u628a\u8be5\u8fdb\u7a0b\u7684\u865a\u62df\u5185\u5b58\u3001\u6808\u7b49\u4fdd\u5b58\u4e0b\u6765\uff1b\u800c\u52a0\u8f7d\u4e86\u4e0b\u4e00\u8fdb\u7a0b\u7684\u5185\u6838\u6001\u540e\uff0c\u8fd8\u9700\u8981\u5237\u65b0\u8fdb\u7a0b\u7684\u865a\u62df\u5185\u5b58\u548c\u7528\u6237\u6808 \u8fdb\u7a0b\u7684\u4e0a\u4e0b\u6587\u4e0d\u4ec5\u5305\u62ec\u4e86\u865a\u62df\u5185\u5b58\u3001\u6808\u3001\u5168\u5c40\u53d8\u91cf\u7b49\u7528\u6237\u7a7a\u95f4\u7684\u8d44\u6e90\uff0c\u8fd8\u5305\u62ec\u4e86\u5185\u6838\u5806\u6808\u3001\u5bc4\u5b58\u5668\u7b49\u5185\u6838\u7a7a\u95f4\u7684\u72b6\u6001 \u7ebf\u7a0b\u4e0a\u4e0b\u6587\u5207\u6362 \u524d\u540e\u4e24\u4e2a\u7ebf\u7a0b\u5c5e\u4e8e\u4e0d\u540c\u8fdb\u7a0b \u56e0\u4e3a\u8d44\u6e90\u4e0d\u5171\u4eab\uff0c\u6240\u4ee5\u5207\u6362\u8fc7\u7a0b\u5c31\u8ddf\u8fdb\u7a0b\u4e0a\u4e0b\u6587\u5207\u6362\u662f\u4e00\u6837 \u524d\u540e\u4e24\u4e2a\u7ebf\u7a0b\u5c5e\u4e8e\u540c\u4e00\u4e2a\u8fdb\u7a0b \u56e0\u4e3a\u865a\u62df\u5185\u5b58\u662f\u5171\u4eab\u7684\uff0c\u6240\u4ee5\u5728\u5207\u6362\u65f6\uff0c\u865a\u62df\u5185\u5b58\u8fd9\u4e9b\u8d44\u6e90\u5c31\u4fdd\u6301\u4e0d\u52a8\uff0c\u53ea\u9700\u8981\u5207\u6362\u7ebf\u7a0b\u7684\u79c1\u6709\u6570\u636e\u3001\u5bc4\u5b58\u5668\u7b49\u4e0d\u5171\u4eab\u7684\u6570\u636e \u4e2d\u65ad\u4e0a\u4e0b\u6587\u5207\u6362 \u4e2d\u65ad\u4e0a\u4e0b\u6587\u5207\u6362\u5e76\u4e0d\u6d89\u53ca\u5230\u8fdb\u7a0b\u7684\u7528\u6237\u6001 \u5373\u4fbf\u4e2d\u65ad\u8fc7\u7a0b\u6253\u65ad\u4e86\u4e00\u4e2a\u6b63\u5904\u5728\u7528\u6237\u6001\u7684\u8fdb\u7a0b\uff0c\u4e5f\u4e0d\u9700\u8981\u4fdd\u5b58\u548c\u6062\u590d\u8fd9\u4e2a\u8fdb\u7a0b\u7684\u865a\u62df\u5185\u5b58\u3001\u5168\u5c40\u53d8\u91cf\u7b49\u7528\u6237\u6001\u8d44\u6e90\u3002\u4e2d\u65ad\u4e0a\u4e0b\u6587\uff0c\u5176\u5b9e\u53ea\u5305\u62ec\u5185\u6838\u6001\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\u6267\u884c\u6240\u5fc5\u9700\u7684\u72b6\u6001\uff0c\u5305\u62ec CPU \u5bc4\u5b58\u5668\u3001\u5185\u6838\u5806\u6808\u3001\u786c\u4ef6\u4e2d\u65ad\u53c2\u6570\u7b49 \u4e0a\u534a\u90e8 \u7528\u6765\u5feb\u901f\u5904\u7406\u4e2d\u65ad,\u4e3b\u8981\u5904\u7406\u8ddf\u786c\u4ef6\u7d27\u5bc6\u76f8\u5173\u7684\u6216\u65f6\u95f4\u654f\u611f\u7684\u5de5\u4f5c \u4e0b\u534a\u90e8 \u5ef6\u8fdf\u5904\u7406\u4e0a\u534a\u90e8\u672a\u5b8c\u6210\u7684\u5de5\u4f5c\uff0c\u901a\u5e38\u4ee5\u5185\u6838\u7ebf\u7a0b\u7684\u65b9\u5f0f\u8fd0\u884c\uff1b\u901a\u8fc7\u8f6f\u4e2d\u65ad\u4fe1\u53f7\u901a\u77e5 \u67e5\u770b\u7cfb\u7edf\u7684\u4e0a\u4e0b\u6587\u5207\u6362\u60c5\u51b5 \u901a\u8fc7 vmstat \u67e5\u770b\u7cfb\u7edf\u603b\u4f53\u7684\u4e0a\u4e0b\u6587\u5207\u6362 \u901a\u8fc7 pidstat \u67e5\u770b\u8fdb\u7a0b\u5207\u6362\u8be6\u60c5 cswch\uff1a\u81ea\u613f\u4e0a\u4e0b\u6587\u5207\u6362\uff0c\u662f\u6307\u8fdb\u7a0b\u65e0\u6cd5\u83b7\u53d6\u6240\u9700\u8d44\u6e90\uff0c\u5bfc\u81f4\u7684\u4e0a\u4e0b\u6587\u5207\u6362 nvcswch\uff1a\u975e\u81ea\u613f\u4e0a\u4e0b\u6587\u5207\u6362\uff0c\u5219\u662f\u6307\u8fdb\u7a0b\u7531\u4e8e\u65f6\u95f4\u7247\u5df2\u5230\u7b49\u539f\u56e0\uff0c\u88ab\u7cfb\u7edf\u5f3a\u5236\u8c03\u5ea6\uff0c\u8fdb\u800c\u53d1\u751f\u7684\u4e0a\u4e0b\u6587\u5207\u6362 \u95ee\u9898\u5206\u6790 \u81ea\u613f\u4e0a\u4e0b\u6587\u5207\u6362\u53d8\u591a\u4e86\uff0c\u8bf4\u660e\u8fdb\u7a0b\u90fd\u5728\u7b49\u5f85\u8d44\u6e90\uff0c\u6709\u53ef\u80fd\u53d1\u751f\u4e86 I/O \u7b49\u5176\u4ed6\u95ee\u9898 \u975e\u81ea\u613f\u4e0a\u4e0b\u6587\u5207\u6362\u53d8\u591a\u4e86\uff0c\u8bf4\u660e\u8fdb\u7a0b\u90fd\u5728\u88ab\u5f3a\u5236\u8c03\u5ea6\uff0c\u4e5f\u5c31\u662f\u90fd\u5728\u4e89\u62a2 CPU\uff0c\u8bf4\u660e CPU \u7684\u786e\u6210\u4e86\u74f6\u9888 \u4e2d\u65ad\u6b21\u6570\u53d8\u591a\u4e86\uff0c\u8bf4\u660e CPU \u88ab\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u5360\u7528\uff0c\u8fd8\u9700\u8981\u901a\u8fc7\u67e5\u770b /proc/interrupts \u6587\u4ef6\u6765\u5206\u6790\u5177\u4f53\u7684\u4e2d\u65ad\u7c7b\u578b","title":"\u4e0a\u4e0b\u6587\u5207\u6362"},{"location":"linux/analysis/#_4","text":"\u4e3a\u4e86\u4fdd\u8bc1\u6240\u6709\u8fdb\u7a0b\u53ef\u4ee5\u5f97\u5230\u516c\u5e73\u8c03\u5ea6\uff0cCPU \u65f6\u95f4\u88ab\u5212\u5206\u4e3a\u4e00\u6bb5\u6bb5\u7684\u65f6\u95f4\u7247\uff0c\u8fd9\u4e9b\u65f6\u95f4\u7247\u518d\u88ab\u8f6e\u6d41\u5206\u914d\u7ed9\u5404\u4e2a\u8fdb\u7a0b\u3002\u8fd9\u6837\uff0c\u5f53\u67d0\u4e2a\u8fdb\u7a0b\u7684\u65f6\u95f4\u7247\u8017\u5c3d\u4e86\uff0c\u5c31\u4f1a\u88ab\u7cfb\u7edf\u6302\u8d77\uff0c\u5207\u6362\u5230\u5176\u5b83\u6b63\u5728\u7b49\u5f85 CPU \u7684\u8fdb\u7a0b\u8fd0\u884c \u8fdb\u7a0b\u5728\u7cfb\u7edf\u8d44\u6e90\u4e0d\u8db3\uff08\u6bd4\u5982\u5185\u5b58\u4e0d\u8db3\uff09\u65f6\uff0c\u8981\u7b49\u5230\u8d44\u6e90\u6ee1\u8db3\u540e\u624d\u53ef\u4ee5\u8fd0\u884c\uff0c\u8fd9\u4e2a\u65f6\u5019\u8fdb\u7a0b\u4e5f\u4f1a\u88ab\u6302\u8d77\uff0c\u5e76\u7531\u7cfb\u7edf\u8c03\u5ea6\u5176\u4ed6\u8fdb\u7a0b\u8fd0\u884c \u5f53\u8fdb\u7a0b\u901a\u8fc7\u7761\u7720\u51fd\u6570 sleep \u8fd9\u6837\u7684\u65b9\u6cd5\u5c06\u81ea\u5df1\u4e3b\u52a8\u6302\u8d77\u65f6\uff0c\u81ea\u7136\u4e5f\u4f1a\u91cd\u65b0\u8c03\u5ea6 \u5f53\u6709\u4f18\u5148\u7ea7\u66f4\u9ad8\u7684\u8fdb\u7a0b\u8fd0\u884c\u65f6\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u9ad8\u4f18\u5148\u7ea7\u8fdb\u7a0b\u7684\u8fd0\u884c\uff0c\u5f53\u524d\u8fdb\u7a0b\u4f1a\u88ab\u6302\u8d77\uff0c\u7531\u9ad8\u4f18\u5148\u7ea7\u8fdb\u7a0b\u6765\u8fd0\u884c \u53d1\u751f\u786c\u4ef6\u4e2d\u65ad\u65f6\uff0cCPU \u4e0a\u7684\u8fdb\u7a0b\u4f1a\u88ab\u4e2d\u65ad\u6302\u8d77\uff0c\u8f6c\u800c\u6267\u884c\u5185\u6838\u4e2d\u7684\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f","title":"\u8fdb\u7a0b\u8c03\u5ea6\u65f6\u673a"},{"location":"linux/analysis/#cpu","text":"CPU \u4f7f\u7528\u7387 = 1 - \u7a7a\u95f2\u65f6\u95f4 / \u603b CPU \u65f6\u95f4 \u5e73\u5747 CPU \u4f7f\u7528\u7387 = (\u7a7a\u95f2\u65f6\u95f4 2 - \u7a7a\u95f2\u65f6\u95f4 1) / (\u603b CPU \u65f6\u95f4 2 - \u603b CPU \u65f6\u95f4 1) \u6027\u80fd\u5de5\u5177\u4e00\u822c\u90fd\u4f1a\u53d6\u95f4\u9694\u4e00\u6bb5\u65f6\u95f4\uff08\u6bd4\u5982 3 \u79d2\uff09\u7684\u4e24\u6b21\u503c \u5e38\u7528\u7684\u6027\u80fd\u5206\u6790\u5de5\u5177 top/htop \u663e\u793a\u4e86\u7cfb\u7edf\u603b\u4f53\u7684 CPU \u548c\u5185\u5b58\u4f7f\u7528\u60c5\u51b5\uff0c\u4ee5\u53ca\u5404\u4e2a\u8fdb\u7a0b\u7684\u8d44\u6e90\u4f7f\u7528\u60c5\u51b5 ps \u663e\u793a\u4e86\u6bcf\u4e2a\u8fdb\u7a0b\u7684\u8d44\u6e90\u4f7f\u7528\u60c5\u51b5","title":"CPU \u4f7f\u7528\u7387"},{"location":"linux/analysis/#_5","text":"stress Linux \u7cfb\u7edf\u538b\u529b\u6d4b\u8bd5\u5de5\u5177 stress --cpu 1 --timeout 600 stress -i 1 --timeout 600 stress -c 8 --timeout 600 sysbench \u591a\u7ebf\u7a0b\u7684\u57fa\u51c6\u6d4b\u8bd5\u5de5\u5177 sysbench --threads=10 --max-time=300 threads run sysstat \u5305\u542b\u4e86\u5e38\u7528\u7684 Linux \u6027\u80fd\u5de5\u5177 mpstat \u662f\u4e00\u4e2a\u5e38\u7528\u7684\u591a\u6838 CPU \u6027\u80fd\u5206\u6790\u5de5\u5177\uff0c\u7528\u6765\u5b9e\u65f6\u67e5\u770b\u6bcf\u4e2a CPU \u7684\u6027\u80fd\u6307\u6807\uff0c\u4ee5\u53ca\u6240\u6709 CPU \u7684\u5e73\u5747\u6307\u6807 mpstat -P ALL 5 20 pidstat \u662f\u4e00\u4e2a\u5e38\u7528\u7684\u8fdb\u7a0b\u6027\u80fd\u5206\u6790\u5de5\u5177\uff0c\u7528\u6765\u5b9e\u65f6\u67e5\u770b\u8fdb\u7a0b\u7684 CPU\u3001\u5185\u5b58\u3001I/O \u4ee5\u53ca\u4e0a\u4e0b\u6587\u5207\u6362\u7b49\u6027\u80fd\u6307\u6807 pidstat -u 5 1 pidstat -w 5 pidstat -wt 1 vmstat \u4e00\u4e2a\u5e38\u7528\u7684\u7cfb\u7edf\u6027\u80fd\u5206\u6790\u5de5\u5177\uff0c\u4e3b\u8981\u7528\u6765\u5206\u6790\u7cfb\u7edf\u7684\u5185\u5b58\u4f7f\u7528\u60c5\u51b5\uff0c\u4e5f\u5e38\u7528\u6765\u5206\u6790 CPU \u4e0a\u4e0b\u6587\u5207\u6362\u548c\u4e2d\u65ad\u7684\u6b21\u6570 \u547d\u4ee4\uff1avmstat 1 3 \u4fe1\u606f\u89e3\u8bfb cs\uff08context switch\uff09\u662f\u6bcf\u79d2\u4e0a\u4e0b\u6587\u5207\u6362\u7684\u6b21\u6570 in\uff08interrupt\uff09\u5219\u662f\u6bcf\u79d2\u4e2d\u65ad\u7684\u6b21\u6570 r\uff08Running or Runnable\uff09\u662f\u5c31\u7eea\u961f\u5217\u7684\u957f\u5ea6\uff0c\u4e5f\u5c31\u662f\u6b63\u5728\u8fd0\u884c\u548c\u7b49\u5f85 CPU \u7684\u8fdb\u7a0b\u6570 b\uff08Blocked\uff09\u5219\u662f\u5904\u4e8e\u4e0d\u53ef\u4e2d\u65ad\u7761\u7720\u72b6\u6001\u7684\u8fdb\u7a0b\u6570 iostat \u52a8\u6001\u76d1\u89c6\u7cfb\u7edf\u7684\u78c1\u76d8\u64cd\u4f5c\u6d3b\u52a8 # \u663e\u793a\u6240\u6709\u8bbe\u5907\u8d1f\u8f7d\u60c5\u51b5 # iostat Linux 4 .14.0_1-0-0-48 07 /08/2022 _x86_64_ ( 56 CPU ) avg-cpu: %user %nice %system %iowait %steal %idle 0 .39 0 .19 0 .38 0 .11 0 .00 98 .93 Device: tps kB_read/s kB_wrtn/s kB_read kB_wrtn sda 15 .44 9 .48 176 .87 71242014 1328555302 # \u67e5\u770bTPS\u548c\u541e\u5410\u91cf # iostat -d -x -k 1 1 Linux 4 .14.0_1-0-0-48 07 /08/2022 _x86_64_ ( 56 CPU ) Device: rrqm/s wrqm/s r/s w/s rkB/s wkB/s avgrq-sz avgqu-sz await r_await w_await svctm %util sda 0 .00 9 .55 0 .46 14 .98 9 .48 176 .87 24 .14 0 .28 17 .74 109 .27 14 .95 2 .78 4 .29 \u5982\u679c%iowait\u7684\u503c\u8fc7\u9ad8\uff0c\u8868\u793a\u786c\u76d8\u5b58\u5728I/O\u74f6\u9888\u3002 \u5982\u679c %util \u63a5\u8fd1 100 %\uff0c\u8bf4\u660e\u4ea7\u751f\u7684I/O\u8bf7\u6c42\u592a\u591a\uff0cI/O\u7cfb\u7edf\u5df2\u7ecf\u6ee1\u8d1f\u8377\uff0c\u8be5\u78c1\u76d8\u53ef\u80fd\u5b58\u5728\u74f6\u9888\u3002 \u5982\u679c svctm \u6bd4\u8f83\u63a5\u8fd1 await\uff0c\u8bf4\u660e I/O \u51e0\u4e4e\u6ca1\u6709\u7b49\u5f85\u65f6\u95f4\uff1b \u5982\u679c await \u8fdc\u5927\u4e8e svctm\uff0c\u8bf4\u660eI/O \u961f\u5217\u592a\u957f\uff0cio\u54cd\u5e94\u592a\u6162\uff0c\u5219\u9700\u8981\u8fdb\u884c\u5fc5\u8981\u4f18\u5316\u3002 \u5982\u679cavgqu-sz\u6bd4\u8f83\u5927\uff0c\u4e5f\u8868\u793a\u6709\u5927\u91cfio\u5728\u7b49\u5f85 # \u67e5\u770b\u8bbe\u5907\u4f7f\u7528\u7387\uff08%util\uff09\u548c\u54cd\u5e94\u65f6\u95f4\uff08await\uff09 # iostat -d -x -k 1 1 Linux 4 .14.0_1-0-0-48 07 /08/2022 _x86_64_ ( 56 CPU ) Device: rrqm/s wrqm/s r/s w/s rkB/s wkB/s avgrq-sz avgqu-sz await r_await w_await svctm %util sda 0 .00 9 .55 0 .46 14 .98 9 .48 176 .87 24 .14 0 .28 17 .74 109 .27 14 .95 2 .78 4 .29 perf \u4ee5\u6027\u80fd\u4e8b\u4ef6\u91c7\u6837\u4e3a\u57fa\u7840\uff0c\u4e0d\u4ec5\u53ef\u4ee5\u5206\u6790\u7cfb\u7edf\u7684\u5404\u79cd\u4e8b\u4ef6\u548c\u5185\u6838\u6027\u80fd\uff0c\u8fd8\u53ef\u4ee5\u7528\u6765\u5206\u6790\u6307\u5b9a\u5e94\u7528\u7a0b\u5e8f\u7684\u6027\u80fd\u95ee\u9898 \u547d\u4ee4 perf top perf record/report ab apache bench, \u5e38\u7528\u7684 HTTP \u670d\u52a1\u6027\u80fd\u6d4b\u8bd5\u5de5\u5177 ab -c 10 -n 100 your_url:port \u5e76\u53d1 10 \u4e2a\u8bf7\u6c42\u6d4b\u8bd5 Nginx \u6027\u80fd\uff0c\u603b\u5171\u6d4b\u8bd5 100 \u4e2a\u8bf7\u6c42 dstat \u7cfb\u7edf\u8d44\u6e90\u4f7f\u7528\u5206\u6790\uff0c\u5982\u78c1\u76d8 pstack \u8ddf\u8e2a\u8fdb\u7a0b\u6808\u7a7a\u95f4 pstack 36897 strace \u8ddf\u8e2a\u8fdb\u7a0b\u6267\u884c\u65f6\u7684\u7cfb\u7edf\u8c03\u7528\u548c\u6240\u63a5\u6536\u7684\u4fe1\u53f7 # strace -p 36897 execve ( \"/usr/bin/strace\" , [ \"strace\" , \"-p\" , \"36897\" ] , 0x7fff22c9c440 /* 27 vars */ ) = 0 brk ( NULL ) = 0xc60000 mmap ( NULL, 4096 , PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0 ) = 0x7fc291aeb000 access ( \"/etc/ld.so.preload\" , R_OK ) = -1 ENOENT ( No such file or directory ) open ( \"/etc/ld.so.cache\" , O_RDONLY | O_CLOEXEC ) = 3 fstat ( 3 , { st_mode = S_IFREG | 0644 , st_size = 43388 , ... }) = 0 mmap ( NULL, 43388 , PROT_READ, MAP_PRIVATE, 3 , 0 ) = 0x7fc291ae0000 close ( 3 ) = 0 open ( \"/lib64/librt.so.1\" , O_RDONLY | O_CLOEXEC ) = 3 read ( 3 , \"\\177ELF\\2\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0>\\0\\1\\0\\0\\0000\\\"\\0\\0\\0\\0\\0\\0\" ..., 832 ) = 832 fstat ( 3 , { st_mode = S_IFREG | 0755 , st_size = 43712 , ... }) = 0 mmap ( NULL, 2128952 , PROT_READ | PROT_EXEC, MAP_PRIVATE | MAP_DENYWRITE, 3 , 0 ) = 0x7fc2916c3000 mprotect ( 0x7fc2916ca000, 2093056 , PROT_NONE ) = 0 mmap ( 0x7fc2918c9000, 8192 , PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_FIXED | MAP_DENYWRITE, 3 , 0x6000 ) = 0x7fc2918c9000 close ( 3 ) = 0 open ( \"/lib64/libdw.so.1\" , O_RDONLY | O_CLOEXEC ) = 3 read ( 3 , \"\\177ELF\\2\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0>\\0\\1\\0\\0\\0\\0\\237\\0\\0\\0\\0\\0\\0\" ..., 832 ) = 832 fstat ( 3 , { st_mode = S_IFREG | 0755 , st_size = 338672 , ... }) = 0 mmap ( NULL, 2427184 , PROT_READ | PROT_EXEC, MAP_PRIVATE | MAP_DENYWRITE, 3 , 0 ) = 0x7fc291472000 mprotect ( 0x7fc2914c0000, 2097152 , PROT_NONE ) = 0 mmap ( 0x7fc2916c0000, 12288 , PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_FIXED | MAP_DENYWRITE, 3 , 0x4e000 ) = 0x7fc2916c0000 close ( 3 ) = 0 ... # \u8ddf\u8e2a\u670d\u52a1\u7a0b\u5e8f strace -o output.txt -T -tt -e trace = all -p 36897 pmap \u5206\u6790\u7ebf\u7a0b\u5806\u6808 pstrack 36897 sar (\u53ef\u4f7f\u7528 vmstat, prstat \u66ff\u6362) \u67e5\u770b CPU \u4f7f\u7528\u7387\uff1a sar -u 1 2 (\u6bcf\u79d2\u91c7\u6837 1 \u6b21\uff0c\u5171\u91c7\u6837 2 \u6b21) \u67e5\u770b CPU \u5e73\u5747\u8d1f\u8f7d\uff1a sar -q 1 2 (\u67e5\u770b\u8fd0\u884c\u961f\u5217\u4e2d\u7684\u8fdb\u7a0b\u6570\u3001\u7cfb\u7edf\u4e0a\u7684\u8fdb\u7a0b\u5927\u5c0f\u3001\u5e73\u5747\u8d1f\u8f7d\u7b49) \u67e5\u770b\u5185\u5b58\u4f7f\u7528\uff1a sar -r 1 2 / vmstat 1 3 \u67e5\u770b\u5185\u5b58\u9875\u4ea4\u6362\u67e5\u8be2\uff1a sar -W 1 3","title":"\u5de5\u5177"},{"location":"linux/analysis/#_6","text":"netstat \u7528\u4e8e\u663e\u793a\u5404\u79cd\u7f51\u7edc\u76f8\u5173\u4fe1\u606f\uff0c\u5982\u7f51\u7edc\u8fde\u63a5\uff0c\u8def\u7531\u8868\uff0c\u63a5\u53e3\u72b6\u6001 (Interface Statistics)\uff0cmasquerade \u8fde\u63a5\uff0c\u591a\u64ad\u6210\u5458 (Multicast Memberships) \u7b49\u7b49 \u5217\u51fa\u6240\u6709\u7aef\u53e3 (\u5305\u62ec\u76d1\u542c\u548c\u672a\u76d1\u542c\u7684): netstat -a \u5217\u51fa\u6240\u6709 tcp \u7aef\u53e3: netstat -at \u5217\u51fa\u6240\u6709\u6709\u76d1\u542c\u7684\u670d\u52a1\u72b6\u6001: netstat -l \u7aef\u53e3\u67e5\u8be2: netstat -antp | grep 8080 # netstat -antp | grep 8669 tcp6 0 0 :::8669 :::* LISTEN 36897 /nebula-graphd # ps 36897 PID TTY STAT TIME COMMAND 36897 ? Ssl 4 :47 ./bin/nebula-graphd --flagfile ./nebula-graph/etc/nebula-graphd.conf","title":"\u7f51\u7edc"},{"location":"linux/analysis/#ipcs","text":"IPCS \u67e5\u8be2 # ipcs IPC status from <running system> as of Fri Jul 8 15 :58:10 CST 2022 T ID KEY MODE OWNER GROUP Message Queues: T ID KEY MODE OWNER GROUP Shared Memory: T ID KEY MODE OWNER GROUP Semaphores: s 720896 0xe93c17d9 --ra-ra-ra- work staff s 262146 0x624b15dc --ra------- work staff s 262147 0x89600dce --ra------- work staff s 262148 0xbf832208 --ra------- work staff s 65541 0xccb76beb --ra------- work staff s 65542 0xfb27a582 --ra------- work staff s 65543 0x27a6455a --ra------- work staff s 65544 0xb1b0e0cd --ra------- work staff","title":"IPCS"},{"location":"linux/analysis/#_7","text":"nm \u663e\u793a\u5173\u4e8e\u6307\u5b9a File \u4e2d\u7b26\u53f7\u7684\u4fe1\u606f\uff0c\u6587\u4ef6\u53ef\u4ee5\u662f\u5bf9\u8c61\u6587\u4ef6\u3001\u53ef\u6267\u884c\u6587\u4ef6\u6216\u5bf9\u8c61\u6587\u4ef6\u5e93 zsh \u279c nm main 00000001000a6bf8 s _ $f64 .3eb0000000000000 00000001000a6c00 s _ $f64 .3f50624dd2f1a9fc 00000001000a6c08 s _ $f64 .3f847ae147ae147b 00000001000a6c10 s _ $f64 .3fd3333333333333 00000001000a6c18 s _ $f64 .3fe6666666666666 00000001000a6c20 s _ $f64 .3fee666666666666 00000001000a6c28 s _ $f64 .3ff199999999999a 00000001000a6c30 s _ $f64 .3ff3333333333333 00000001000a6c38 s _ $f64 .3ffb333333333333 00000001000a6c40 s _ $f64 .4059000000000000 00000001000a6c48 s _ $f64 .40c3880000000000 00000001000a6c50 s _ $f64 .40f0000000000000 00000001000a6c58 s _ $f64 .412e848000000000 00000001000a6c60 s _ $f64 .7ff0000000000000 00000001000a6c68 s _ $f64 .bfd3333333333333 00000001000a6c70 s _ $f64 .bfe62e42fefa39ef U ___error 0000000100133e60 b __cgo_init 0000000100133e68 b __cgo_notify_runtime_init_done 0000000100133e70 b __cgo_thread_start 0000000100133e78 b __cgo_yield U __exit 000000010005ad70 t __rt0_arm64_darwin 00000001000570d0 t _aeshashbody 0000000100162f30 s _block_size 00000001000570a0 t _callRet U _clock_gettime U _close U _closedir 0000000100001ab0 t _cmpbody 0000000100057770 t _debugCall1024 ... ... 000000010011d2a0 s _unicode/utf8.acceptRanges 0000000100120260 s _unicode/utf8.first U _usleep U _write ogjdump \u5de5\u5177\u7528\u6765\u663e\u793a\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u4fe1\u606f zsh \u279c objdump -d main main: file format mach-o arm64 Disassembly of section __TEXT,__text: 0000000100001000 <_runtime.text>: 100001000 : ff 20 47 6f umlal2.4s v31, v7, v7 [ 0 ] 100001004 : 20 62 75 69 ldpsw x0, x24, [ x17, #-88] 100001008 : 6c 64 20 49 <unknown> 10000100c: 44 3a 20 22 <unknown> 100001010 : 5a 46 58 50 adr x26, #723146 100001014 : 5f 33 4b 38 ldurb wzr, [ x26, #179] 100001018 : 5f 6d 45 65 <unknown> 10000101c: 34 6f 48 64 <unknown> 100001020 : 57 56 6a 4c <unknown> 100001024 : 2f 66 64 5f <unknown> 100001028 : 53 63 6c 66 <unknown> 10000102c: 34 6d 57 50 adr x20, #716198 100001030 : 6c 56 79 46 <unknown> 100001034 : 36 32 4b 67 <unknown> ... ... readelf \u4e0e objdump \u7c7b\u4f3c\uff0c\u5c55\u793a\u7684\u4fe1\u606f\u5177\u4f53 # readelf -all /usr/bin/make ELF Header: Magic: 7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 Class: ELF64 Data: 2 ' s complement, little endian Version: 1 ( current ) OS/ABI: UNIX - System V ABI Version: 0 Type: EXEC ( Executable file ) Machine: Advanced Micro Devices X86-64 Version: 0x1 Entry point address: 0x40431d Start of program headers: 64 ( bytes into file ) Start of section headers: 180896 ( bytes into file ) Flags: 0x0 Size of this header: 64 ( bytes ) Size of program headers: 56 ( bytes ) Number of program headers: 9 Size of section headers: 64 ( bytes ) Number of section headers: 29 Section header string table index: 28 Section Headers: [ Nr ] Name Type Address Offset Size EntSize Flags Link Info Align [ 0 ] NULL 0000000000000000 00000000 0000000000000000 0000000000000000 0 0 0 [ 1 ] .interp PROGBITS 0000000000400238 00000238 000000000000001c 0000000000000000 A 0 0 1 [ 2 ] .note.ABI-tag NOTE 0000000000400254 00000254 0000000000000020 0000000000000000 A 0 0 4 [ 3 ] .note.gnu.build-i NOTE 0000000000400274 00000274 0000000000000024 0000000000000000 A 0 0 4 [ 4 ] .gnu.hash GNU_HASH 0000000000400298 00000298 000000000000004c 0000000000000000 A 5 0 8 [ 5 ] .dynsym DYNSYM 00000000004002e8 000002e8 0000000000000b88 0000000000000018 A 6 1 8 [ 6 ] .dynstr STRTAB 0000000000400e70 00000e70 000000000000040f 0000000000000000 A 0 0 1 [ 7 ] .gnu.version VERSYM 0000000000401280 00001280 00000000000000f6 0000000000000002 A 5 0 2 [ 8 ] .gnu.version_r VERNEED 0000000000401378 00001378 0000000000000070 0000000000000000 A 6 1 8 size \u67e5\u770b\u7a0b\u5e8f\u8fd0\u884c\u65f6\u5404\u4e2a\u6bb5\u7684\u5b9e\u9645\u5185\u5b58\u5360\u7528 zsh \u279c size main __TEXT __DATA __OBJC others dec hex 688128 310624 0 4295554186 4296552938 1001831ea xxd \u5341\u516d\u8fdb\u5236\u663e\u793a\u6570\u636e zsh \u279c xxd main 00000000 : cffa edfe 0c00 0001 0000 0000 0200 0000 ................ 00000010 : 0e00 0000 7009 0000 0400 2000 0000 0000 ....p..... ..... 00000020 : 1900 0000 4800 0000 5f5f 5041 4745 5a45 ....H...__PAGEZE 00000030 : 524f 0000 0000 0000 0000 0000 0000 0000 RO.............. 00000040 : 0000 0000 0100 0000 0000 0000 0000 0000 ................ 00000050 : 0000 0000 0000 0000 0000 0000 0000 0000 ................ 00000060 : 0000 0000 0000 0000 1900 0000 3801 0000 ............8... 00000070 : 5f5f 5445 5854 0000 0000 0000 0000 0000 __TEXT.......... 00000080 : 0000 0000 0100 0000 0080 0a00 0000 0000 ................ 00000090 : 0000 0000 0000 0000 0080 0a00 0000 0000 ................ 000000a0: 0700 0000 0500 0000 0300 0000 0000 0000 ................ 000000b0: 5f5f 7465 7874 0000 0000 0000 0000 0000 __text.......... 000000c0: 5f5f 5445 5854 0000 0000 0000 0000 0000 __TEXT.......... 000000d0: 0010 0000 0100 0000 8070 0800 0000 0000 .........p...... 000000e0: 0010 0000 0400 0000 0000 0000 0000 0000 ................ 000000f0: 0004 0080 0000 0000 0000 0000 0000 0000 ................ 00000100 : 5f5f 7379 6d62 6f6c 5f73 7475 6231 0000 __symbol_stub1.. 00000110 : 5f5f 5445 5854 0000 0000 0000 0000 0000 __TEXT.......... 00000120 : 8080 0800 0100 0000 3402 0000 0000 0000 ........4....... 00000130 : 8080 0800 0500 0000 0000 0000 0000 0000 ................ ... ...","title":"\u6587\u4ef6\u5206\u6790"},{"location":"linux/centos_disk_mount/","tags":["Linux","Centos","Dick"],"text":"Centos7 \u78c1\u76d8\u6302\u8f7d \u67e5\u770b\u78c1\u76d8\u6302\u8f7d # fdisk -l Disk /dev/sda: 4000 .8 GB, 4000787030016 bytes, 7814037168 sectors Units = sectors of 1 * 512 = 512 bytes Sector size ( logical/physical ) : 512 bytes / 512 bytes I/O size ( minimum/optimal ) : 512 bytes / 512 bytes Disk label type: gpt Disk identifier: ... .... \u78c1\u76d8\u5206\u533a # fdisk /vdb/sda Command action d delete a partition g create a new empty GPT partition table G create an IRIX ( SGI ) partition table l list known partition types m print this menu n add a new partition o create a new empty DOS partition table p print the partition table q quit without saving changes s create a new empty Sun disklabel t change a partition ' s system id v verify the partition table w write table to disk and exit x extra functionality ( experts only ) Command ( m for help ) : n ( \u65b0\u5efa\u5206\u533a ) \u78c1\u76d8\u683c\u5f0f\u5316 mkfs.ext4 /vdb/sda \u78c1\u76d8\u6302\u8f7d mount /vdb/sda /<\u76ee\u7684\u76ee\u5f55> \u6301\u4e45\u5316\u6302\u8f7d /etc/fstab /vdb/ sda / < \u76ee\u7684\u76ee\u5f55 > ext4 defaults 0 0","title":"Centos\u78c1\u76d8\u6302\u8f7d"},{"location":"linux/centos_disk_mount/#centos7","text":"","title":"Centos7 \u78c1\u76d8\u6302\u8f7d"},{"location":"linux/centos_disk_mount/#_1","text":"# fdisk -l Disk /dev/sda: 4000 .8 GB, 4000787030016 bytes, 7814037168 sectors Units = sectors of 1 * 512 = 512 bytes Sector size ( logical/physical ) : 512 bytes / 512 bytes I/O size ( minimum/optimal ) : 512 bytes / 512 bytes Disk label type: gpt Disk identifier: ... ....","title":"\u67e5\u770b\u78c1\u76d8\u6302\u8f7d"},{"location":"linux/centos_disk_mount/#_2","text":"# fdisk /vdb/sda Command action d delete a partition g create a new empty GPT partition table G create an IRIX ( SGI ) partition table l list known partition types m print this menu n add a new partition o create a new empty DOS partition table p print the partition table q quit without saving changes s create a new empty Sun disklabel t change a partition ' s system id v verify the partition table w write table to disk and exit x extra functionality ( experts only ) Command ( m for help ) : n ( \u65b0\u5efa\u5206\u533a )","title":"\u78c1\u76d8\u5206\u533a"},{"location":"linux/centos_disk_mount/#_3","text":"mkfs.ext4 /vdb/sda","title":"\u78c1\u76d8\u683c\u5f0f\u5316"},{"location":"linux/centos_disk_mount/#_4","text":"mount /vdb/sda /<\u76ee\u7684\u76ee\u5f55>","title":"\u78c1\u76d8\u6302\u8f7d"},{"location":"linux/centos_disk_mount/#etcfstab","text":"/vdb/ sda / < \u76ee\u7684\u76ee\u5f55 > ext4 defaults 0 0","title":"\u6301\u4e45\u5316\u6302\u8f7d /etc/fstab"},{"location":"linux/centos_kernal_upgrade/","tags":["Linux","Centos","Kernel"],"text":"Centos \u5185\u6838\u5347\u7ea7 \u7cfb\u7edf\u66f4\u65b0 [ root@localhost ~ ] $ yum -y update [ root@localhost ~ ] $ yum -y install yum-plugin-fastestmirror \u68c0\u67e5\u5f53\u524d\u7cfb\u7edf\u53ca\u5185\u6838\u7248\u672c [ root@localhost ~ ] $ cat /etc/redhat-release CentOS release 7 .3 ( Final ) [ root@localhost ~ ] $ uname -r 3 .10.0_3-0-0-30 \u65b0\u589e repo\uff1aelrepo [ root@localhost ~ ] $ rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org [ root@localhost ~ ] $ rpm -Uvh https://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm yum repolist \u5b89\u88c5\u65b0\u7248\u672c\u5185\u6838 [ root@localhost ~ ] $ yum --enablerepo = elrepo-kernel install kernel-ml [ root@localhost ~ ] $ yum repolist all \u914d\u7f6e\u542f\u52a8\u9879 \u67e5\u8be2\u53ef\u7528\u5185\u6838\u542f\u52a8\u9879 [ root@localhost ~ ] $ sudo awk -F \\' '$1==\"menuentry \" {print i++ \" : \" $2}' /etc/grub2.cfg \u8bbe\u7f6e\u542f\u52a8\u9879\u5e76\u751f\u6210\u542f\u52a8\u9879\u914d\u7f6e sudo grub2-set-default 0 sudo grub2-mkconfig -o /boot/grub2/grub.cfg \u91cd\u542f\u7cfb\u7edf [ root@localhost ~ ] $ sudo reboot \u540e\u7eed \u68c0\u67e5\u5185\u6838\u7248\u672c [ root@localhost ~ ] $ uname -r \u79fb\u9664\u65e7\u7248\u672c\u5185\u6838 [ root@localhost ~ ] $ yum install yum-utils [ root@localhost ~ ] $ package-cleanup --oldkernels","title":"Centos\u5185\u6838\u5347\u7ea7"},{"location":"linux/centos_kernal_upgrade/#centos","text":"","title":"Centos \u5185\u6838\u5347\u7ea7"},{"location":"linux/centos_kernal_upgrade/#_1","text":"[ root@localhost ~ ] $ yum -y update [ root@localhost ~ ] $ yum -y install yum-plugin-fastestmirror","title":"\u7cfb\u7edf\u66f4\u65b0"},{"location":"linux/centos_kernal_upgrade/#_2","text":"[ root@localhost ~ ] $ cat /etc/redhat-release CentOS release 7 .3 ( Final ) [ root@localhost ~ ] $ uname -r 3 .10.0_3-0-0-30","title":"\u68c0\u67e5\u5f53\u524d\u7cfb\u7edf\u53ca\u5185\u6838\u7248\u672c"},{"location":"linux/centos_kernal_upgrade/#repoelrepo","text":"[ root@localhost ~ ] $ rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org [ root@localhost ~ ] $ rpm -Uvh https://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm yum repolist","title":"\u65b0\u589e repo\uff1aelrepo"},{"location":"linux/centos_kernal_upgrade/#_3","text":"[ root@localhost ~ ] $ yum --enablerepo = elrepo-kernel install kernel-ml [ root@localhost ~ ] $ yum repolist all","title":"\u5b89\u88c5\u65b0\u7248\u672c\u5185\u6838"},{"location":"linux/centos_kernal_upgrade/#_4","text":"","title":"\u914d\u7f6e\u542f\u52a8\u9879"},{"location":"linux/centos_kernal_upgrade/#_5","text":"[ root@localhost ~ ] $ sudo awk -F \\' '$1==\"menuentry \" {print i++ \" : \" $2}' /etc/grub2.cfg","title":"\u67e5\u8be2\u53ef\u7528\u5185\u6838\u542f\u52a8\u9879"},{"location":"linux/centos_kernal_upgrade/#_6","text":"sudo grub2-set-default 0 sudo grub2-mkconfig -o /boot/grub2/grub.cfg","title":"\u8bbe\u7f6e\u542f\u52a8\u9879\u5e76\u751f\u6210\u542f\u52a8\u9879\u914d\u7f6e"},{"location":"linux/centos_kernal_upgrade/#_7","text":"[ root@localhost ~ ] $ sudo reboot","title":"\u91cd\u542f\u7cfb\u7edf"},{"location":"linux/centos_kernal_upgrade/#_8","text":"","title":"\u540e\u7eed"},{"location":"linux/centos_kernal_upgrade/#_9","text":"[ root@localhost ~ ] $ uname -r","title":"\u68c0\u67e5\u5185\u6838\u7248\u672c"},{"location":"linux/centos_kernal_upgrade/#_10","text":"[ root@localhost ~ ] $ yum install yum-utils [ root@localhost ~ ] $ package-cleanup --oldkernels","title":"\u79fb\u9664\u65e7\u7248\u672c\u5185\u6838"},{"location":"linux/commands/","tags":["Linux"],"text":"max file descriptors /etc/security/limits.conf \u6dfb\u52a0\u5982\u4e0b\u914d\u7f6e * soft nofile 655360 * hard nofile 655360 * soft nproc 655360 * hard nproc 655360 /etc/sysctl.conf (root) \u6dfb\u52a0\u5982\u4e0b\u914d\u7f6e vm.max_map_count = 655360 \u6267\u884c sysctl -p \u78c1\u76d8\u6302\u8f7d \u67e5\u770b\u78c1\u76d8\u4f7f\u7528\u60c5\u51b5\uff1adf -h \u67e5\u770b\u78c1\u76d8\u6302\u8f7d\uff1afdisk -l \u683c\u5f0f\u5316\u78c1\u76d8\uff1amkfs.xfs -f /dev/vdb \u521b\u5efa\u6302\u8f7d\u8def\u5f84\uff1amkdir /data \u6302\u8f7d\uff1amount -t xfs /dev/vdb /data \u56fa\u5b9a\u914d\u7f6e\uff1a vim /etc/fstab /dev/vdb /data xfs defaults 0 0 \u5e38\u7528\u547d\u4ee4 \u67e5\u770b\u7269\u7406 CPU cat /proc/cpuinfo | grep \"physical\" | sort | uniq -c \u67e5\u770b\u670d\u52a1\u5668\u578b\u53f7 dmidecode | grep \u201cProduct Name\u201d \u67e5\u770b\u7cfb\u7edf\u7248\u672c cat /etc/redhat-release \u67e5\u770b\u5206\u533a\u548c\u78c1\u76d8 lsblk \u67e5\u770b\u78c1\u76d8\u7a7a\u95f4\u4f7f\u7528\u60c5\u51b5 df -h \u5206\u533a\u5de5\u5177\u67e5\u770b\u5206\u533a\u4fe1\u606f fdisk -l \u67e5\u770b\u5206\u533a cfdisk /dev/sda \u67e5\u770b\u786c\u76d8 label\uff08\u522b\u540d\uff09 blkid \u7edf\u8ba1\u5f53\u524d\u76ee\u5f55\u5404\u6587\u4ef6\u5939\u5927\u5c0f du -sh ./* \u67e5\u770b\u5185\u5b58\u5927\u5c0f free -h \u67e5\u770b\u5f53\u524d\u7f51\u7edc\u8fde\u63a5\u60c5\u51b5 netstat -ant | awk '/^tcp/ {++S[$NF]} END {for(a in S) print (a,S[a])}' \u67e5\u770b CPU \u6838\u6570\u548c\u578b\u53f7\u548c\u4e3b\u9891 cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c \u67e5\u770b cpu \u6838\u5fc3\u6570 cat /proc/cpuinfo | grep \"cpu cores\" | uniq \u67e5\u770b\u7269\u7406 cpu \u4e2a\u6570 cat /proc/cpuinfo | grep \"physical id\" | uniq | wc -l \u67e5\u770b\u903b\u8f91 cpu \u7684\u4e2a\u6570 cat /proc/cpuinfo | grep \"processor\" | wc -l \u7aef\u53e3\u5360\u7528 lsof -i:3306 \u67e5\u770b\u8fdb\u7a0b\u6253\u5f00\u7684\u6587\u4ef6 lsof -p 56863 \u67e5\u770b\u6307\u5b9a\u76ee\u5f55\u4e0b\u88ab\u8fdb\u7a0b\u5f00\u542f\u7684\u6587\u4ef6 lsof +d /tmp \u67e5\u770b\u7528\u6237 username \u7684\u8fdb\u7a0b\u6240\u6253\u5f00\u7684\u6587\u4ef6 lsof -u username \u67e5\u8be2\u5f52\u5c5e\u4e8e\u7528\u6237 username \u7684\u8fdb\u7a0b ps -lu username top \u547d\u4ee4 # top Processes: 469 total, 2 running, 467 sleeping, 3111 threads 15 :32:48 Load Avg: 2 .57, 2 .46, 2 .81 CPU usage: 9 .67% user, 10 .82% sys, 79 .49% idle SharedLibs: 438M resident, 89M data, 23M linkedit. MemRegions: 348979 total, 2041M resident, 149M private, 2422M shared. PhysMem: 15G used ( 1960M wired ) , 83M unused. VM: 188T vsize, 3823M framework vsize, 8716015 ( 0 ) swapins, 10359236 ( 0 ) swapouts. Networks: packets: 63434144 /53G in , 46790060 /28G out. Disks: 22489480 /544G read, 13429524 /440G written. PID COMMAND %CPU TIME #TH #WQ #PORT MEM PURG CMPRS PGRP PPID STATE BOOSTS %CPU_ME %CPU_OTHRS UID FAULTS COW MSGSENT MSGRECV 38123 com.apple.Vi 25 .6 90 :48.24 11 1 61 8084M 0B 9273M- 38123 1 sleeping *4 [ 3 ] 0 .00000 0 .00000 501 6363101 + 92 490 186 388 WindowServer 24 .2 15 :34:57 23 6 3884 981M- 5920K+ 274M 388 1 sleeping *0 [ 1 ] 4 .67062 2 .97198 88 55674126 + 9413740 404174596 + 288000142 + 14642 Notion Helpe 20 .2 02 :03:43 17 1 207 433M+ 0B 373M- 14632 14632 sleeping *0 [ 121 ] 0 .00000 0 .00000 501 9917166 + 225816 9774063 + 4216281 + 0 kernel_task 19 .3 09 :23:30 508 /8 0 0 165M+ 0B 0B 0 0 running 0 [ 0 ] 0 .00000 0 .00000 0 53925 0 1398020956 + 1170512637 + 29385 iTerm2 14 .9 16 :01.83 10 7 415 - 378M- 76M- 133M- 29385 1 sleeping *0 [ 4915 ] 0 .74361 1 .26299 501 9827951 + 421 1833342 + 386319 + \u5e38\u89c1\u642d\u914d P\uff1a\u6839\u636eCPU\u4f7f\u7528\u767e\u5206\u6bd4\u5927\u5c0f\u8fdb\u884c\u6392\u5e8f M\uff1a\u6839\u636e\u9a7b\u7559\u5185\u5b58\u5927\u5c0f\u8fdb\u884c\u6392\u5e8f i\uff1a\u4f7ftop\u4e0d\u663e\u793a\u4efb\u4f55\u95f2\u7f6e\u6216\u8005\u50f5\u6b7b\u8fdb\u7a0b","title":"\u5e38\u7528\u547d\u4ee4"},{"location":"linux/commands/#max-file-descriptors","text":"","title":"max file descriptors"},{"location":"linux/commands/#etcsecuritylimitsconf","text":"\u6dfb\u52a0\u5982\u4e0b\u914d\u7f6e * soft nofile 655360 * hard nofile 655360 * soft nproc 655360 * hard nproc 655360","title":"/etc/security/limits.conf"},{"location":"linux/commands/#etcsysctlconf-root","text":"\u6dfb\u52a0\u5982\u4e0b\u914d\u7f6e vm.max_map_count = 655360 \u6267\u884c sysctl -p","title":"/etc/sysctl.conf (root)"},{"location":"linux/commands/#_1","text":"\u67e5\u770b\u78c1\u76d8\u4f7f\u7528\u60c5\u51b5\uff1adf -h \u67e5\u770b\u78c1\u76d8\u6302\u8f7d\uff1afdisk -l \u683c\u5f0f\u5316\u78c1\u76d8\uff1amkfs.xfs -f /dev/vdb \u521b\u5efa\u6302\u8f7d\u8def\u5f84\uff1amkdir /data \u6302\u8f7d\uff1amount -t xfs /dev/vdb /data \u56fa\u5b9a\u914d\u7f6e\uff1a vim /etc/fstab /dev/vdb /data xfs defaults 0 0","title":"\u78c1\u76d8\u6302\u8f7d"},{"location":"linux/commands/#_2","text":"\u67e5\u770b\u7269\u7406 CPU cat /proc/cpuinfo | grep \"physical\" | sort | uniq -c \u67e5\u770b\u670d\u52a1\u5668\u578b\u53f7 dmidecode | grep \u201cProduct Name\u201d \u67e5\u770b\u7cfb\u7edf\u7248\u672c cat /etc/redhat-release \u67e5\u770b\u5206\u533a\u548c\u78c1\u76d8 lsblk \u67e5\u770b\u78c1\u76d8\u7a7a\u95f4\u4f7f\u7528\u60c5\u51b5 df -h \u5206\u533a\u5de5\u5177\u67e5\u770b\u5206\u533a\u4fe1\u606f fdisk -l \u67e5\u770b\u5206\u533a cfdisk /dev/sda \u67e5\u770b\u786c\u76d8 label\uff08\u522b\u540d\uff09 blkid \u7edf\u8ba1\u5f53\u524d\u76ee\u5f55\u5404\u6587\u4ef6\u5939\u5927\u5c0f du -sh ./* \u67e5\u770b\u5185\u5b58\u5927\u5c0f free -h \u67e5\u770b\u5f53\u524d\u7f51\u7edc\u8fde\u63a5\u60c5\u51b5 netstat -ant | awk '/^tcp/ {++S[$NF]} END {for(a in S) print (a,S[a])}' \u67e5\u770b CPU \u6838\u6570\u548c\u578b\u53f7\u548c\u4e3b\u9891 cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c \u67e5\u770b cpu \u6838\u5fc3\u6570 cat /proc/cpuinfo | grep \"cpu cores\" | uniq \u67e5\u770b\u7269\u7406 cpu \u4e2a\u6570 cat /proc/cpuinfo | grep \"physical id\" | uniq | wc -l \u67e5\u770b\u903b\u8f91 cpu \u7684\u4e2a\u6570 cat /proc/cpuinfo | grep \"processor\" | wc -l \u7aef\u53e3\u5360\u7528 lsof -i:3306 \u67e5\u770b\u8fdb\u7a0b\u6253\u5f00\u7684\u6587\u4ef6 lsof -p 56863 \u67e5\u770b\u6307\u5b9a\u76ee\u5f55\u4e0b\u88ab\u8fdb\u7a0b\u5f00\u542f\u7684\u6587\u4ef6 lsof +d /tmp \u67e5\u770b\u7528\u6237 username \u7684\u8fdb\u7a0b\u6240\u6253\u5f00\u7684\u6587\u4ef6 lsof -u username \u67e5\u8be2\u5f52\u5c5e\u4e8e\u7528\u6237 username \u7684\u8fdb\u7a0b ps -lu username","title":"\u5e38\u7528\u547d\u4ee4"},{"location":"linux/commands/#top","text":"# top Processes: 469 total, 2 running, 467 sleeping, 3111 threads 15 :32:48 Load Avg: 2 .57, 2 .46, 2 .81 CPU usage: 9 .67% user, 10 .82% sys, 79 .49% idle SharedLibs: 438M resident, 89M data, 23M linkedit. MemRegions: 348979 total, 2041M resident, 149M private, 2422M shared. PhysMem: 15G used ( 1960M wired ) , 83M unused. VM: 188T vsize, 3823M framework vsize, 8716015 ( 0 ) swapins, 10359236 ( 0 ) swapouts. Networks: packets: 63434144 /53G in , 46790060 /28G out. Disks: 22489480 /544G read, 13429524 /440G written. PID COMMAND %CPU TIME #TH #WQ #PORT MEM PURG CMPRS PGRP PPID STATE BOOSTS %CPU_ME %CPU_OTHRS UID FAULTS COW MSGSENT MSGRECV 38123 com.apple.Vi 25 .6 90 :48.24 11 1 61 8084M 0B 9273M- 38123 1 sleeping *4 [ 3 ] 0 .00000 0 .00000 501 6363101 + 92 490 186 388 WindowServer 24 .2 15 :34:57 23 6 3884 981M- 5920K+ 274M 388 1 sleeping *0 [ 1 ] 4 .67062 2 .97198 88 55674126 + 9413740 404174596 + 288000142 + 14642 Notion Helpe 20 .2 02 :03:43 17 1 207 433M+ 0B 373M- 14632 14632 sleeping *0 [ 121 ] 0 .00000 0 .00000 501 9917166 + 225816 9774063 + 4216281 + 0 kernel_task 19 .3 09 :23:30 508 /8 0 0 165M+ 0B 0B 0 0 running 0 [ 0 ] 0 .00000 0 .00000 0 53925 0 1398020956 + 1170512637 + 29385 iTerm2 14 .9 16 :01.83 10 7 415 - 378M- 76M- 133M- 29385 1 sleeping *0 [ 4915 ] 0 .74361 1 .26299 501 9827951 + 421 1833342 + 386319 + \u5e38\u89c1\u642d\u914d P\uff1a\u6839\u636eCPU\u4f7f\u7528\u767e\u5206\u6bd4\u5927\u5c0f\u8fdb\u884c\u6392\u5e8f M\uff1a\u6839\u636e\u9a7b\u7559\u5185\u5b58\u5927\u5c0f\u8fdb\u884c\u6392\u5e8f i\uff1a\u4f7ftop\u4e0d\u663e\u793a\u4efb\u4f55\u95f2\u7f6e\u6216\u8005\u50f5\u6b7b\u8fdb\u7a0b","title":"top \u547d\u4ee4"},{"location":"tags/","text":"Centos Centos\u78c1\u76d8\u6302\u8f7d Centos\u5185\u6838\u5347\u7ea7 Cilium Cilium \u5b89\u88c5 Dick Centos\u78c1\u76d8\u6302\u8f7d ES IK\u5206\u8bcd\u70ed\u66f4\u65b0 Envoy \u57fa\u7840\u77e5\u8bc6 Git Git\u5e38\u7528\u64cd\u4f5c Golang Goquery\u5b9e\u7528\u59ff\u52bf Goquery Goquery\u5b9e\u7528\u59ff\u52bf HashTable HashTable IK IK\u5206\u8bcd\u70ed\u66f4\u65b0 Istio Istio Mesh K8S Cilium \u5b89\u88c5 \u5b89\u88c5 \u8d44\u6e90\u7c7b\u578b \u670d\u52a1\u4e0e\u8d1f\u8f7d Kernel Centos\u5185\u6838\u5347\u7ea7 Kubernetes Cilium \u5b89\u88c5 \u5b89\u88c5 \u8d44\u6e90\u7c7b\u578b \u670d\u52a1\u4e0e\u8d1f\u8f7d Linux \u6027\u80fd\u5206\u6790 Centos\u78c1\u76d8\u6302\u8f7d Centos\u5185\u6838\u5347\u7ea7 \u5e38\u7528\u547d\u4ee4 Redis HashTable \u7b80\u4ecb Resource \u8d44\u6e90\u7c7b\u578b Service \u670d\u52a1\u4e0e\u8d1f\u8f7d Service Mesh \u57fa\u7840\u77e5\u8bc6 Tools \u5e38\u7528\u5de5\u5177 Trace \u57fa\u7840\u77e5\u8bc6 \u670d\u52a1\u6cbb\u7406 \u57fa\u7840\u77e5\u8bc6 \u6ce8\u518c\u4e2d\u5fc3 \u57fa\u7840\u77e5\u8bc6 \u7f51\u5173 \u57fa\u7840\u77e5\u8bc6 \u8d1f\u8f7d\u5747\u8861 \u57fa\u7840\u77e5\u8bc6 \u914d\u7f6e\u4e2d\u5fc3 \u57fa\u7840\u77e5\u8bc6","title":"Tag"},{"location":"tags/#centos","text":"Centos\u78c1\u76d8\u6302\u8f7d Centos\u5185\u6838\u5347\u7ea7","title":"Centos"},{"location":"tags/#cilium","text":"Cilium \u5b89\u88c5","title":"Cilium"},{"location":"tags/#dick","text":"Centos\u78c1\u76d8\u6302\u8f7d","title":"Dick"},{"location":"tags/#es","text":"IK\u5206\u8bcd\u70ed\u66f4\u65b0","title":"ES"},{"location":"tags/#envoy","text":"\u57fa\u7840\u77e5\u8bc6","title":"Envoy"},{"location":"tags/#git","text":"Git\u5e38\u7528\u64cd\u4f5c","title":"Git"},{"location":"tags/#golang","text":"Goquery\u5b9e\u7528\u59ff\u52bf","title":"Golang"},{"location":"tags/#goquery","text":"Goquery\u5b9e\u7528\u59ff\u52bf","title":"Goquery"},{"location":"tags/#hashtable","text":"HashTable","title":"HashTable"},{"location":"tags/#ik","text":"IK\u5206\u8bcd\u70ed\u66f4\u65b0","title":"IK"},{"location":"tags/#istio","text":"Istio Mesh","title":"Istio"},{"location":"tags/#k8s","text":"Cilium \u5b89\u88c5 \u5b89\u88c5 \u8d44\u6e90\u7c7b\u578b \u670d\u52a1\u4e0e\u8d1f\u8f7d","title":"K8S"},{"location":"tags/#kernel","text":"Centos\u5185\u6838\u5347\u7ea7","title":"Kernel"},{"location":"tags/#kubernetes","text":"Cilium \u5b89\u88c5 \u5b89\u88c5 \u8d44\u6e90\u7c7b\u578b \u670d\u52a1\u4e0e\u8d1f\u8f7d","title":"Kubernetes"},{"location":"tags/#linux","text":"\u6027\u80fd\u5206\u6790 Centos\u78c1\u76d8\u6302\u8f7d Centos\u5185\u6838\u5347\u7ea7 \u5e38\u7528\u547d\u4ee4","title":"Linux"},{"location":"tags/#redis","text":"HashTable \u7b80\u4ecb","title":"Redis"},{"location":"tags/#resource","text":"\u8d44\u6e90\u7c7b\u578b","title":"Resource"},{"location":"tags/#service","text":"\u670d\u52a1\u4e0e\u8d1f\u8f7d","title":"Service"},{"location":"tags/#service-mesh","text":"\u57fa\u7840\u77e5\u8bc6","title":"Service Mesh"},{"location":"tags/#tools","text":"\u5e38\u7528\u5de5\u5177","title":"Tools"},{"location":"tags/#trace","text":"\u57fa\u7840\u77e5\u8bc6","title":"Trace"},{"location":"tags/#_1","text":"\u57fa\u7840\u77e5\u8bc6","title":"\u670d\u52a1\u6cbb\u7406"},{"location":"tags/#_2","text":"\u57fa\u7840\u77e5\u8bc6","title":"\u6ce8\u518c\u4e2d\u5fc3"},{"location":"tags/#_3","text":"\u57fa\u7840\u77e5\u8bc6","title":"\u7f51\u5173"},{"location":"tags/#_4","text":"\u57fa\u7840\u77e5\u8bc6","title":"\u8d1f\u8f7d\u5747\u8861"},{"location":"tags/#_5","text":"\u57fa\u7840\u77e5\u8bc6","title":"\u914d\u7f6e\u4e2d\u5fc3"}]}